<template>
  <div v-if="isMobile()" class="mobile-container" :style="{height: $setMobileHeightByVh()}">
    <van-nav-bar
        class="mobile-header"
        :title="$route.meta.title"
    >
    </van-nav-bar>
    <section class="mobile-main">
      <div class="mobile-upload-container">
        <UploadHeadImg class="mobile-upload" v-model="userInfo.image" :canUpload="!buttonDisabled"></UploadHeadImg>
      </div>
      <div v-if="buttonDisabled">
        <van-field
          v-for="(item, index) in editMessage"
          :key="index"
          v-model="item.text"
          :label="item.label"
          :readonly="buttonDisabled || item.readOnly"
          :disabled="!buttonDisabled && item.disabled"
          placeholder="--"
          input-align="right"
          @click-input="handleOpenArea(item)"
        />
      </div>
      <div v-else>
        <van-field
          v-for="(item, index) in editMessage"
          :key="index"
          v-model="item.text"
          :label="item.label"
          :readonly="buttonDisabled || item.readOnly"
          :disabled="!buttonDisabled && item.disabled"
          placeholder="--"
          input-align="right"
          @click-input="handleOpenArea(item)"
        />
      </div>

      <!-- 执裁经历 -->
      <div class="mobile-message-big" style="border-top: 1px solid #f0f3f7;">
        <p class="mobile-label">执裁经历：</p>
        <historyInput ref="historyInput" v-if="!buttonDisabled" v-model="experienceData"></historyInput>
        <div
          v-else
          v-for="year in Object.keys(experienceData).reverse()"
          :key="year"
          class="mobile-big-item"
        >
          <div class="mobile-big-label">{{ year }}</div>
          <div class="mobile-big-value">
            <span v-for="item in experienceData[year]" :key="item.value">
              {{item.label}}
            </span>
          </div>
        </div>
      </div>

      <!-- 身份 -->
      <div class="mobile-message-big" style="border-top: 1px solid #f0f3f7;">
        <p class="mobile-label">
          身份
          <span v-if="!buttonDisabled" @click="showAuthPopup=true">编辑<i icon="el-icon-arrow-right" /></span>
        </p>
        <div
          v-for="authKey in Object.keys(authDataMobile)"
          :key="authKey"
          class="mobile-big-item"
        >
          <div class="mobile-big-label">{{ authKey }}</div>
          <div class="mobile-big-value">
            <span v-for="item in authDataMobile[authKey]" :key="item.label">
              {{item.label}}
            </span>
          </div>
        </div>
      </div>
      <van-popup position="bottom" v-model="showArea">
        <Picker
          title="常驻城市"
          show-toolbar
          :columns="cityListMB"
          @confirm="confirmArea"
          @cancel="cancelArea"
        />
      </van-popup>
      <AuthInput ref="authInput" :show.sync="showAuthPopup" @confirm="res => (authDataMobile=res)"></AuthInput>
    </section>
    <section class="mobile-footer">
      <!-- 拒绝理由 -->
      <p class="mobile-footer-tip" v-if="rejectReason">拒绝理由：{{rejectReason}}</p>
      <div
        :class="!buttonDisabled ? 'button button-primary' : 'button button-gray'"
        @click="authenticateAction"
      >
        <span>立即认证</span>
        <span class="warnTextH5" v-if="buttonDisabled">
        （等待审核中）
    </span>
      </div>
    </section>
  </div>
  <div v-else>
    <div class="back">
      <div class="top">
        <div class="topImage"></div>
        <div class="pageTitle">赛事运营支持系统</div>
      </div>

      <div class="content">
        <!-- 拒绝理由 -->
        <p class="content-tip" v-if="rejectReason">拒绝理由：{{rejectReason}}</p>
        <div class="content-title">信息认证</div>
        <div class="dialogBox-center">
          <!-- 基本信息 -->
          <section class="message-basic">
            <div class="message-basic-left">
              <div class="dialogBox-contentList">
                <span><span style="color: red">*</span>姓名：</span>
                <el-input
                  class="contentListRight"
                  v-model="userInfo.name"
                  placeholder="请填写姓名"
                  size="small"
                  :disabled="buttonDisabled"
                ></el-input>
              </div>
              <div class="dialogBox-contentList">
                <span>手机号：</span>
                <el-input
                  class="contentListRight"
                  v-model="userInfo.mobile"
                  placeholder="请输入内容"
                  size="small"
                  :disabled="true"
                ></el-input>
              </div>
              <div class="dialogBox-contentList">
                <span>邮箱：</span>
                <el-input
                  class="contentListRight"
                  v-model="userInfo.email"
                  placeholder="请输入内容"
                  size="small"
                  :disabled="true"
                ></el-input>
              </div>
              <div class="dialogBox-contentList">
                <span>裁判编号：</span>
                <el-input
                  class="contentListRight"
                  v-model="userInfo.refereeNumber"
                  placeholder="请填写裁判编号"
                  size="small"
                  :disabled="buttonDisabled"
                ></el-input>
              </div>
              <div class="dialogBox-contentList">
                <span><span style="color: red">*</span>常驻城市：</span>
                <el-select
                  placeholder="请选择地区"
                  v-model="userInfo.city"
                  class="contentListRight"
                  :disabled="buttonDisabled"
                >
                  <el-option
                    v-for="item in cityList"
                    :key="item.id"
                    :label="item.city"
                    :value="item.city"
                  >
                  </el-option>
                </el-select>
              </div>
            </div>
            <div class="message-basic-right">
              <UploadHeadImg v-model="userInfo.image" :canUpload="!buttonDisabled" @uploadSuccess="updateImage" class="upload" ></UploadHeadImg>
              <span>上传头像</span>
            </div>
          </section>
          <!-- 执裁经历 -->
          <section class="dialogBox-contentList">
            <span>执裁经历：</span>
            <historyInput ref="historyInput" v-model="experienceData" :readOnly="buttonDisabled"></historyInput>
          </section>
          <!-- 身份 -->
          <div class="dialogBox-contentList lastContentList">
            <div><span style="color: red">*</span>身份</div>
          </div>
          <div>
            <div
              class="identityList"
              v-for="(item, index) in identityList"
              :key="index"
            >
              <div class="contestTypeName">{{ item.contestTypeName }}</div>
              <div>
                <div class="dialogBox-checkout">
                  <el-checkbox-group v-model="identSelect">
                    <el-checkbox
                      :label="identity.identityName"
                      v-for="(identity, identityIndex) in item.identityList"
                      :key="identityIndex"
                      :disabled="buttonDisabled"
                    ></el-checkbox>
                  </el-checkbox-group>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div style="flex:none">
          <div
            :class="{
              authenticateButton: true,
              buttonDisabled: buttonDisabled,
            }"
            @click="authenticateAction"
          >
            立即认证
          </div>
          <div class="warnText">{{ reason }}</div>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import dialogBox from "../../components/accountManage/dialog.vue";
import * as api_account from "../../api/account";
import { area } from "@/utils/area-data";
import { Picker, Notify } from "vant";
import UploadHeadImg from "@/components/uploadHeadImg/index.vue"
import historyInput from "@/components/historyInput"
import AuthInput from "@/components/authInput"
export default {
  name: "accountManage",
  components: {
    dialogBox,
    Picker,
    UploadHeadImg,
    historyInput,
    AuthInput
  },
  data() {
    return {
      pcaa: area,
      name: "", //姓名
      event: "", //所属赛事
      ident: "", //身份
      limit: "", //权限
      state: "", //状态
      popup: true, //二次确认弹窗
      dialogTitle: "信息认证", //弹窗标题
      dialogMessage: "", //弹窗内容
      userInfo: {},
      experienceData: {}, //执裁经历
      identSelect: [],
      identityList: [],
      reason: "", //提示语
      buttonDisabled: false, //按钮是否禁用
      cityList: [], //全部城市列表
      authData: {},
      authValue: {},
      showArea: false,

      editMessage: [
        { label: "姓名：", text: "" },
        { label: "裁判编号：", text: ""},
        { label: "手机号：", text: "", disabled: true },
        { label: "邮箱：", text: "", disabled: true },
        { label: "常驻城市：", text: "", readOnly: true },
      ],
      showAuthPopup: false, //显示身份编辑弹窗
      authDataMobile: {},
      rejectReason: ""
    };
  },

  created() {
    this.getUserInfo();
  },
  computed: {
    cityListMB() {
      return this.cityList.map(d => d.city)
    }
  },
  watch: {
    "userInfo.refereeNumber"(nowVal) {
      let res = nowVal;
      let prepend = "REF";
      let herePend = res.slice(0,3);
      if(prepend != herePend && res) {
        res = prepend + res
      }
      res = res.slice(0, 3) + res.slice(3).replace(/\D/g,"");
      this.userInfo.refereeNumber = res.slice(0, 6);
    },
    "editMessage": {
      handler(nowVal) {
        let res = nowVal[1].text;
        let prepend = "REF";
        let herePend = res.slice(0,3);
        if(prepend != herePend && res) {
          res = prepend + res
        }
        res = res.slice(0, 3) + res.slice(3).replace(/\D/g,"");
        this.editMessage[1].text = res.slice(0, 6);
      },
      deep: true
    }
  },
  methods: {
    //先请求用户信息
    getUserInfo() {
      api_account.getUserInfo({}).then((res) => {
        if (res.success) {
          const {userInfo, userRefereeContestHistory} = res.data;
          // 执裁经历
          this.experienceData = userRefereeContestHistory.reduce((res, val) => {
            if(!Object.keys(res).some(d => d == val.year)) {
              res[val.year] = []
            }
            res[val.year].push({
              ...val,
              id: val.contestHistoryId,
              label: `${val.type} - ${val.name}`,
              value: val.contestHistoryId
            })
            return res;
          }, {})
          userInfo.refereeNumber = userInfo.refereeNumber ? "REF" + userInfo.refereeNumber : userInfo.refereeNumber;
          for (let i = 0; i < this.editMessage.length; i++) {
            const element = this.editMessage[i];
            switch (i) {
              case 0:
                element.text = userInfo.name;
                break;
              case 1: 
                element.text = userInfo.refereeNumber;
                break;
              case 2:
                element.text = userInfo.mobile;
                break;
              case 3:
                element.text = userInfo.email;
                break;
              case 4:
                element.text = userInfo.province + userInfo.city;
                break;
              default:
                break;
            }
          }
          if (userInfo.forbidden) {
            //封禁
            this.reason = "该账号已封禁，请联系管理员";
            this.buttonDisabled = true;
          } else {
            switch (userInfo.status) {
              case 1:
                this.reason = "等待管理员审核中";
                this.buttonDisabled = true;
                break;
              case 2:
                //已初次通过直接去个人中心
                this.$router.replace("/personal/personalDetail");
                break;
              case 3:
                //已初次通过直接去个人中心
                this.$router.replace("/personal/personalDetail");
                break;
              case 4:
                this.reason = "审核未通过请重新填写";
                this.rejectReason = res.data.rejectReason;
                break;
              default:
                break;
            }
          }
          this.userInfo = userInfo;
          this.getCityList();
          this.getIdentityList();
        }
      });
    },
    //去登录
    goLoginAction() {
      this.$router.replace("/login");
    },
    //获取城市列表
    getCityList() {
      api_account.cityList().then((res) => {
        if (res.success) {
          this.cityList = res.data.list;
        }
      });
    },
    //立即认证事件
    authenticateAction() {
      if (this.buttonDisabled) {
        return;
      }
      let params = {
        image: this.userInfo.image,
        contestHistoryId: this.$refs.historyInput.getIdList().join(",")
      };
      debugger
      if(this.isMobile()) {
        params.name = this.editMessage[0].text;
        params.city = this.editMessage[4].text;
        params.refereeNumber = this.editMessage[1].text.slice(3);
        params.identityId = this.$refs.authInput.getValue().join(",");
      } else {
        params.name = this.userInfo.name;
        params.city = this.userInfo.city;
        params.refereeNumber = this.userInfo.refereeNumber.slice(3);
        var submitIdentityArray = [];
        this.identityList.forEach((contest) => {
          contest.identityList.forEach((identity) => {
            if (this.identSelect.includes(identity.identityName)) {
              submitIdentityArray.push(identity.identityId);
            }
          });
        });
        params.identityId = submitIdentityArray.join(",");
      }
      if ( !params.name ) {
        this.$message.error("请填写姓名");
        return;
      }
      // if ( !params.refereeNumber ) {
      //   this.$message.error("请填写裁判编号");
      //   return;
      // }
      if (!params.city) {
        this.$message.error("请选择城市");
        return;
      }
      if ( !params.identityId ) {
        this.$message.error("请选择身份");
        return;
      }
      

      api_account
        .userAuth(params)
        .then((res) => {
          if (res.success) {
            this.$message.success("认证成功，请等待审核");
            setTimeout(() => {
              location.reload();
            }, 500);
          } else {
            this.$message.error("认证失败，请稍后再试");
          }
        });
    },

    confirmArea(city) {
      this.userInfo.city = city
      this.editMessage[4].text = city
      this.cancelArea();
    },
    cancelArea() {
      this.showArea = false;
    },

    //身份列表
    getIdentityList() {
      api_account.getIdentityList().then((res) => {
        if (res.success) {
          this.identityList = res.data.list;
          this.authDataMobile = res.data.list.reduce((res1, val) => {
            let temp = val.identityList.filter(d => d.select);
            if(temp?.length) {
              res1[val.contestTypeName] = temp.map(d => ({
                ...d,
                label: d.identityName,
                value: d.identityId
              }))
            }
            return res1;
          }, {});
          var selectArray = [];
          this.identityList.forEach((element) => {
            element.identityList.forEach((identity) => {
              if (identity.select === 1) {
                selectArray.push(identity.identityName);
              }
            });
          });
          this.identSelect = selectArray;
          var obj = {};
          var chooseObj = {};
          //全部身份数据处理
          this.identityList.forEach((element) => {
            var array = [];
            var idenArray = [];
            element.identityList.forEach((identity) => {
              var identityObj = {};
              identityObj.text = identity.identityName;
              array.push(identityObj);

              if (identity.select == 1) {
                idenArray.push(identity.identityName);
              }
            });
            obj[element.contestTypeName] = array;
            chooseObj[element.contestTypeName] = idenArray;
          });
          this.authData = obj;
          this.authValue = chooseObj;
        }
      });
    },

    handleOpenArea(item) {
      if ( !this.buttonDisabled && item.label.includes("城市")) {
        this.showArea = true;
      }
    },
    updateImage(url) {
      this.userInfo.image = url
    },
    handleEdit() {

    }
  },
};
</script>
<style scoped lang="less">
// 除去制裁经历的基本个人信息
.message-basic {
  display: flex;
  align-items: center;
  justify-content: space-between;
  &-left {
    width: 410px;
  }
  &-right {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding-left: 50px;
    border-left: 1px solid #D9D9D9;
    height: 165px;
    width: 200px;
    font-size: 14px;
    color: #666666;
    .upload {
      margin-bottom: 10px;
      height: 96px;
      width: 96px;
    }
  }
}
.detail-list-left {
  flex: 4;
}
.dialogBox-center {
  padding: 20px 50px;
  height: 0;
  flex: auto;
  overflow: auto;
}
.dialogBox-content {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 30px;
}
.dialogBox-contentList {
  width: 100%;
  justify-content: flex-start;
  display: flex;
  align-items: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #666666;
  padding-bottom: 10px;
}

.dialogBox-contentList span {
  flex: none;
  width: 87px;
  line-height: 40px;
  align-self: flex-start;
}
.dialogBox-checkname {
  font-size: 14px;
  font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
  font-weight: bold;
  color: #333333;
  margin-right: 48px;
  padding-left: 10px;
}
.dialogBox-check {
  display: flex;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #666666;
}
.limitCheck {
  margin-right: 10px !important;
  margin-bottom: 15px !important;
}
.limitmr .el-checkbox-group:nth-child(1) .limitCheck:nth-child(2) {
  margin-left: 13px !important;
}
.limitmr .el-checkbox-group:nth-child(1) .limitCheck:nth-child(3) {
  margin-left: 14px !important;
}
.limitmr .el-checkbox-group:nth-child(1) .limitCheck:nth-child(4) {
  margin-left: 15px !important;
}

.detail-time {
  font-size: 12px;
  font-family: MicrosoftYaHei;
  font-weight: 500;
  color: #999999;
}
.detail {
  padding: 20px;
  padding-top: 9px;
}
.detail-list {
  padding: 20px;
  display: flex;
}
.detail-list-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: #666666;
  font-size: 14px;
  margin-bottom: 16px;
}
.detail-split {
  height: 104px;
  border-right: 1px solid #e7e7e7;
  margin: auto 20px;
}

.detail-list-logo {
  display: flex;
  font-family: MicrosoftYaHei;
}
.detail-list-logo /deep/ .el-image__inner {
  width: auto !important;
  height: auto !important;
}
.detail-list-text {
  font-family: Helvetica;
}
.detail-list-tip {
  margin-left: 7px;
}
.detail-list-idot {
  width: 4px;
  height: 4px;
  margin-right: 7px;
}
.detail-list-center {
  display: flex;
  flex: 1;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
}
.chunk-text {
  min-width: 42px;
}
.chunk-wrap {
  display: flex;
  margin-top: 10px;
}
.chunk {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #333333;
  padding-left: 20px;
}
.chunk-text {
  min-width: 42px;
}
.el-input {
  height: 40px;
  width: 224px;
  display: flex;
  align-items: center;
}
.el-select {
  width: 224px;
}
.detail-list-right {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex: 1;
}
.detail-list-handle {
  width: 79px;
  height: 32px;
  border-radius: 2px;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}
.detail-list-handle div {
  margin-left: 5px;
}

.pageTitle {
  font-size: 24px;
  font-family: SourceHanSansCN-Bold, SourceHanSansCN;
  font-weight: bold;
  color: #1d81ee;
}

.content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 20px 0;
  display: flex;
  flex-direction: column;
  width: 850px;
  height: 600px;
  box-shadow: 0px 4px 16px 0px rgba(0, 0, 0, 0.25);
  border-radius: 4px 10px 10px 10px;
  box-sizing: border-box;
  overflow: auto;
  // transform: translate(-50%, -50%);
  background-color: white;
  &-tip {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    padding: 7px;
    line-height: 22px;
    text-align: center;
    background: rgba(247, 0, 0, 0.6);
    color: #ffffff;
    font-size: 16px;
  }
}
.content-title {
  flex: none;
  padding-bottom: 10px;
  font-size: 20px;
  font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
  font-weight: bold;
  color: #111111;
  text-align: center;
}

.contentListRight {
  width: 320px;
}
.el-input--small /deep/ .el-input__inner {
  height: 40px;
}
.lastContentList {
  margin-top: 10px;
}

.el-checkbox {
  margin-right: 16px;
}
.line {
  margin-top: 20px;
  height: 1px;
  background: #d8d8d8;
  box-shadow: 0px 4px 16px 0px rgba(0, 0, 0, 0.25);
}
.authenticateButton {
  flex: none;
  width: 298px;
  height: 44px;
  background-color: #1d81ee;
  box-shadow: 0px 4px 16px 0px rgba(0, 0, 0, 0.25);
  font-size: 14px;
  font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
  font-weight: bold;
  color: #ffffff;
  line-height: 44px;
  text-shadow: 0px 4px 16px rgba(0, 0, 0, 0.25);
  text-align: center;
  margin: 30px auto 0;
  cursor: pointer;
}
.buttonDisabled {
  background-color: #d9e0e8;
  color: white;
}
.goLoginButton {
  width: 43px;
  height: 20px;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #1d81ee;
  line-height: 20px;
  text-shadow: 0px 4px 16px rgba(0, 0, 0, 0.25);
  margin: 20px auto 0;
  cursor: pointer;
}
.identityList {
  display: flex;
  justify-content: flex-start;
  margin-bottom: 14px;
}
.contestTypeName {
  font-size: 14px;
  font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
  font-weight: bold;
  color: #333333;
  width: 87px;
}
.dialogBox-checkout /deep/ .el-checkbox__label {
  margin-left: 2px;
  padding-left: 0px;
}
.dialogBox-checkout /deep/ .el-checkbox {
  margin-right: 10px;
  width: auto;
  min-width: 110px;
}
.warnText {
  color: #ff0000;
  text-align: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  margin-top: 3px;
}

.dialogBox-contentList /deep/ .is-disabled {
  background-color: #f5f7fa !important;
}
.back {
  height: 100vh;
  width: 100vw;
  background-image: url("../../assets/accountAuthentication/back_image.png") !important;
  background-position: center center;
  /* 背景图不平铺 */
  background-repeat: no-repeat;
  /* 让背景图基于容器大小伸缩 */
  background-size: cover;
}
.topImage {
  margin-top: 13px;
  width: 204px;
  height: 64px;
  background-image: url("../../assets/accountAuthentication/TJ_logo.png") !important;
  background-position: center center;
  /* 背景图不平铺 */
  background-repeat: no-repeat;
  /* 让背景图基于容器大小伸缩 */
  background-size: cover;
}
.top {
  display: flex;
  padding-left: 20px;
  padding-top: 26px;
  align-items: center;
}

.head-title {
  margin-top: 16px;
}
.auth-container {
  padding-bottom: 13px;
  border-bottom: 1px solid #f0f3f7;
}
.auth-title {
  padding-right: 10px;
  width: 60px;
  font-size: 14px;
  font-family: SourceHanSansCN-Medium, SourceHanSansCN;
  font-weight: 500;
  color: #676767;
}

.warnTextClass {
  color: #ff0000;
  text-align: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  text-align: center;
  padding-top: 4px;
}
.button {
  height: 44px;
  width: 100%;
  cursor: pointer;
  border-radius: 5px;
  font-size: 16px;
  font-family: MicrosoftYaHei;
  box-sizing: border-box;
  line-height: 44px;
  text-align: center;
}
.button-canEdit {
  background-color: #1d81ee;
  color: white;
  margin-top: 20px;
}
.button-EditDisable {
  background-color: #d9e0e8;
  color: white;
  margin-top: 20px;
}
.pageTitleMB {
  padding-top: 57px;
  text-align: center;
  color: #333333;
  font-size: 18px;
  font-weight: bold;
  font-family: SourceHanSansCN-Bold, SourceHanSansCN;
}
.contentBackMB {
  margin-top: 33px;
  padding: 0px 16px;
  height: calc(100vh - 200px);
  /* overflow: hidden; */
  overflow: scroll;
}
.contentMB {
  background-color: white;
  border-radius: 4px;
  padding: 0px 16px 20px;
}
.contentLine {
  height: 50px;
  border-bottom: 1px solid #eeeeee;
  display: flex;
  justify-content: flex-start;
  align-items: center;
}
.cellLeft {
  width: 95px;
  height: 100%;
  display: flex;
  align-items: center;
}
.cellRight {
  width: calc(100% - 95px);
  height: 100%;
}
.redStar {
  font-size: 14px;
  font-family: SourceHanSansCN-Medium, SourceHanSansCN;
  font-weight: bold;
  color: #f70000;
}
.cellLeftText {
  font-size: 14px;
  font-family: SourceHanSansCN-Medium, SourceHanSansCN;
  font-weight: Medium;
  color: #333333;
}
.cellLeftTextDisabled {
  font-size: 14px;
  font-family: SourceHanSansCN-Medium, SourceHanSansCN;
  font-weight: Medium;
  color: #cccccc;
}

.cellRight {
  display: flex;
  align-items: center;
}
.cellRightInput {
  font-size: 14px;
  font-family: SourceHanSansCN-Regular, SourceHanSansCN;
  font-weight: 400;
  color: #666666;
  border: none;
}
.cellRightInputDisabled {
  font-size: 14px;
  font-family: SourceHanSansCN-Regular, SourceHanSansCN;
  font-weight: 400;
  color: #cccccc;
  border: none;
}

.auth-container
  /deep/
  .el-checkbox-group
  .el-checkbox:nth-child(1)
  .el-checkbox__label {
  width: 75px;
  padding-left: 4px;
}

.auth-container
  /deep/
  .el-checkbox-group
  .el-checkbox:nth-child(2)
  .el-checkbox__label {
  width: 90px;
  padding-left: 4px;
}

.auth-container
  /deep/
  .el-checkbox-group
  .el-checkbox:nth-child(3)
  .el-checkbox__label {
  width: 90px;
  padding-left: 4px;
}
.citySelectMB {
  position: relative;
}
.rightArrow {
  position: absolute;
  width: 8px;
  height:14px;
  top: 18px;
  right: 0px;
  font-size: 14px;
  line-height: 50px;
}

.mobile-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  .mobile-upload {
    width: 96px;
    height: 96px;
    &-container {
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 20px;
      padding: 20px 0;
      border-bottom: 1px solid #F0F3F7;
      width: calc(100% - 40px);
    }
  }
  ::v-deep .el-checkbox {
    margin: 0;
    color: #999999;
    &-group {
      display: flex;
      justify-content: space-between;
      padding: 13px 0;
    }
  }
  .head-title {
    margin: 19px 16px 5px;
    font-size: 14px;
    font-family: SourceHanSansCN-Regular, SourceHanSansCN;
    color: #333333;
  }
  .mobile-main {
    height: 0;
    flex: auto;
    overflow: auto;
  }
  .mobile-header {
    flex: none
  }
  .mobile-footer {
    position: relative;
    flex: none;
    display: flex;
    padding: 16px 20px;
    height: 76px;
    background: #ffffff;
    box-shadow: 0px -2px 14px 0px rgba(68, 68, 68, 0.11);
    border-radius: 1px;
    box-sizing: border-box;
    &-tip {
      position: absolute;
      bottom: 76px;
      right: 0;
      left: 0;
      padding: 7px;
      line-height: 22px;
      text-align: center;
      background: rgba(247, 0, 0, 0.6);
      color: #ffffff;
      font-size: 16px;
    }
    .button {
      flex: 1;
      width: 100%;
      height: 100%;
    }
  }
  .auth-container {
    padding: 10px 16px 0;
    border-bottom: 1px solid #f0f3f7;
    .auth-title {
      padding-right: 10px;
      width: 60px;
      font-size: 14px;
      font-family: SourceHanSansCN-Medium, SourceHanSansCN;
      font-weight: 500;
      color: #676767;
    }
  }
}
.mobile-label,::v-deep .van-cell {
  height: 54px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: #333333;
  font-size: 14px;
}
.mobile-message-big {
  margin: 0 20px;
  border-bottom: 1px solid #f0f3f7;
  .mobile-big-item {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    margin-bottom: 10px;
    line-height: 24px;
    font-size: 14px;
    color: #666666;
    .mobile-big-label {
      width: 110px;
      flex: none;
    }
    .mobile-big-value {
      display: flex;
      flex-direction: column;
      width: 0;
      flex: auto;
      text-align: right;
      span {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
      }
    }
  }
}
.button {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 104px;
  height: 40px;
  cursor: pointer;
  border-radius: 5px;
  font-size: 16px;
  font-family: MicrosoftYaHei;
  box-sizing: border-box;
  &:hover {
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.05);
  }
  &-primary {
    background: #1d81ee;
    color: #ffffff;
  }
  &-red {
    background: #ee0a24;
    color: white;
  }
  &-gray {
    border: 1px solid #989898;
    color: #989898;
  }
}
</style>
<template>
  <div>
    <el-dialog
  title="提示"
  :visible.sync="dialogVisible"
  :width="width"
  center
  :show-close="close"
  :top="top"
  :append-to-body="true"
  @closed="dialogeClose">
  <div slot="title">
    <div v-if="title" class="dialogBox-header dialogBox-headerEdit" >
     {{title}}
    </div>
    <div class="dialogBox-header" v-else>
      <el-image :src="require('@/assets/accountManage/shape.png')"></el-image>
      <span style="padding-left:3px">温馨提示</span>
    </div>
  </div>
  <slot></slot>
  <span slot="footer" class="dialog-footer" v-if="bottom">
    <el-button @click="cancel">取 消</el-button>
    <el-button type="primary" @click="confirm">确 定</el-button>
  </span>
</el-dialog>
  </div>
</template>
<script>
export default {
  props:{
    dialogType:{
      type:String,
      default:""
    },
    width:{
      type:String,
      default:"30%"
    },
    popup:{
      type:Boolean,
      default:false
    },
    title:{
      type:String,
      default:""
    },
    top:{
      type:String,
      default:"40vh"
    },
    close:{
      type:Boolean,
      default:true
    },
    bottom:{
      type:Boolean,
      default:true
    }
  },
  computed:{
    dialogVisible:{
        get(){
            return this.popup
        },
        set(v){
            this.$emit('update:popup', v)
        }
    },
  },

  methods:{
    cancel(){
      this.$emit('update:popup', false)
      this.$emit('cancelOrConfirm','cancel')
    },
    confirm(){
      this.$emit('update:popup', false)
      this.$emit('cancelOrConfirm','confirm')
    },
    dialogeClose(){
      if(this.dialogType){
        this.$emit('callback')
      }
    }
  }
}
</script>
<style scoped>
  .dialogBox-header{
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 16px;
    font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
    font-weight: bold;
    color: #111111;
    padding:16px;
  }
  .dialogBox-headerEdit{
    border-bottom: 1px solid #DDE1E6;
  }
  
</style>
<template>
    <div class="message-item">
        <p class="label">{{label}}</p>
        <slot>
            <span class="text">{{text}}</span>
        </slot>
    </div>
</template>

<script>
export default {
    props: {
        label: {
            type: String,
            default: ""
        },
        text: {
            type: String,
            default: ""
        }
    }
}
</script>

<style lang="scss" scoped>
.message-item {
    display: flex;
    align-items: center;
    padding-right: 50px;
    border-bottom: 1px dashed #e5e8ed;
    height: 60px;
    box-sizing: border-box;
    .label {
        width: 80px;
        font-size: 14px;
        font-family: MicrosoftYaHei;
        color: #666666;
    }
    .text {
        width: 0;
        flex: auto;
        font-size: 16px;
        font-weight: bold;
        color: #333333;
        overflow: hidden;white-space: nowrap;text-overflow: ellipsis;
    }
}
</style>
<template>
  <div class="page-container">
    <section class="pb27 border-b">
      <p class="head-title">{{title}}
        <span class="back" @click="onBack">
          <div class="backlogo"></div>
          <div>返回</div>
        </span>
      </p>
      <div class="message-container">
        <UploadHeadImg class="upload" v-model="userInfo.image" :canUpload="false"></UploadHeadImg>
        <div class="line"></div>
        <div class="message-list">
          <Message v-for="(item, index) in message" v-bind="item" :key="index">
            <el-input v-if="type == 'edit' && item.label == '裁判编号：'" type="text" v-model="item.text"
              :disabled="item.disabled" />
          </Message>
        </div>
      </div>
    </section>
    <section class="pb27">
      <section class="message-big">
        <p>执裁经历：</p>
        <div class="message-list chooseIdentityList">
          <!-- 如果是编辑，第一行新增添加行 -->
          <div class="auth-container" v-for="year in Object.keys(experienceData)" :key="year">
            <span class="auth-title">{{ year }}</span>
            <span class="auth-text">{{ experienceData[year].map(d => d.label).join("、") }}</span>
          </div>
        </div>
      </section>
      <section class="message-big">
        <p>身份：</p>
        <div class="message-list chooseIdentityList">
          <el-checkbox-group :disabled="type != 'edit'" v-model="authSelected">
            <div class="auth-container" v-for="authKey in Object.keys(authOptions)" :key="authKey">
              <div class="auth-title">{{ authKey }}</div>
              <div class="auth-text">
                <el-checkbox :label="item.value" v-for="item in authOptions[authKey]" :key="item.value">{{ item.label
                }}</el-checkbox>
              </div>
            </div>
          </el-checkbox-group>
        </div>
      </section>
      <section class="message-big">
        <p>权限：</p>
        <div class="message-list chooseIdentityList">
          <el-checkbox-group v-model="permissionSelected">
            <div class="auth-container" v-for="authKey in Object.keys(permissionOptions)" :key="authKey">
              <div class="auth-title">{{ authKey }}</div>
              <div class="auth-text">
                <el-checkbox :label="item.value" v-for="item in permissionOptions[authKey]" :key="item.value">{{
                  item.label }}</el-checkbox>
              </div>
            </div>
          </el-checkbox-group>
        </div>
      </section>
    </section>
    <!-- 底部按钮 -->
    <section class="mt-8">
      <template v-if="type == 'auth'">
        <div class="detail-list-handle" style="border: 1px solid #ff005c; color: #ff005c" @click="handleReject">
          <el-image :src="require('../../assets/accountManage/error.png')"></el-image>
          <div>拒绝</div>
        </div>
        <div class="detail-list-handle" style="
              border: 1px solid #00b400;
              color: #00b400;
              " @click="handlePass">
          <el-image :src="require('@/assets/accountManage/pass.png')"></el-image>
          <div>通过</div>
        </div>
      </template>
      <template v-else-if="type == 'edit'">
        <div class="detail-list-handle" style="
            border: 1px solid #126bee;
            color: #126bee;
            margin-top: 10px;
          " @click="confirmEdit">
          <el-image :src="require('@/assets/accountManage/edit.png')"></el-image>
          <div>提交</div>
        </div>
      </template>
      <template v-else>
        <div class="detail-list-handle" style="
                border: 1px solid #126bee;
                color: #126bee;
              " @click="handleUnlock">
          <el-image :src="require('@/assets/accountManage/edit.png')"></el-image>
          <div>解封</div>
        </div>
      </template>
    </section>
    <dialogBox :popup="showErrorDialog" top="0" width="637px" title="拒绝理由" @cancelOrConfirm="handleCloseErrorDialog">
      <div class="dialog-error">
        <span>拒绝理由：</span>
        <textarea v-model="rejectReason" name="" id=""></textarea>
      </div>
    </dialogBox>
  </div>
</template>
<script>
import Message from "./components/message.vue";
import * as api_account from "@/api/account";
import UploadHeadImg from "@/components/uploadHeadImg/index.vue";
import dialogBox from "@/components/accountManage/dialog.vue";
export default {
  components: {Message, UploadHeadImg, dialogBox},
  data() {
    return {
      message: [
        {label: "姓名：", text: ""},
        {label: "裁判编号：", text: ""},
        {label: "手机号：", text: "", disabled: true},
        {label: "邮箱：", text: "", disabled: true},
        {label: "常驻城市：", text: "", readOnly: true},
      ],
      userInfo: {},
      experienceData: {}, //执裁经历
      authOptions: {}, //身份
      authSelected: [],
      permissionOptions: {}, //权限
      permissionSelected: [], //权限列表
      showErrorDialog: false,
      rejectReason: "",
      type: "edit", //上级页面带过来 edit:编辑， auth：审核
    };
  },
  computed: {
    title() {
      return this.type == "edit" ? "账号编辑" : this.type == "auth" ? "账号审核" : "账号解封";
    }
  },
  watch: {
    "message": {
      handler(nowVal) {
        if (this.type == "edit") {
          let res = nowVal[1].text;
          let prepend = "REF";
          let herePend = res.slice(0, 3);
          if (prepend != herePend && res) {
            res = prepend + res;
          }
          res = res.slice(0, 3) + res.slice(3).replace(/\D/g, "");
          this.message[1].text = res.slice(0, 6);
        }
      },
      deep: true
    }
  },
  created() {
    this.type = this.$route.query.type;
    this.getUserInfo();
  },

  methods: {
    //请求用户信息
    getUserInfo() {
      api_account.getAccountDetail({accountId: parseInt(this.$route.query.accountId)}).then((resapi) => {
        if (resapi.success) {
          const {userInfo, userIdentity, userPermission, userRefereeContestHistory} = resapi.data;
          // 个人信息
          if (userInfo) {
            this.userInfo = userInfo;
            for (let i = 0; i < this.message.length; i++) {
              const element = this.message[i];
              switch (i) {
                case 0:
                  element.text = userInfo.name;
                  break;
                case 1:
                  element.text = userInfo.refereeNumber ? "REF" + userInfo.refereeNumber : userInfo.refereeNumber;
                  break;
                case 2:
                  element.text = userInfo.mobile;
                  break;
                case 3:
                  element.text = userInfo.email;
                  break;
                case 4:
                  element.text = userInfo.province + userInfo.city;
                  break;
                default:
                  break;
              }
            }
          }
          // 执裁经历
          if (userRefereeContestHistory) {
            this.experienceData = userRefereeContestHistory.reduce((res, val) => {
              if (!Object.keys(res).some(d => d == val.year)) {
                res[val.year] = [];
              }
              res[val.year].push({
                ...val,
                id: val.contestHistoryId,
                label: `${val.type} - ${val.name}`,
                value: val.contestHistoryId
              });
              return res;
            }, {});
          }
          if (userIdentity) {
            //  身份列表
            this.authOptions = userIdentity.reduce((res1, val) => {
              res1[val.contestTypeName] = val.identityList.map(d => ({
                ...d, label: d.identityName, value: d.identityId
              }));
              return res1;
            }, {});
            this.authSelected = userIdentity.reduce((res, val) => {
              res.push(...val.identityList.filter(d => d.select).map(d => d.identityId));
              return res;
            }, []);
          }
          if (userPermission) {
            this.permissionOptions = userPermission.reduce((res, val) => {
              res[val.permissionTypeName] = val.permissionList.map(d => ({
                ...d, label: d.permissionName, value: d.permissionId
              }));
              return res;
            }, {});
            this.permissionSelected = userPermission.reduce((res, val) => {
              res.push(...val.permissionList.filter(d => d.select).map(d => d.permissionId));
              return res;
            }, []);
          }
        }
      });
    },
    handleUnlock() {
      this.$confirm("确认要解封吗？").then(() => {
        this.confirmAuth(1);
      });
    },
    // 通过
    handlePass() {
      this.$confirm("确认要通过吗？").then(() => {
        this.confirmAuth(1);
      });
    },
    handleReject() {
      this.showErrorDialog = true;
    },
    handleCloseErrorDialog(type) {
      if (type == "confirm") {
        if (!this.rejectReason) {
          this.$message.error("请输入拒绝理由");
          return;
        }
        this.showErrorDialog = false;
        // 拒绝
        this.confirmAuth(0);
      } else {
        this.showErrorDialog = false;
      }
    },
    // 账号审核
    confirmAuth(status) {
      api_account.accountAuth({
        accountId: parseInt(this.$route.query.accountId),
        status: status,
        permissionId: this.permissionSelected.join(","),
        rejectReason: status == 0 ? this.rejectReason : ""
      }).then(res => {
        if (res.success) {
          this.$message.success("提交成功");
          this.onBack();
        }
      });
    },
    // 账号编辑
    confirmEdit() {
      if (!this.message[1].text.slice(3)) {
        this.$message.warning('请填写裁判编号');
        return;
      }
      this.$confirm("确认要提交吗？").then(() => {
        api_account.accountEdit({
          accountId: parseInt(this.$route.query.accountId),
          city: this.userInfo.city,
          identityId: this.authSelected.join(","),
          permissionId: this.permissionSelected.join(","),
          refereeNumber: this.message[1].text.slice(3)
        }).then(res => {
          if (res.success) {
            this.$message.success("提交成功");
            this.onBack()
            
          }
        });
      });
    },
    onBack() {
      if(this.$route.query.accountId == this.$store.getters.userInfo.id) {
        api_account.getContestType({}).then((res) => {
          if (res.success) {
            this.$dictionary.contestType = res.data.map(d => ({
              ...d,
              label: d.contestTypeName,
              value: d.contestTypeId,
              isSelect: d.isSelect
            }))
          }
          this.$nextTick(()=> {
            this.$router.go(-1);
          })
        });
      } else {
        this.$router.go(-1);
      }
    }
  },
};
</script>
<style lang="scss" scoped>
::v-deep .van-cell__value {
  color: #323233;
}

.pb27 {
  padding-bottom: 27px;
}

.border-b {
  border-bottom: 1px solid #E5E8ED;
}

.mt-8 {
  margin-top: -8px;
  display: flex;
  justify-content: center;
  align-items: center;

  >div {
    margin-right: 10px;

    &:last-of-type {
      margin-right: 0;
    }
  }
}

.button {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 104px;
  height: 40px;
  cursor: pointer;
  border-radius: 5px;
  font-size: 16px;
  font-family: MicrosoftYaHei;
  box-sizing: border-box;

  &:hover {
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.05);
  }

  &-primary {
    background: #1d81ee;
    color: #ffffff;
  }

  &-red {
    background: #ee0a24;
    color: white;
  }

  &-gray {
    border: 1px solid #989898;
    color: #989898;
  }

  img {
    margin-right: 8px;
    height: 15px;
    width: 15px;
  }
}

.page-container {
  .head-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 24px;
    font-size: 18px;
    font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
    font-weight: bold;
    color: #111111;
    line-height: 24px;
    .backlogo {
      width: 16px;
      height: 13px;
      margin-top: 3px;
      margin-right: 3px;
      background-image: url("../../assets/eventAgent/back.png");
    }
    .back {
      display: flex;
      font-family: MicrosoftYaHei;
      align-items: center;
      color: #1d81ee;
      font-size: 14px;
      cursor: pointer;
    }
  }

  .message-container {
    display: flex;
    margin-top: 20px;

    .upload {
      flex: none;
      margin-top: 20px;
      width: 136px;
      height: 136px;
    }

    .line {
      flex: none;
      margin: 20px 40px 0;
      height: 136px;
      width: 1px;
      background-color: #E5E8ED;
    }
  }

  .message-list {
    flex: auto;
    display: flex;
    flex-wrap: wrap;
    width: 100%;

    ::v-deep .message-item {
      width: 50%;
      flex: auto;

      &:last-of-type {
        border-bottom: 0;
      }

      .el-input {
        width: 224px;
      }
    }

    // ::v-deep .el-checkbox-group {
    //   display: flex;
    //   justify-content: center;
    // }
  }

  .message-big {
    border-bottom: 1px dashed #E5E8ED;
    margin-top: 20px;
    font-size: 14px;
    color: #666666;
  }

  .auth-container {
    margin-bottom: 20px;
    display: flex;

    .auth-title {
      flex: none;
      padding-right: 10px;
      width: 70px;
      font-size: 14px;
      font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
      font-weight: bold;
      color: #333333;
    }

    .auth-input {
      flex: auto;
      width: 0;
      display: flex;
      align-items: center;
    }

    .auth-text {
      display: flex;
      align-items: center;
      flex: auto;
      font-size: 16px;
      font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
      font-weight: bold;
      color: #333333;

      ::v-deep .el-checkbox__label {
        margin-left: 2px;
        padding-left: 0px;
      }

      ::v-deep .el-checkbox {
        margin-right: 10px;
        width: auto;
        min-width: 120px;
      }
    }
  }
}

.chooseIdentityList {
  padding-top: 20px;
}

.dialogText {
  text-align: center;
}

.detail-list-handle {
  width: 79px;
  height: 32px;
  border-radius: 2px;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}

.detail-list-handle div {
  margin-left: 5px;
}

.dialog-error {
  display: flex;
  padding: 28px;
  font-weight: 400;
  font-size: 20px;
  color: #333333;

  span {
    flex: none;
    margin-right: 8px;
    line-height: 50px;
  }

  textarea {
    padding: 12px 16px;
    width: 456px;
    height: 130px;
    flex: auto;
    border-radius: 5px;
    border: 1px solid #ccc;
    line-height: 30px;
  }
}
</style>
<template>
  <div class="boxWrap">
    <div class="box" style="margin-bottom: 20px">
      <div class="title">账号管理</div>
      <div class="detail">
        <div class="chunk-wrap">
          <div class="chunk">
            <div class="chunk-text">姓名：</div>
            <el-input placeholder="请输入姓名" v-model="name"></el-input>
          </div>
          <div class="chunk">
            <div>所属赛事：</div>
            <el-select
              placeholder="请选择赛事"
              multiple
              v-model="selectContestTypeIdArray"
            >
              <el-option
                v-for="item in competitionList"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              >
              </el-option>
            </el-select>
          </div>
          <div class="chunk">
            <div>身份：</div>
            <el-select placeholder="请选择身份" multiple v-model="selectIdentityArray">
              <el-option
                v-for="item in identityList"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              >
              </el-option>
            </el-select>
          </div>
          <div class="chunk">
            <el-button type="primary" @click="searchAction">查询</el-button>
          </div>
          <div class="chunk" @click="cancelAllSelect">
            <el-image
              :src="require('@/assets/accountManage/reset.png')"
            ></el-image>
          </div>
        </div>
        <div class="chunk-wrap" style="margin-top: 10px">
          <div class="chunk">
            <div>权限：</div>
            <el-select
              placeholder="请选择权限"
              multiple
              v-model="selectPermissionArray"
            >
              <el-option
                v-for="item in permissionTypeList"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              >
              </el-option>
            </el-select>
          </div>
          <div class="chunk" style="padding-left: 49px">
            <div>状态：</div>
            <el-select placeholder="请选择状态" clearable v-model="selectState">
              <el-option
                v-for="item in statusList"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              >
              </el-option>
            </el-select>
          </div>
        </div>
      </div>
    </div>
    <div class="box" v-for="(item, index) in list" :key="index">
      <div class="title" style="font-size: 16px">
        <div>{{ item.name }}</div>
        <div class="detail-time">最近修改时间：{{ item.updatedAt }}</div>
      </div>
      <div class="detail-list">
        <div class="detail-list-left">
          <div class="detail-list-content">
            <div class="detail-list-logo">
              <el-image
                :src="require('../../assets/accountManage/tel.png')"
                fit="cover"
              ></el-image>
              <div class="detail-list-tip">手机</div>
            </div>
            <div class="detail-list-text">{{ item.mobile }}</div>
          </div>
          <div class="detail-list-content">
            <div class="detail-list-logo">
              <el-image
                :src="require('../../assets/accountManage/email.png')"
              ></el-image>
              <div class="detail-list-tip">邮箱</div>
            </div>
            <div>{{ item.email }}</div>
          </div>
          <div class="detail-list-content">
            <div class="detail-list-logo">
              <el-image
                :src="require('../../assets/accountManage/ident.png')"
              ></el-image>
              <div class="detail-list-tip">身份</div>
            </div>
            <div class="overflow-hidden detail-list-identity"><span :title="item.identity">{{ item.identity }}</span></div>
          </div>
          <div class="detail-list-content">
            <div class="detail-list-logo">
              <el-image
                :src="require('../../assets/accountManage/limit.png')"
              ></el-image>
              <div class="detail-list-tip">权限</div>
            </div>
            <div class="overflow-hidden detail-list-identity"><span :title="item.permission">{{ item.permission }}</span></div>
          </div>
        </div>
        <div class="detail-split"></div>
        <div class="detail-list-center">
          <div
            class="detail-list-idot"
            :style="{'background-color': getColor(item)}"
          ></div>
          <div :style="{color: getColor(item)}">
            {{getText(item)}}
          </div>
        </div>
        <div class="detail-split"></div>
        <div class="detail-list-right">
          <!-- 账号封禁 -->
          <div v-if="item.forbidden">
            <div
              class="detail-list-handle"
              style="
                border: 1px solid #126bee;
                color: #126bee;
              "
              @click="unblockEvent(item)"
            >
              <el-image
                :src="require('../../assets/accountManage/edit.png')"
              ></el-image>
              <div>解封</div>
            </div>
          </div>
          <!-- 待审核1，2 -->
          <div
            v-else-if="
              item.status === 1 || item.status === 2
            "
          >
            <div
              class="detail-list-handle"
              style="
                border: 1px solid #00b400;
                color: #00b400;
                margin-top: 10px;
              "
              @click="checkEvent(item)"
            >
              <el-image
                :src="require('../../assets/accountManage/pass.png')"
              ></el-image>
              <div>审核</div>
            </div>
          </div>
          <!-- 已通过3，5 -->
          <div v-else-if="item.status == 3 || item.status == 5">
            <div
              class="detail-list-handle"
              style="border: 1px solid #ff005c; color: #ff005c"
              @click="blockEvent(item)"
            >
              <el-image
                :src="require('../../assets/accountManage/block.png')"
              ></el-image>
              <div>封禁</div>
            </div>
            <div
              class="detail-list-handle"
              style="
                border: 1px solid #126bee;
                color: #126bee;
                margin-top: 10px;
              "
              @click="editEvent(item)"
            >
              <el-image
                :src="require('../../assets/accountManage/edit.png')"
              ></el-image>
              <div>编辑</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div v-if="totalNumber" class="page">
      <div>
        共{{ Math.ceil(totalNumber / pageNum) }}页，每页{{ pageNum }}条数据
      </div>
      <div>
        <el-pagination
          background
          layout="prev, pager, next"
          :page-size="pageNum"
          :total="totalNumber"
          :current-page="page"
          @current-change="currentPageChange"
        >
        </el-pagination>
      </div>
    </div>

    <!-- 二次确认 -->
    <dialogBox
      :popup.sync="popup"
      :type="dialogType"
      @callback="dialogeClose"
      @cancelOrConfirm="cancelOrConfirm"
    >
      <div class="dialogBox-content">{{ dialogMessage }}</div>
    </dialogBox>
    <!-- 编辑 -->
    <dialogBox
      :popup.sync="dialogEdit"
      :title="dialogTitle"
      width="600px"
      top="10vh"
      @cancelOrConfirm="editCancelOrConfirm"
      :permissionSelect="permissionSelect"
      :identSelect="identSelect"
      :city="this.currentPersonDetail.city"
    >
      <div class="dialogBox-center" v-if="dialogEdit">
        <div>
          <div class="dialogBox-contentList">
            <span>姓名：</span>
            <el-input
              v-model="currentPersonDetail.name"
              :disabled="true"
              placeholder="请输入内容"
              size="small"
            ></el-input>
          </div>
          <div class="dialogBox-contentList">
            <span>手机号：</span>
            <el-input
              v-model="currentPersonDetail.mobile"
              :disabled="true"
              placeholder="请输入内容"
              size="small"
            ></el-input>
          </div>
        </div>

        <div class="dialogBox-contentList">
          <span>常驻城市：</span>
          <!-- <area-select
            class="citySelect"
            :level="1"
            type="text"
            placeholder="请选择地区"
            v-model="currentPersonDetail.city"
            :data="pcaa"
            :disabled="dialogType === 'pass' ? true : false"
          ></area-select> -->

          <el-select
            placeholder="请选择地区"
            v-model="currentPersonDetail.city"
            class="citySelect"
            :disabled="true"
          >
            <el-option
              v-for="item in cityList"
              :key="item.id"
              :label="item.city"
              :value="item.city"
            >
            </el-option>
          </el-select>
        </div>
        <div class="dialogBox-contentList">
          <div><span style="color: red">*</span>身份</div>
        </div>
        <div>
          <div
            class="identityList"
            v-for="(item, index) in allIdentityList"
            :key="index"
          >
            <div class="contestTypeName">{{ item.contestTypeName }}</div>
            <div>
              <div class="dialogBox-checkout">
                <el-checkbox-group v-model="identSelect">
                  <el-checkbox
                    :label="identity.identityName"
                    v-for="(identity, identityIndex) in item.identityList"
                    :key="identityIndex"
                    :disabled="dialogType === 'pass' ? true : false"
                  ></el-checkbox>
                </el-checkbox-group>
              </div>
            </div>
          </div>
        </div>
        <div class="dialogBox-contentList">
          <div><span style="color: red">*</span>权限</div>
        </div>
        <div class="dialogBox-check">
          <div class="dialogBox-checkname" style="margin-right: 30px">
            <div
              v-for="item in allPermissionList"
              style="width: 60px; margin-bottom: 15px"
            >
              {{ item.permissionTypeName }}
            </div>
          </div>
          <div class="limitmr">
            <el-checkbox-group
              v-model="permissionSelect"
              v-for="(item, index) in allPermissionList"
            >
              <el-checkbox
                :label="item1.permissionName"
                v-for="item1 in item.permissionList"
                :disabled="item1.disabled"
                class="limitCheck"
              ></el-checkbox>
            </el-checkbox-group>
          </div>
        </div>
      </div>
    </dialogBox>
    <!-- 通过 -->
  </div>
</template>
<script>
import dialogBox from "../../components/accountManage/dialog.vue";
import { area } from "@/utils/area-data";
import * as api_account from "../../api/account";
export default {
  name: "accountManage",
  components: {
    dialogBox,
  },

  created() {
    this.getAccountlist();
    this.getIdentityList();
    this.getPermissionList();
    this.getCityList();
  },

  data() {
    return {
      //查询筛选
      name: "", //姓名
      selectContestTypeIdArray: [], //当前所属赛事Id
      selectIdentityArray: "", //身份
      selectPermissionArray: [], //权限
      selectState: "", //状态
      competitionList: this.$dictionary.contestType.filter(d => d.isSuperAdmin), //所属赛事字典
      identityList: this.$dictionary.position, //身份字典
      permissionTypeList: this.$dictionary.permission, //权限字典
      statusList: [
        {
          value: "1",
          label: "待审核",
        },
        {
          value: "2",
          label: "已通过",
        },
        {
          value: "3",
          label: "未通过",
        },
        {
          value: "4",
          label: "已封禁",
        },
      ], //状态列表
      page: 1, //当前页
      pageNum: 5, //每页数量
      totalNumber: 0, //数据总数
      pcaa: area,
      currentPerson: {}, //当前操作的用户对象
      currentPersonDetail: {}, //当前操作对象详情
      list: [],
      popup: false, //二次确认弹窗
      dialogTitle: "", //弹窗标题
      dialogMessage: "", //弹窗内容
      dialogType: "", //弹窗类型
      dialogEdit: false, //编辑弹窗
      cancelConfirm: "cancel", //点击弹窗取消或确认
      allIdentityList: [], //全部的身份列表编辑用 接口源数据
      allPermissionList: [], //全部的身份列表编辑用 接口源数据
      identSelect: [],
      permissionSelect: [],
      cityList: [], //全部城市列表
    };
  },
  methods: {
    getColor(item) {
      if(item.forbidden) {
        return '#FF005C'
      }
      if(item.status === 1 || item.status === 2 || item.status === 6) {
        return '#FF7E00'
      }
      if(item.status == 3 || item.status == 5) {
        return '#00B400'
      }
      if(item.status == 4) {
        return "#FF005C" 
      }
    },
    getText(item) {
      if(item.forbidden) {
        return "已封禁"
      }
      if(item.status === 1 || item.status === 2 || item.status === 6) {
        return "待审核"
      }
      if(item.status == 3 || item.status == 5) {
        return "已通过"
      }
      if(item.status == 4) {
        return "未通过"
      }
    },
    //获取城市列表
    getCityList() {
      api_account.cityList().then((res) => {
        if (res.success) {
          this.cityList = res.data.list;
        }
      });
    },
    //身份列表
    getIdentityList() {
      api_account.getIdentityList().then((res) => {
        if (res.success) {
          this.allIdentityList = res.data.list;
        }
      });
    },

  
    //权限列表
    getPermissionList() {
      api_account.getPermissionList().then((res) => {
        if (res.success) {
          this.allPermissionList = res.data.list;
        }
      });
    },

    //当前页码改变
    currentPageChange(e) {
      this.page = e;
      this.getAccountlist();
    },
    //点击查询按钮
    searchAction() {
      this.page = 1;
      this.getAccountlist();
    },
    //获取账号列表
    getAccountlist() {
      var params = {};
      params.page = this.page;
      params.pageNum = this.pageNum;
      if (this.name !== "") {
        params.name = this.name;
      }
      if (this.selectContestTypeIdArray.length > 0) {
        params.contestTypeId = this.selectContestTypeIdArray.join(",");
      }
      if (this.selectIdentityArray.length > 0) {
        params.position = this.selectIdentityArray.join(",");
      }
      if (this.selectPermissionArray.length > 0) {
        params.permissionTypeId = this.selectPermissionArray.join(",");
      }
      if (this.selectState !== "") {
        params.status = this.selectState;
      }
      api_account.getAccountList(params).then((res) => {
        if (res.success) {
          this.list = res.data.list.rows;
          this.totalNumber = res.data.list.count;
        }
      });
    },

    //弹窗取消或确认
    cancelOrConfirm(e) {
      this.cancelConfirm = e;
      if (this.dialogType == "edit") {
        //编辑
        if (e == "confirm") {
          this.dialogEdit = false
          this.accountEdit();
        } else {
          this.dialogType = "edit";
          this.dialogTitle = "账号编辑";
          this.dialogEdit = true;
        }
      }

      if (this.dialogType == "pass") {
        //通过
        if (e == "confirm") {
          this.dialogEdit = false
          this.accountAuthPass();
        } else {
          this.dialogType = "pass";
          this.dialogTitle = "选择权限";
          this.dialogEdit = true;
        }
      }

      if (this.dialogType == "refuse") {
        if (e == "confirm") {
          //拒绝refuse
          this.accountAuthUnpass();
        }
      }

      if (this.dialogType == "block") {
        if (e == "confirm") {
          //封禁操作block
          this.accountForbidden();
        }
      }

      if (this.dialogType == "cancelEdit") {
        if (e == "cancel") {
          //取消编辑提示弹窗 点击了取消
          this.dialogType = "edit";
          this.dialogTitle = "账号编辑";
        } else {
          this.dialogEdit = false;
        }
      }

      if (this.dialogType == "cancelPass") {
        if (e == "cancel") {
          //取消通过提示弹窗 点击了取消
          this.dialogType = "pass";
          this.dialogTitle = "选择权限";
        } else {
          this.dialogEdit = false;
        }
      }
    },
    //编辑的取消或确认
    editCancelOrConfirm(e) {
      this.dialogEdit = true
      if (this.dialogType == "edit") {
        if (e == "confirm") {
          //编辑
          this.popup = true;
          this.dialogMessage = "请确认是否编辑";
        } else {
          //编辑
          this.popup = true;
          this.dialogType = "cancelEdit";
          this.dialogMessage = "本次编辑将不会保存，是否继续？";
        }
      } else if (this.dialogType == "pass") {
        if (e == "confirm") {
          //通过
          this.popup = true;
          this.dialogMessage = "请确认是否通过";
        } else {
          //通过取消
          this.popup = true;
          this.dialogType = "cancelPass";
          this.dialogMessage = "本次编辑将不会保存，是否继续？";
        }
      }
    },
    //账号审核 通过
    accountAuthPass() {
      if (this.permissionSelect.length == 0) {
        this.$message.error("请选择权限");
        return;
      }
      var submitPermissionArray = [];
      this.allPermissionList.forEach((element) => {
        element.permissionList.forEach((permission) => {
          if (this.permissionSelect.includes(permission.permissionName)) {
            submitPermissionArray.push(permission.permissionId);
          }
        });
      });
      let arrStr = submitPermissionArray.join(",");
      api_account
        .accountAuth({
          accountId: this.currentPerson.userId,
          status: 1,
          permissionId: arrStr,
        })
        .then((res) => {
          if (res.success) {
            this.currentPerson = {};
            this.currentPersonDetail = {};
            this.identSelect = [];
            this.permissionSelect = [];
            this.getAccountlist();
          }
        });
    },

    //账号编辑
    accountEdit() {
      if (this.identSelect.length == 0) {
        this.$message.error("请选择身份");
        return;
      }
      if (this.permissionSelect.length == 0) {
        this.$message.error("请选择权限");
        return;
      }

      var submitIdentityArray = [];
      this.allIdentityList.forEach((element) => {
        element.identityList.forEach((identity) => {
          if (this.identSelect.includes(identity.identityName)) {
            submitIdentityArray.push(identity.identityId);
          }
        });
      });
      let identityStr = submitIdentityArray.join(",");

      var submitPermissionArray = [];
      this.allPermissionList.forEach((element) => {
        element.permissionList.forEach((permission) => {
          if (this.permissionSelect.includes(permission.permissionName)) {
            submitPermissionArray.push(permission.permissionId);
          }
        });
      });
      let permissionStr = submitPermissionArray.join(",");

      api_account
        .accountEdit({
          accountId: this.currentPerson.userId,
          city: this.currentPersonDetail.city,
          identityId: identityStr,
          permissionId: permissionStr,
        })
        .then((res) => {
          if (res.success) {
            this.currentPerson = {};
            this.currentPersonDetail = {};
            this.identSelect = [];
            this.permissionSelect = [];
            this.getAccountlist();
          }
        });
    },

    //关闭弹窗回调
    dialogeClose(e) {
      if (e == "edit" && this.cancelConfirm == "confirm") {
        // this.accountEdit();
      } else if (e == "pass" && this.cancelConfirm == "confirm") {
        // this.accountAuthPass();
      }
    },

    //请求个人详情
    getAccountDetail() {
      api_account
        .getAccountDetail({
          accountId: this.currentPerson.userId,
        })
        .then((res) => {
          if (res.success) {
            this.currentPersonDetail = res.data.userInfo;
      
            this.identSelect = [];
            res.data.userIdentity.forEach((element) => {
              element.identityList.forEach((identity) => {
                if (identity.select === 1) {
                  this.identSelect.push(identity.identityName);
                }
              });
            });

            this.permissionSelect = [];
            res.data.userPermission.forEach((element) => {
              element.permissionList.forEach((permission) => {
                if (permission.select === 1) {
                  this.permissionSelect.push(permission.permissionName);
                }
              });
            });
          }
        });
    },

    //账号封禁
    accountForbidden() {
      api_account
        .accountForbidden({
          accountId: this.currentPerson.userId,
        })
        .then((res) => {
          if (res.success) {
            //封禁成功
            this.$message.success("封禁成功");
            this.currentPerson = {};
            this.currentPersonDetail = {};
            this.identSelect = [];
            this.permissionSelect = [];
            this.getAccountlist();
          }
        });
    },

    //账号审核 不通过/封禁
    accountAuthUnpass() {
      api_account
        .accountAuth({
          accountId: this.currentPerson.userId,
          status: 0,
        })
        .then((res) => {
          if (res.success) {
            this.currentPerson = {};
            this.currentPersonDetail = {};
            this.identSelect = [];
            this.permissionSelect = [];
            this.getAccountlist();
          }
        });
    },

    //点击拒绝
    refuseEvent(e) {
      this.currentPerson = e;
      this.dialogType = "refuse";
      this.dialogMessage = "请确认是否拒绝";
      this.popup = true;
    },
    //点击通过
    passEvent(e) {
      this.currentPerson = e;
      this.dialogType = "pass";
      this.getAccountDetail();
      this.dialogTitle = "选择权限";
      this.dialogEdit = true;
    },
    //点击编辑
    editEvent(e) {
      this.currentPerson = e;
      this.dialogType = "edit";
      this.getAccountDetail();
      this.dialogTitle = "账号编辑";
      this.dialogEdit = true;
    },
    //点击审核
    checkEvent(e) {
      this.$router.push({
        path: "/accountManage/checkDetail",
        query: {
          accountId: e.userId,
          type: "auth"
        }
      })
    },
    //点击编辑
    editEvent(e) {
      this.$router.push({
        path: "/accountManage/checkDetail",
        query: {
          accountId: e.userId,
          type: "edit"
        }
      })
    },
    //点击封禁
    blockEvent(e) {
      this.currentPerson = e;
      this.dialogType = "block";
      this.dialogMessage = "请确认是否封禁";
      this.popup = true;
    },
    // 点击解封
    unblockEvent(e) {
      this.$router.push({
        path: "/accountManage/checkDetail",
        query: {
          accountId: e.userId,
          type: "unblock"
        }
      })
    },
    //点击清除按钮
    cancelAllSelect() {
      this.name = ""; //姓名
      this.selectContestTypeIdArray = []; //当前所属赛事Id
      this.selectIdentityArray = []; //身份
      this.selectPermissionArray = []; //权限
      this.selectState = ""; //状态
      this.getAccountlist();
    },
  },
};
</script>
<style scoped lang="css">
.detail-list-left {
  flex: 4;
}
.dialogBox-contentList /deep/ .area-select {
  background: #f5f7fa !important;
  cursor: not-allowed !important;
  border-color: #e4e7ed !important;
  color: #c0c4cc !important;
  margin-left: 0px;
}
.dialogBox-center {
  border-bottom: 1px solid #dde1e6;
  padding: 18px;
}
.dialogBox-content {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 30px;
}
.dialogBox-contentList {
  width: 80%;
  justify-content: flex-start;
  display: flex;
  align-items: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #666666;
  padding-bottom: 10px;
}

.dialogBox-contentList span {
  width: 100px;
}

.dialogBox-checkname {
  font-size: 14px;
  font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
  font-weight: bold;
  color: #333333;
  margin-right: 62px;
  padding-left: 10px;
}
.dialogBox-check {
  display: flex;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #666666;
}
.dialogBox-checkout .el-checkbox {
  margin-bottom: 15px;
}
.dialogBox-checkout .el-checkbox:nth-child(2),
.dialogBox-checkout .el-checkbox:nth-child(3),
.dialogBox-checkout .el-checkbox:nth-child(11),
.dialogBox-checkout .el-checkbox:nth-child(12) {
  margin-left: 2px;
}
.dialogBox-checkout .el-checkbox:nth-child(8) {
  margin-left: -1px;
}
.limitCheck {
  margin-right: 10px !important;
  margin-bottom: 15px !important;
}
.limitmr .el-checkbox-group:nth-child(1) .limitCheck:nth-child(2) {
  margin-left: 13px !important;
}
.limitmr .el-checkbox-group:nth-child(1) .limitCheck:nth-child(3) {
  margin-left: 14px !important;
}
.limitmr .el-checkbox-group:nth-child(1) .limitCheck:nth-child(4) {
  margin-left: 15px !important;
}
.dialogBox-checkout {
  display: flex;
}
.dialogBox-checkout /deep/ .el-checkbox {
  margin-bottom: 15px;
}
.detail-time {
  font-size: 12px;
  font-family: MicrosoftYaHei;
  font-weight: 500;
  color: #999999;
}
.detail {
  padding: 20px;
  padding-top: 9px;
}
.detail-list {
  padding: 20px;
  display: flex;
}
.detail-list-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: #666666;
  font-size: 14px;
  margin-bottom: 16px;
}
.detail-split {
  height: 104px;
  border-right: 1px solid #e7e7e7;
  margin: auto 20px;
}

.detail-list-logo {
  display: flex;
  font-family: MicrosoftYaHei;
  flex-shrink: 0;
  margin-right: 10px;
}
.detail-list-logo /deep/ .el-image__inner {
  width: auto !important;
  height: auto !important;
}
.detail-list-text {
  font-family: Helvetica;
}
.detail-list-tip {
  margin-left: 7px;
}
.detail-list-idot {
  width: 4px;
  height: 4px;
  margin-right: 7px;
}
.detail-list-center {
  display: flex;
  flex: 1;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
}
.chunk-text {
  min-width: 42px;
}
.chunk-wrap {
  display: flex;
  margin-top: 10px;
}
.chunk {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #333333;
  padding-left: 20px;
}
.chunk-text {
  min-width: 42px;
}
.el-input {
  height: 40px;
  width: 224px;
  display: flex;
  align-items: center;
}
.el-select {
  width: 224px;
}
.detail-list-right {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex: 1;
}
.detail-list-handle {
  width: 79px;
  height: 32px;
  border-radius: 2px;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}
.detail-list-handle div {
  margin-left: 5px;
}

.page {
  display: flex;
  font-size: 16px;
  font-family: MicrosoftYaHei;
  color: #999999;
  align-items: center;
  justify-content: space-between;
}
.identityList {
  display: flex;
  justify-content: flex-start;
  margin-bottom: 14px;
  margin-left: 10px;
}

.contestTypeName {
  font-size: 14px;
  font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
  font-weight: bold;
  color: #333333;
  width: 74px;
}
.dialogBox-checkout /deep/ .el-checkbox__label {
  margin-left: 2px;
  padding-left: 0px;
}
.dialogBox-checkout /deep/ .el-checkbox {
  margin-right: 0;
  margin-bottom: 0;
  width: 120px;
}
.dialogBox-checkout /deep/ .el-checkbox:nth-child(3) {
  margin-right: 0;
  width: 90px;
}
.chunk /deep/ .el-select__tags {
  flex-wrap: nowrap;
  overflow: hidden;
}
.overflow-hidden {
  white-space:nowrap;
  overflow:hidden;
  text-overflow:ellipsis;
  display: flex;
  width: 100%;
}
.detail-list-identity{
  text-align: right;
  display: flex;
  justify-content: right;
}
.detail-list-identity span{
  white-space:nowrap;
  overflow:hidden;
  text-overflow:ellipsis;
  width: 40vw;
}
</style>
<template>
    <div :class="classList" @click="clickAction">
        <img v-if="type.includes('check_gray')" src="@/assets/message/check_gray.png" alt="">
        <img v-else-if="type.includes('edit_gray')" src="@/assets/message/edit_gray.png" alt="">
        <img v-else-if="type.includes('view_gray')" src="@/assets/message/view_gray.png" alt="">
        <img v-else-if="type.includes('pass_green')" src="@/assets/message/pass_green.png" alt="">
        <img v-else-if="type.includes('close_red')" src="@/assets/message/close_red.png" alt="">
        {{value}}
    </div>
</template>

<script>
export default {
    props: {
        type: {
            type: String,
            default: "view_gray"
        },
        value: {
            type: String,
            default: ""
        }
    },
    computed: {
        classList() {
            let res = "button ";
            if(this.type.includes("gray")) {
                res += "gray";
            } else if(this.type.includes("green")) {
                res += "green";
            } else if(this.type.includes("red")) {
                res += "red";
            }
            return res;
        }
    },
    methods:{
        clickAction(){
            this.$emit('clickAction', this.value)
        }
    }
}
</script>

<style lang="scss" scoped>
.button {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 10px;
    width: 79px;
    height: 32px;
    border: 1px solid #D9D9D9;
    color: #D9D9D9;
    font-size: 14px;
    border-radius: 4px;  
    cursor: pointer;
    &:hover {
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.05);
    }
    &.red {
        border: 1px solid #FF005C;
        color: #FF005C
    }
    &.green {
        border: 1px solid #00B400;
        color: #00B400;
    }
    &.gray {
        border: 1px solid #D9D9D9;
        color: #666666;
    }
    img {
        margin-right: 10px;
        width: 14px;
        height: 14px;
    }

}
</style>
<template>
  <div class="file-list">
    <div class="file" v-for="(item,index) in value" :key="item.url">
        <img :src="getIcon(item.type)" alt="">
        <p>{{item.name}}</p>
        <div v-if="item.url" class="button-container">
            <button @click="handleDelete(index)"><img src="@/assets/upload/icon_delete.png" alt=""></button>
            <button @click="handleDownload(item.url)"><img src="@/assets/upload/icon_download.png" alt=""></button>
        </div>
    </div>
  </div>
</template>

<script>
export default {
    props: {
        value: {
            type: Array,
            default: () => []
        }
    },
    methods: {
        getIcon(type) {
            //1	图片 2	word文档 3	excel文档 4	ppt文档 5	pdf文档 6	压缩文件
            let icon = "";
            switch(parseInt(type)) {
                case 1: icon = "icon_image"; break;
                case 2: icon = "icon_word"; break;
                case 3: icon = "icon_excel"; break;
                case 4: icon = "icon_ppt"; break;
                case 5: icon = "icon_pdf"; break;
                case 6: icon = "icon_zip"; break;
                default: icon = "icon_zip";
            }
            return require(`@/assets/upload/${icon}.png`)
        },
        handleDelete(index) {
            this.value.splice(index, 1);
        },
        handleDownload(url) {
            window.open(url)
        }
    }
}
</script>

<style lang="scss" scoped>
.file {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
    height: 22px;
    width: 50%;
    &-list {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
    }
    img {
        height: 16px;
        width: auto;
    }
    >img {
        margin-right: 10px;
    }
    p {
        font-size: 14px;
        font-family: MicrosoftYaHei;
        color: #666666;
        width: 200px;
        white-space:nowrap;
        overflow:hidden;
        text-overflow:ellipsis;
    }
    .button-container {
        display: flex;
        align-items: center;
        margin-left: 20px;
        button {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 10px;
            border: 0;
            background-color: transparent;
            height: 22px;
            width: 22px;
            cursor: pointer;
        }
    }
}
</style>
<template>
  <div v-if="isMobile()" class="mobile">
    <div class="message-container">
      <img
        v-if="isRead == 0 ? true : false"
        src="@/assets/message/msg_new.png"
      />
      <img v-else src="@/assets/announcement/icon_message.png" />
      <section class="message-main">
        <p class="message-title">【{{typeStr}}】{{title}}</p>
        <p class="message-date">{{ timeStr }}</p>
      </section>
    </div>
    <section class="message-button-box">
      <div class="button" @click="clickAction">
        <img src="@/assets/message/view_gray.png" alt="">
        查看
      </div>
    </section>
  </div>
  <div v-else class="message-container">
    <img src="@/assets/announcement/icon_message.png" />
    <section class="message-main">
      <p class="message-title">【{{typeStr}}】{{title}}</p>
      <p class="message-date">{{ timeStr }}</p>
    </section>
    <section class="message-button-box">
      <div class="button" @click="clickAction">
        <img src="@/assets/message/view_gray.png" alt="">
        查看
      </div>
    </section>
  </div>
</template>

<script>
import Button from "./button.vue";
export default {
  components: { Button },
  props: {
    id: {
      type: Number,
      default: 0,
    },

    status: {
      type: Number,
      default: 0,
    },
    isRead: {
      type: Number,
      default: 1,
    },
    title: {
      type: String,
      default: "",
    },
    typeStr: {
      type: String,
      default: "日常公告"
    },
    createdAt: {
      type: [Date, String],
      default: () => new Date(),
    }
  },
  computed: {
    timeStr() {
      return "发布时间：" + this.$moment(this.createdAt).format("YYYY-MM-DD HH:mm");
    },
  },

  methods: {
    clickAction(e) {
      this.$emit("actionMessage", {id: this.id});
    },
  },
};
</script>

<style lang="scss" scoped>
.mobile {
  margin: 10px 0;
  padding: 0 20px;
  background-color: #ffffff !important;
  .message-container {
    padding: 16px 0 18px;
    border-bottom: 1px solid #eceef4;
    img {
      margin-right: 10px;
      height: 32px;
      width: 32px;
    }
    .message-main {
      .message-title {
        font-size: 14px;
        line-height: 18px;
      }
    }
  }
  .message-button-box {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    height: 50px;
  }
}

.message-container {
  display: flex;
  padding: 20px 0;
  border-bottom: 1px dashed #e4e8ed;
  img {
    flex: none;
    margin-right: 20px;
    height: 48px;
    width: 48px;
  }
  .message-main {
    flex: auto;
    width: 50%;
    font-family: MicrosoftYaHei;
    .message-title {
      margin-bottom: 10px;
      font-size: 16px;
      color: #333333;
      line-height: 21px;
    }
    .message-date {
      font-size: 14px;
      color: #999999;
    }
  }
  .message-button-box {
    display: flex;
    justify-content: center;
    align-items: center;
    flex: none;
  }
}
.button {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 10px;
    width: 79px;
    height: 32px;
    border: 1px solid #D9D9D9;
    color: #D9D9D9;
    font-size: 14px;
    border-radius: 4px;  
    cursor: pointer;
    border: 1px solid #D9D9D9;
    color: #666666;
    &:hover {
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.05);
    }
    img {
        margin-right: 10px;
        width: 14px;
        height: 11px;
    }
}
</style>
<template>
  <dialogBox
    :popup.sync="valueHere"
    top="100px"
    title="发布公告"
    width="800px"
    @cancelOrConfirm="handleCloseDialog"
  >
    <div class="dialogBox-center">
      <el-form class="form" :model="formData" :rules="rules" label-width="130px" label-position="left">
        <el-form-item label="是否短信通知：" prop="smsNotify">
          <el-radio-group v-model="formData.smsNotify">
            <el-radio :label="1">是</el-radio>
            <el-radio :label="0">否</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="发布范围：" prop="auth"></el-form-item>
        <div class="auth-container" v-for="contest in rangeList" :key="contest.contestTypeId">
          <span class="auth-title">{{ contest.contestTypeName }}</span>
          <el-checkbox-group class="auth-value" v-model="auth[contest.contestTypeName]">
            <el-checkbox
              v-for="checkboxData in contest.identityList"
              :label="checkboxData.identityId"
              :key="checkboxData.identityId"
            >{{ checkboxData.identityName }}</el-checkbox>
          </el-checkbox-group>
        </div>
      </el-form>
    </div>
  </dialogBox>
</template>
  
  <script>
import dialogBox from "@/components/accountManage/dialog.vue";
import * as api_account from "@/api/account";
export default {
  name: "editScore",
  components: { dialogBox },
  props: {
    value: {
      type: Boolean,
      default: false
    },
    announcementId: {
      type: [Number, String],
      default: ""
    }
  },
  data() {
    return {
      valueHere: false,
      rules: {
        smsNotify: [{ required: true }],
        auth: [{ required: true }]
      },
      formData: {
        smsNotify: 0,
        range: "",
      },
      rangeList: [],
      auth: {}
    };
  },
  watch: {
    value(nowVal) {
      this.valueHere = nowVal;
      nowVal && this.loadData();
    },
    valueHere(nowVal) {
      this.$emit("input", nowVal);
    },
    auth: {
      handler(nowV) {
        let rangeArr = Object.values(nowV).reduce((res, val) => {
          res.push(...val);
          return res;
        }, []);
        this.formData.range = rangeArr.map((d) => d + "").join(",");
      },
      deep: true,
    },
  },
  methods: {
    loadData() {
      api_account
        .getAnnouncementDetail({
          announcementId: this.announcementId,
          userId: this.$store.getters.userInfo.id
        })
        .then(res => {
          if (res.success) {
            this.rangeList = res.data.range;
            this.auth = res.data.range.reduce((res, val) => {
              res[val.contestTypeName] = val.identityList
                .filter(d => d.select)
                .map(d => d.identityId);
              return res;
            }, {});
            this.formData.smsNotify = res.data.detail.smsNotify;
          }
        });
    },
    handleCloseDialog(type) {
        if(type == "confirm") {
            this.$emit("confirm", {announcementId: this.announcementId, ...this.formData, status: 1})
        }
    }
  }
};
</script>
  
  <style lang="scss" scoped>
.auth-container {
  display: flex;
  height: 40px;
  .auth-title {
    flex: none;
    width: 6em;
    font-size: 14px;
    font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
    color: #666666;
  }
  ::v-deep .el-checkbox-group {
    display: flex;
    width: 0;
    flex: auto;
    .el-checkbox {
      min-width: 120px;
      width: max-content;
      margin: 0;
    }
  }
}
</style>
<template>
  <div>
    <div class="page-container">
      <div class="title">
        {{ isEdit ? "编辑公告" : "新增公告" }}
        <span class="back" @click="handleCancel">
          <img src="@/assets/announcement/icon_back.png" alt="" />
          返回
        </span>
      </div>
    </div>
    <div class="box">
      <el-form
        class="form"
        :model="announcement"
        :rules="rules"
        ref="form"
        label-width="120px"
      >
        <el-form-item label="标题：" prop="title">
          <el-input v-model="announcement.title"></el-input>
        </el-form-item>
        <el-form-item label="公告内容：" prop="content">
          <div style="border: 1px solid #ccc">
            <Toolbar
              style="border-bottom: 1px solid #ccc"
              :editor="editor"
              :defaultConfig="toolbarConfig"
              mode="default"
            />
            <Editor
              style="height: 300px; overflow-y: hidden"
              v-model="announcement.content"
              :defaultConfig="editorConfig"
              mode="default"
              class="editor"
              @onCreated="onEditorCreated"
            />
          </div>
        </el-form-item>
        <el-form-item label="公告类型：" prop="type">
          <el-select
            clearable
            placeholder="请选择公告类型"
            v-model="announcement.type"
            style="width: 224px"
          >
            <el-option
              v-for="item in typeOptions"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            >
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="发布状态：" prop="status">
          <div
            class="status"
            @click="announcement.status = 1 - announcement.status"
          >
            <img
              v-if="announcement.status"
              src="@/assets/announcement/icon_status_on.png"
              alt
            />
            <img v-else src="@/assets/announcement/icon_status_off.png" alt />
          </div>
        </el-form-item>
        <template v-if="announcement.status">
          <el-form-item label="是否短信通知：" prop="smsNotify">
            <el-radio-group v-model="announcement.smsNotify">
              <el-radio :label="1">是</el-radio>
              <el-radio :label="0">否</el-radio>
            </el-radio-group>
          </el-form-item>
          <el-form-item label="发布范围：">
            <div
              class="auth-container"
              v-for="contest in rangeList"
              :key="contest.contestTypeId"
            >
              <span class="auth-title">{{ contest.contestTypeName }}</span>
              <el-checkbox-group v-model="auth[contest.contestTypeName]">
                <el-checkbox
                  v-for="checkboxData in contest.identityList"
                  :label="checkboxData.identityId"
                  :key="checkboxData.identityId"
                  >{{ checkboxData.identityName }}</el-checkbox
                >
              </el-checkbox-group>
            </div>
          </el-form-item>
        </template>
        <el-form-item label="附件：" prop="attachment">
          <el-upload
            action="http://www.baidu.com"
            class="upload-demo"
            multiple
            :show-file-list="false"
            :before-upload="promiseReject"
            :on-change="handleChangeFile"
            :accept="fileType.join(',')"
          >
            <div slot="trigger" class="button-upload">
              <img src="@/assets/announcement/icon_upload.png" alt="" />
              点击上传
            </div>
            <div slot="tip" class="el-upload__tip">
            <div>
              支持文件类型：PDF、图片、压缩文件、PPT、Excel、Word，单个文件大小不超过20MB
              <!-- 文件列表 -->
              <file-list :value="announcement.attachment"></file-list>
            </div>
            </div>
          </el-upload>
        </el-form-item>
      </el-form>
      <span class="dialog-footer">
        <el-button @click="handleCancel">取 消</el-button>
        <el-button type="primary" @click="handleConfirm">确 定</el-button>
      </span>
    </div>
  </div>
</template>
<script>
import "@wangeditor/editor/dist/css/style.css";
import { mapGetters } from "vuex";
import * as api_account from "@/api/account";
import dialogBox from "@/components/accountManage/dialog.vue";
import FileList from "./components/fileList.vue"
import { Editor, Toolbar } from "@wangeditor/editor-for-vue";
export default {
  components: { dialogBox, Editor, Toolbar, FileList },
  data() {
    return {
      announcement: {
        title: "", //标题
        status: 0, // 发布状态
        smsNotify: 0, //是否短信通知
        content: "", //公告内容
        type: 1, //公告类型
        range: "",
        attachment: [],
      },
      rules: {
        title: [{ required: true, message: "请输入公告标题", trigger: "blur" }],
        content: [
          { required: true, message: "请输入公告内容", trigger: "change" },
        ],
      },
      editor: null,
      toolbarConfig: {},
      editorConfig: { 
        placeholder: "请输入内容...",
        MENU_CONF: {
          uploadImage: {
            customUpload: this.editorUpload
          }
        } 
      },
      rangeList: [],
      auth: {},
      fileType: [
        "image/*",
        ".png,.jpg,.jpeg",
        ".doc,.docx",
        ".xls,.xlsx",
        ".ppt,.pptx",
        ".pdf",
        ".zip,.rar",
      ], //1	图片 2	word文档 3	excel文档 4	ppt文档 5	pdf文档 6	压缩文件
      // 公告类型1日常公告 2处罚公告 3比赛公告
      typeOptions: [
        {label: "日常公告", value: 1},
        {label: "处罚公告", value: 2},
        {label: "比赛公告", value: 3},
      ],
    };
  },
  computed: {
    ...mapGetters(["partTimeCoach"]),
    isEdit() {
      return this.$route.params.id > 0;
    },
  },
  watch: {
    auth: {
      handler(nowV) {
        let rangeArr = Object.values(nowV).reduce((res, val) => {
          res.push(...val);
          return res;
        }, []);
        this.announcement.range = rangeArr.map((d) => d + "").join(",");
      },
      deep: true,
    },
  },
  created() {
    this.isEdit && (this.announcement.announcementId = this.$route.params.id);
    this.loadData();
  },
  beforeDestroy() {
    const editor = this.editor;
    if (editor == null) return;
    editor.destroy(); // 组件销毁时，及时销毁编辑器
  },
  methods: {
    onEditorCreated(editor) {
      this.editor = Object.seal(editor); // 一定要用 Object.seal() ，否则会报错
    },
    editorUpload(file, callback) {
      var data = new FormData();
      data.append("file", file);
      data.append("userId", this.$store.getters.userInfo.id)
      // 上传文件
      api_account.uploadFile(data).then((res) => {
        if (res.success) {
          this.editor.dangerouslyInsertHtml(`<img src="${res.data.url}" alt="${res.data.name}" data-href="${res.data.url}" style="width: 100%;"/>`)
          // callback(res.data.url, res.data.name, res.data.url)
        }
      });
    },
    loadData() {
      if(!this.isEdit) {
        this.loadDataAdd();
        return
      }
      api_account
        .getAnnouncementDetail({
          announcementId: this.$route.params.id,
        })
        .then((res) => {
          if (res.success) {
            this.rangeList = res.data.range;
            this.auth = res.data.range.reduce((res, val) => {
              res[val.contestTypeName] = val.identityList
                .filter((d) => d.select)
                .map((d) => d.identityId);
              return res;
            }, {});
            if (res.data.detail) {
              for (let key in res.data.detail) {
                this.announcement.hasOwnProperty(key) &&
                  (this.announcement[key] = res.data.detail[key]);
              }
            }
            this.announcement.attachment = res.data.attachment;
          }
        });
    },
    // 新增时获取数据
    loadDataAdd() {
      api_account.getIdentityList({}).then(res => {
        if(res.success) {
          this.rangeList = res.data.list.map(d => ({
            ...d,
            identityList: d.identityList.map(d1 => ({
              ...d1,
              select: 0
            }))
          }))
          this.auth = this.rangeList.reduce((res, val) => {
            res[val.contestTypeName] = val.identityList
              .filter((d) => d.select)
              .map((d) => d.identityId);
            return res;
          }, {});
        }
      })
    },
    handleChangeFile(file) {
      let selectedFile = file.raw;
      // 判断文件大小
      if (selectedFile.size > 20 * 1024 * 1024) {
        this.$message.error(`${selectedFile.name}文件不得大于20M`);
        return;
      }
      this.announcement.attachment.push(selectedFile);
      var data = new FormData();
      data.append("userId", this.$store.getters.userInfo.id)
      data.append("file", selectedFile);
      // 上传文件
      api_account.uploadFile(data).then((res) => {
        if (res.success) {
          let selectedFileIndex = this.announcement.attachment.findIndex(
            (d) => d == selectedFile
          );
          console.log(selectedFileIndex);
          this.announcement.attachment.splice(selectedFileIndex, 1, res.data);
        }
      });
    },
    handleCancel() {
      this.$confirm("取消之后对于已作出的修改不会保存").then(() => {
        this.$router.go(-1);
      });
    },
    handleConfirm() {
      if(!this.announcement.title) {
        this.$message.error("请填写该公告的标题");
        return
      }
      if(!this.announcement.content || this.announcement.content == "<p><br></p>") {
        this.$message.error("请填写该公告的内容")
        return
      }
      this.$confirm(`确定要${this.isEdit ? "修改" : "新增"}该公告信息吗？`).then(() => {
        let method = this.isEdit
          ? api_account.updateAnnouncement
          : api_account.addAnnouncement;
        method({
          ...this.announcement,
          attachment: this.announcement.attachment.map(
            (d) => `${d.name},${d.type},${d.url}`
          ),
        }).then((res) => {
          if (res.success) {
            res.success && this.$message.success(this.isEdit ? "修改成功" : "新增成功");
            this.$router.go(-1);
          }
        });
      });
    },
    promiseReject() {
      return Promise.reject()
    }
  },
};
</script>
  
<style scoped lang="scss">
.page-container {
  padding-bottom: 0;
}
::v-deep .title {
  font-size: 14px;
  border: 0;
  color: inherit;
  font-weight: normal;
}
.title {
  position: relative;
  right: 20px;
  bottom: 20px;
  margin-bottom: -20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 0;
  font-size: 20px;
  font-weight: bold;
  .back {
    display: flex;
    align-items: center;
    font-size: 14px;
    color: #1d81ee;
    font-weight: 400;
    cursor: pointer;
    img {
      margin-right: 6px;
      width: 16px;
      height: 13px;
    }
  }
}
.status {
  display: flex;
  align-items: center;
  width: 100%;
  height: 40px;
  cursor: pointer;
  img {
    width: 52px;
    height: 22px;
  }
}
.auth-container {
  float: left;
  display: flex;
  width: 50%;
  height: 40px;
  .auth-title {
    padding-right: 10px;
    width: 60px;
    font-size: 14px;
    font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
    color: #666666;
  }
}
.dialog-footer {
  border-top: 1px solid #e5e8ed;
  padding: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}
.form {
  padding: 0 20px;
}
.button-upload {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 106px;
  height: 32px;
  background: #ffffff;
  border: 1px solid #1d81ee;
  color: #1d81ee;
  cursor: pointer;
  img {
    margin-right: 8px;
    height: 14px;
    width: 14px;
  }
}
</style>
  <template>
  <div v-if="isMobile()" style="background-color: #f5f8fb">
    <!-- 类型筛选 -->
    <div class="mobile-filter">
      <p @click="() => (selecting = !selecting)">公告类型<i :class="selecting ? 'el-icon-caret-top' : 'el-icon-caret-bottom'" ></i></p>
      <div v-show="selecting">
        <div :class="{active: type.value == filterData.type}" v-for="type in typeOptions" :key="type.value" @click="handleSelectType(type.value)">{{type.label}}</div>
      </div>
    </div>
    <div class="mobile-list">
      <!-- 蒙尘 -->
      <div v-show="selecting" class="gray" @click="() => (selecting = !selecting)"></div>
      <van-list
        @load="loadMore"
        offset="0"
        v-model="loading"
        :finished="loadFinished"
        finished-text=""
      >
        <van-pull-refresh v-model="loading" @refresh="handleSearch">
          <div class="nodata" v-if="!announcement.length">
            <img src="@/assets/eventManage/nodata.png" alt="" />
            <p>暂无列表信息</p>
          </div>
          <template v-else>
            <message v-for="item in announcement" :key="item.id" v-bind="item" :isMobile="isMobile()" @actionMessage="handlePreview"></message>
          </template>
          </van-pull-refresh>
      </van-list>
    </div>
  </div>
  <div v-else>
    <div class="page-container">
      <div class="title">
        公告管理
        <el-select
          v-if="$route.meta.permission == 'readonly'"
          clearable
          placeholder="请选择公告类型"
          v-model="filterData.type"
          style="width: 191px; color: #999"
        >
          <el-option
            v-for="item in typeOptions"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          >
          </el-option>
        </el-select>
      </div>
      <template v-if="$route.meta.permission != 'readonly'">
        <div class="detail">
          <div class="chunk-wrap">
            <div class="chunk">
              <div style="width: 5em; text-align:right">标题：</div>
              <el-input placeholder="请输入标题" v-model="filterData.title" style="width: 224px"></el-input>
            </div>
            <div class="chunk">
              <div>创建人：</div>
              <el-input placeholder="请输入创建人" v-model="filterData.createdBy" style="width: 224px"></el-input>
            </div>
    
            <div class="chunk">
              <div>发布状态：</div>
              <el-select
                clearable
                placeholder="请选择发布状态"
                v-model="filterData.status"
                style="width: 160px"
              >
                <el-option
                  v-for="item in statusList"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </div>
            <div class="chunk">
              <el-button type="primary" @click="handleSearch">查询</el-button>
            </div>
            <div class="chunk" @click="handleReset">
              <el-image
                :src="require('@/assets/accountManage/reset.png')"
              ></el-image>
            </div>
          </div>
          <div class="chunk-wrap" @click="handleClickAdd">
            <el-button
              icon="el-icon-circle-plus-outline"
              type="success"
              class="chunk-button"
              >新增</el-button
            >
          </div>
        </div>
        <div class="detail">
          <div class="chunk-wrap">
            <div class="chunk">
              <div style="width: 5em; text-align:right">公告类型：</div>
              <el-select
                clearable
                placeholder="请选择公告类型"
                v-model="filterData.type"
                style="width: 224px"
              >
                <el-option
                  v-for="item in typeOptions"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </div>
          </div>
        </div>
      </template>
      <template v-else>
        <div>
          <div class="nodata" v-if="!announcement.length">
            <img src="@/assets/eventManage/nodata.png" alt="" />
            <p>暂无列表信息</p>
          </div>
          <template v-else>
            <message v-for="item in announcement" :key="item.id" v-bind="item" :isMobile="isMobile()" @actionMessage="handlePreview"></message>
          </template>
        </div>
        <div v-if="page.count && announcement.length" class="page" style="padding-bottom: 10px">
          <div>共{{ page.count }}个，每页{{ page.pageSize }}条数据</div>
          <div>
            <el-pagination
              background
              layout="prev, pager, next"
              :total="page.count"
              :page-size="page.pageSize"
              :current-page.sync="page.pageIndex"
            ></el-pagination>
          </div>
        </div>
      </template>
    </div>
    <div class="box" v-if="$route.meta.permission != 'readonly'">
        <el-table
          ref="singleTable"
          :data="announcement"
          highlight-current-row
          style="width: 100%"
        >
          <el-table-column label="序号" type="index" align="center" width="100">
          </el-table-column>
          <el-table-column
            align="center"
            property="title"
            label="标题"
            width="auto"
            min-width="25%"
          >
          </el-table-column>
          <el-table-column
            align="center"
            property="createdBy"
            label="创建人"
            width="auto"
            min-width="15%"
          >
          </el-table-column>
          <el-table-column
            align="center"
            property="typeStr"
            label="公告类型"
            width="auto"
            min-width="15%"
          >
          </el-table-column>
          <el-table-column
            align="center"
            property="createdAt"
            label="创建时间"
            width="auto"
            min-width="15%"
          >
            <template slot-scope="scope">
              {{$moment(scope.row.createdAt).format("YYYY-MM-DD HH:mm")}}
            </template>
          </el-table-column>
          <el-table-column
            align="center"
            property="createdAt"
            label="发布状态"
            width="auto"
            min-width="25%"
          >
            <template slot-scope="scope">
              <div class="status" @click="handleChangeStatus(scope.row)">
                <img v-if="scope.row.status" src="@/assets/announcement/icon_status_on.png" alt="">
                <img v-else src="@/assets/announcement/icon_status_off.png" alt="">
              </div>
            </template>
          </el-table-column>
          <el-table-column
            label="操作"
            fixed="right"
            align="center"
            width="280"
          >
            <template slot-scope="scope">
              <div class="handle">
                <span class="handle-view" @click="handlePreview(scope.row)">预览</span>
                <span class="handle-edit" @click="handleEdit(scope.row)">编辑</span>
                <span class="handle-delete" @click="handleDelete(scope.row)">删除</span>
              </div>
            </template>
          </el-table-column>
        </el-table>
        <div v-if="page.count" class="page page-padding">
          <div>共{{ page.count }}个，每页{{ page.pageSize }}条数据</div>
          <div>
            <el-pagination
              background
              layout="prev, pager, next"
              :total="page.count"
              :page-size="page.pageSize"
              :current-page.sync="page.pageIndex"
            ></el-pagination>
          </div>
        </div>
      </div>
      <!-- 发布 -->
    <release v-model="releaseDialog.value" v-bind="releaseDialog" @confirm="handleRelease"></release>
  </div>
</template>
<script>
import pagination from "@/components/pagination";
import * as api_account from "@/api/account";
import dialogBox from "@/components/accountManage/dialog.vue";
import release from "./components/release.vue"
import Message from "./components/message.vue"
import { Picker, Button, Icon } from "vant";
export default {
  components: { pagination, dialogBox, release, Message, Picker, Button, Icon },
  data() {
    return {
      filterData: {
        title: "",
        createdBy: "",
        status: "-1",
        type: 0
      },
      statusList: [
        {
          value: "0",
          label: "未发布",
        },
        {
          value: "1",
          label: "已发布",
        },
        {
          value: "-1",
          label: "全部"
        }
      ], //发布状态
      // 公告类型1日常公告 2处罚公告 3比赛公告
      typeOptions: [
        {label: "全部", value: 0},
        {label: "日常公告", value: 1},
        {label: "处罚公告", value: 2},
        {label: "比赛公告", value: 3},
      ],
      page: {
        pageSize: 10,
        pageIndex: 1,
        count: 0
      },
      loading: false,
      announcement: [],
      releaseDialog: {
        value: false,
        announcementId: ""
      },
      selecting: false, //移动端正在选择公告类型
    };
  },
  computed: {
    loadFinished() {
      return this.page.pageIndex * this.page.pageSize >= this.page.count
    }
  },
  watch: {
    "page.pageIndex"() {
        this.loadData();
    },
    "filterData.type"() {
      // 如果非管理员或者是移动端，没有搜索按钮，切换公告类型自动搜索
      if(this.$route.meta.permission != 'readonly' && !this.isMobile()) {
        return
      }
      this.handleSearch();
    }
  },
  created() {
    this.loadData();
  },

  methods: {
    loadMore() {
      this.loadFinished || this.page.pageIndex++;
    },
    loadData() {
      this.loading = true;
      if(this.page.pageIndex == 1) {
        this.announcement = []
      }
      let api = api_account.getAnnouncementListView;
      let params = {
        page: this.page.pageIndex,
        pageNum: this.page.pageSize
      }
      if(this.$route.meta.permission != 'readonly') {
        params = {...this.filterData, ...params}
        api = api_account.getAnnouncementList
      }
      api(params).then(res => {
        this.loading = false;
        if(res.success) {
          this.page.count = res.data?.list?.count || 0;
          // 如果有数据
          if(res.data?.list?.rows?.length) {
            const list = res.data.list.rows;
            list.forEach(d => {
              d.createdAt = d.createdAt || new Date(d.publishedAt),
              d.typeStr = this.typeOptions.find(d1 => d1.value == d.type)?.label || "";
            })
            if(this.isMobile()) {
              this.announcement = [ ...this.announcement, ...list]
            } else {
              this.announcement = list
            }
          }
        }
      })
    },
    handleSelectType(value) {
      this.filterData.type = value;
    },
    handleSearch() {
      if(this.page.pageIndex == 1) {
        this.loadData()
      } else {
        this.page.pageIndex = 1;
      }
    },
    handleReset() {
      this.filterData = {
        title: "",
        createdBy: "",
        status: "-1",
        type: 0
      }
      this.page.pageIndex = 1;
    },
    handleRefresh() {
      if(this.page.pageIndex != 1) {
        this.page.pageIndex = 1;
      } else {
        this.loadData();
      }
    },
    handleChangeStatus(row) {
      // 取消发布
      if(row.status) {
        this.handleRelease({
          announcementId: row.id,
          status: 0,
          smsNotify: 0
        })
      } else {
        // 打开弹窗确认发布
        this.releaseDialog.announcementId = row.id;
        this.releaseDialog.value = true
      }
    },
    handleRelease(params) {
      api_account.releaseAnnouncement(params).then(res => {
        if(res.success) {
          this.$message.success("修改成功");
          // 前端修改发布状态
          let selectedItem = this.announcement.find(d => d.id == params.announcementId);
          selectedItem && (selectedItem.status = params.status)
        }
      })
    },
    handlePreview(row) {
      let query = {};
      this.$route.meta.permission != 'readonly' && (query.userId = this.$store.getters.userInfo.id);
      let href = this.$router.resolve({path:`/announcement/view/${row.id}`, query: query}).href;
      window.open(href)    },
    handleClickAdd() {
      this.$router.push(`/noticeList/edit/0`)
    },
    handleEdit(row) {
      this.$router.push(`/noticeList/edit/${row.id}`)
    },
    handleDelete(row) {
      this.$confirm("确认删除该公告吗？").then(() => {
        api_account.deleteAnnouncement({
          announcementId: row.id
        }).then(res => {
          if (res.success) {
            this.$message({
              message: "删除公告成功",
              type: "success",
            });
            this.loadData();
          }
        })
      }).catch(() => {});
    }
  },
};
</script>

<style scoped lang="scss">
.page-container {
  padding-bottom: 0;
}
.mt-20 {
  margin-top: -20px;
}
.title {
  position: relative;
  right: 20px;
  bottom: 20px;
  padding: 20px;
  width: 100%;
  border-bottom: 1px solid #eef2f7;
  margin-bottom: -20px;
  ::v-deep input {
    color: #999999
  }
}
.page {
  padding-top: 10px;
  display: flex;
  font-size: 16px;
  font-family: MicrosoftYaHei;
  color: #999999;
  align-items: center;
  justify-content: space-between;
  &-padding {
    padding: 20px 20px 20px 40px 
  }
}
.detail {
  padding: 10px 20px 0 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
  &:last-of-type {
    padding-bottom: 20px;
  }
}
.chunk-wrap {
  display: flex;
  margin-top: 10px;
}
.chunk {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #333333;
  padding-right: 20px;
}

.buttonH5 {
  height: 44px;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  background-color: white;
}
.searchButtonH5 {
  width: 50px;
  height:30px;
  background-color: #1D81EE;
  color: white;
  font-size: 15px;
  text-align: center;
  line-height: 30px;
  border-radius: 3px;
  margin-right: 10px;
}
.resetButton{
  width: 30px;
  height:30px;
  background-image: url("~@/assets/accountManage/reset.png") !important;
  background-position: center center;
  /* 背景图不平铺 */
  background-repeat: no-repeat;
  /* 让背景图基于容器大小伸缩 */
  background-size: cover;
  margin-right: 17px;
}
.status {
  margin: 0 auto;
  width: 52px;
  height: 22px;
  cursor: pointer;
  img {
    width: inherit;
    height: inherit;
  }
}
.handle {
  display: flex;
  align-items: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #333333;
  line-height: 19px;
  span:last-of-type {
    margin-right: 0!important;
  }
  &-view {
    display: flex;
    align-items: center;
    margin-right: 40px;
    cursor: pointer;
    &:before {
      content: " ";
      display: block;
      margin-right: 5px;
      width: 14px;
      height: 14px;
      background-image: url(~@/assets/announcement/icon_see_off.png);
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
    }
    &:hover {
      color: #1D81EE;
      &:before {
        background-image: url(~@/assets/announcement/icon_see_on.png);
      }
    }
  }
  &-edit {
    display: flex;
    align-items: center;
    margin-right: 40px;
    cursor: pointer;
    &:before {
      content: " ";
      display: block;
      margin-right: 5px;
      width: 14px;
      height: 14px;
      background-image: url(~@/assets/announcement/icon_edit_off.png);
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
    }
    &:hover {
      color: #1D81EE;
      &:before {
        background-image: url(~@/assets/announcement/icon_edit_on.png);
      }
    }
  }
  &-delete {
    display: flex;
    align-items: center;
    margin-right: 40px;
    cursor: pointer;
    &:before {
      content: " ";
      display: block;
      margin-right: 5px;
      width: 14px;
      height: 14px;
      background-image: url(~@/assets/announcement/icon_delete_off.png);
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
    }
    &:hover {
      color: #1D81EE;
      &:before {
        background-image: url(~@/assets/announcement/icon_delete_on.png);
      }
    }
  }
}
.nodata {
  height: 400px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border: 0;
  img {
    margin-bottom: 20px;
    width: 90px;
    height: auto;
  }
  p {
    color: #999999;
    font-size: 14px;
  }
}
.mobile-filter {
  position: relative;
  flex: none;
  p {
    background: #ffffff;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 36px;
    color: #666666;
    font-size: 12px;
  }
  > div {
    position: absolute;
    top: 36px;
    left: 0;
    right: 0;
    padding: 0 20px;
    background: #ffffff;
    z-index: 9;
    div {
      border-bottom: 1px solid #ECEEF4;
      display: flex;
      justify-content: space-between;
      align-items: center;
      height: 60px;
      color: #333333;
      font-size: 14px;
      &:last-of-type {
        border-bottom: 0;
      }
      &.active {
        color: #1D81EE;
        &::after {
          content:" ";
          display: block;
          height: 20px;
          width: 20px;
          background-image: url(~@/assets/announcement/icon_checked.png);
          background-size: contain;
        }
      }
    }
  }
}
.mobile-list  {
  position: relative;
  height: 0;
  flex: auto;
  overflow: auto;
  .gray {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, .5);
    z-index: 5;
  }
}
</style>
<template>
    <div class="view" :class="{mobile: isMobile()}">
        <img class="header" src="@/assets/announcement/announcement_header.png" alt="">
        <div class="main">
            <p class="main-title">{{announcement.title}}</p>
            <span class="main-time">{{this.$moment().format("YYYY-MM-DD HH:mm")}}</span>
            <div class="content" v-html="announcement.content"></div>
            <!-- 附件 -->
            <div class="mt40" v-if="announcement.attachment.length">
              <p class="attachment-title">附件：</p>
              <div class="attachment-container">
                <div class="attachment" v-for="item in announcement.attachment" :key="item.url">
                  <p>
                    <img :src="getIcon(item.type)" alt="">
                    <span>{{item.name}}</span>
                  </p>
                  <button @click="handleDownload(item.url)">
                    <img src="@/assets/upload/icon_download.png" alt=""><span>下载</span>
                  </button>
                </div>
              </div>
            </div>
        </div>
    </div>
</template>

<script>
import * as api_account from "@/api/account";
export default {
  data() {
    return {
      announcement: {
        title: "", //标题
        content: "", //公告内容
        attachment: []
      },
    }
  },
  created() {
    console.log(this.$parent)
    this.loadData()
  },
  methods: {
    loadData() {
      api_account.getAnnouncementDetail({
        announcementId: this.$route.params.id,
        userId: this.$route.query.userId
      }).then(res => {
        if (res.success) {
          if(res.data.detail) {
            for(let key in res.data.detail) {
              this.announcement.hasOwnProperty(key) && (this.announcement[key] = res.data.detail[key])
            }
          }
          this.announcement.attachment = res.data.attachment;
        }
      });
    },
    getIcon(type) {
        //1	图片 2	word文档 3	excel文档 4	ppt文档 5	pdf文档 6	压缩文件
        let icon = "";
        switch(type) {
            case 1: icon = "icon_image"; break;
            case 2: icon = "icon_word"; break;
            case 3: icon = "icon_excel"; break;
            case 4: icon = "icon_ppt"; break;
            case 5: icon = "icon_pdf"; break;
            case 6: icon = "icon_zip"; break;
            default: icon = "icon_zip";
        }
        return require(`@/assets/upload/${icon}.png`)
    },
    handleDownload(url) {
      window.open(url)
    }
  }
}
</script>

<style lang="scss" scoped>
.mt40 {
  margin-top: 40px;
}
.view {
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #F4F5F9;
  font-size: 14px;
  .header {
    width: 100%;
    height: auto;
  }
  .main {
    display: flex;
    flex-direction: column;
    margin-top: -60px;
    padding: 60px 160px;
    width: calc(100vw - 320px);
    background-color: #fff;
    box-sizing: border-box;
    &-title {
      align-self: center;
      font-size: 30px;
      font-family: MicrosoftYaHei-Bold, MicrosoftYaHei;
      font-weight: bold;
      color: #333333;
      line-height: 40px;
    }
    &-time {
      align-self: center;
      padding: 20px 0 30px;
      font-size: 14px;
      font-family: Helvetica;
      color: #999999;
      line-height: 17px;
    }
    .content {
      overflow: auto;
    }
  }
  &.mobile {
    .header {
      display: none;
    }
    .main {
      margin-top: 0;
      padding: 20px;
      width: 100%;
      &-title {
        align-self: start;
        font-size: 18px;
        font-family: SourceHanSansCN-Medium, SourceHanSansCN;
        font-weight: 500;
        color: #333333;
        line-height: 27px;
      }
      &-time {
        margin-bottom: 15px;
        align-self: start;
        width: 100%;
        border-bottom: 1px solid #ECEEF4;
        padding: 12px 0 16px;
        font-size: 14px;
        font-family: Gilroy-Regular, Gilroy;
        font-weight: 400;
        color: #999999;
        line-height: 16px;
      }
      .content {
        overflow: auto;
      }
    }
    .mt40 {
      margin-top: 20px;
    }
    .attachment {
      padding: 0 16px;
      height: 50px;
      background: #F9F9F9;
      img {
        margin-right: 0;
      }
      button span {
        display: none;
      }
      p {
        font-size: 14px;
        color: #666666;
        img {
          margin-right: 10px;
          height: 25px;
        }
      }
      &-container {
        border: 0;
        border-radius: 0;
        padding: 0;
      }
      &-title {
        border-top: 1px solid #ECEEF4;
        padding-top: 20px;
        color: #333333;
        font-size: 18px;
      }
    }
  }
}
.attachment {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 10px;
  &:last-of-type {
    margin-bottom: 0;
  }
  &-title {
    height: 22px;
    font-size: 14px;
    color: #666666;
    line-height: 22px;
  }
  &-container {
    margin-top: 16px;
    border: 1px dashed #cccccc;
    border-radius: 5px;
    padding: 20px;
  }
  img {
    margin-right: 10px;
    height: 16px;
    width: auto;
  }
  >p {
    flex: auto;
    display: flex;
    align-items: center;
    height: 22px;
    width: 0;
    font-size: 14px;
    color: #333333;
    img {
      flex: none;
      margin-right: 16px;
    }
    span {
      width: 0;
      flex: auto;
      white-space:nowrap;
      overflow:hidden;
      text-overflow:ellipsis;
    }
  }
  button {
    flex: none;
    display: flex;
    align-items: center;
    border: 0;
    background-color: transparent;
    font-size: 14px;
    color: #1D81EE;
    cursor: pointer;
  }
}
</style>
<template>
  <div class="boxWrap">
    <div class="box">
      <div class="boxflex">
        <div class="title" style="border: none">赛程管理</div>
        <div class="back" @click="onBack">
          <div class="backlogo"></div>
          <div>返回</div>
        </div>
      </div>
      <div class="detail">
        <div class="chunk-wrap">
          <div class="chunk">
            <div>公开：</div>
            <el-switch :width="52" class="switch" v-model="open" :data-attr="switchState" @change="switchChange">
            </el-switch>
          </div>
          <div class="chunk">
            <div class="chunk-text">赛程日期：</div>
            <el-date-picker v-model="time1" type="daterange" range-separator="~" start-placeholder="开始日期"
              end-placeholder="结束日期" value-format="yyyy-MM-dd" :clearable="false" />
          </div>
          <div class="chunk">
            <el-button class="chunk-button" @click="synPopShow">同步赛程</el-button>
          </div>
        </div>
        <div class="chunk-wrap">
          <button class="chunk-button import" @click="dialogImport = true">
            <img src="@/assets/common/icon_import.png" alt="">导入赛程
          </button>
          <button class="chunk-button message" @click="dialogLetterData.value = true">
            <img src="@/assets/eventAgent/icon_message.png" alt="">短信通知
          </button>
          <button class="chunk-button add" @click="addEvent">
            <img src="@/assets/eventManage/add.png" alt="">
            <i icon="el-icon-circle-plus-outline"></i>新增
          </button>
        </div>
      </div>
    </div>
    <!-- 列表 -->
    <timeTable v-model="tableData" @editContest="edit" @deleteContest="deleteItem"></timeTable>
    <div v-if="count" class="page">
      <div>共{{ count }}个，每页{{ limit }}条数据</div>
      <div>
        <el-pagination background hide-on-single-page @current-change="handleCurrentChange" layout="prev, pager, next"
          :total="count">
        </el-pagination>
      </div>
    </div>
    <!-- 数据格式发生错误 -->
    <dialogBox :popup.sync="popup" :type="dialogType" @cancelOrConfirm="cancelOrConfirm">
      <div class="dialogBox-content">{{ dialogMessage }}</div>
    </dialogBox>

    <!-- 同步二次弹框 -->
    <dialogBox :popup.sync="synPop" :type="synType" :title="synTitle" @cancelOrConfirm="synChange">
      <div class="dialogBox-content">是否进行同步赛程？</div>
    </dialogBox>



    <!-- 二次弹框 -->
    <dialogBox :popup.sync="tipShow" :title="tipTitle" :type="tipDialogType" @cancelOrConfirm="tipChange">
      <div class="dialogBox-content">{{ tipMessage }}</div>
    </dialogBox>
    <!-- 新增赛程 -->
    <dialogBox :popup="dialogAdd" :title="dialogTitle" :type="dialogType" width="40%" top="10vh"
      @cancelOrConfirm='cancelOrConfirm'>
      <div class="dialogBox-center" v-if="dialogAdd">
        <div class="dialogBox-contentList">
          <span>日期：</span>
          <el-date-picker v-model="add.date" type="date" placeholder="选择日期" :clearable="false">
          </el-date-picker>
        </div>
        <div class="dialogBox-contentList">
          <span>时间：</span>
          <el-time-select v-model="add.time" :picker-options="timeOptions" placeholder="选择时间">
          </el-time-select>
        </div>
        <div class="dialogBox-contentList">
          <span>星期：</span>
          <el-input v-model="add.week" disabled placeholder="-" size="small"></el-input>
        </div>
        <div class="dialogBox-contentList">
          <span>赛事阶段：</span>
          <el-input v-model="add.gameStage" placeholder="-" size="small"></el-input>
        </div>
        <div class="dialogBox-contentList">
          <span>赛事进度：</span>
          <el-input v-model="add.weekNum" placeholder="-" size="small"></el-input>
        </div>
        <div class="dialogBox-contentList">
          <span>队伍一：</span>
          <el-input v-model="add.team1" placeholder="-" size="small"></el-input>
        </div>
        <div class="dialogBox-contentList">
          <span>队伍二：</span>
          <el-input v-model="add.team2" placeholder="-" size="small"></el-input>
        </div>
        <div class="dialogBox-contentList">
          <span>城市：</span>
          <el-select v-model="add.city" size="small" placeholder="请选择城市">
            <el-option v-for="item in cityList" :key="item.city" :label="item.city" :value="item.city">
            </el-option>
          </el-select>
          <!-- <area-select
            :level="1"
            type="text"
            placeholder="请选择地区"
            v-model="add.city"
            :data="pcaa"
          ></area-select> -->
        </div>
        <div class="dialogBox-contentList">
          <span>BO：</span>
          <el-input v-model="add.bo" placeholder="请输入BO数" size="small"></el-input>
        </div>
      </div>
    </dialogBox>
    <!-- 导入赛程 -->
    <dialogBox :popup="dialogImport" title="赛程导入" width="40%" top="10vh" :limit="1" @cancelOrConfirm="closeSubmit">
      <div v-if="dialogImport" class="dialogBox-content" style="width: 80%">
        <el-input placeholder="请输入内容" v-model="fileName" disabled>
          <template slot="append">
            <el-upload ref="import" class="upload-demo" v-bind="uploadData">
              <el-button size="small" type="primary">点击上传</el-button>
            </el-upload>
          </template>
        </el-input>
      </div>
    </dialogBox>
    <!-- 短信通知 -->
    <dialogBox :popup="dialogLetterData.value" title="短信通知" top="10vh" width="600px" @cancelOrConfirm="closeLetterDialog">
      <div style="padding: 20px 20px 0 20px;">
        <div class="chunk" style="padding: 0;">
          <div class="chunk-text">赛程日期：</div>
          <el-date-picker v-model="time2" type="daterange" range-separator="~" start-placeholder="开始日期"
            end-placeholder="结束日期" value-format="yyyy-MM-dd" @change="loadLetterData" :clearable="false" />
        </div>
        <el-table :data="dialogLetterData.tableData" height="400">
          <el-table-column prop="dateTime" label="日期" align="center">
          </el-table-column>
          <el-table-column prop="name" label="队伍" align="center">
            <template slot-scope="scope">
              <span style="color: #333333; font-weight: bold; font-size: 16px">{{ scope.row.teamA }}</span>
              <span style="color: #999999; margin: 0 10px; font-size: 12px;">v.s</span>
              <span style="color: #333333; font-weight: bold; font-size: 16px">{{ scope.row.teamB }}</span>
            </template>
          </el-table-column>
        </el-table>
      </div>
    </dialogBox>
  </div>
</template>
<script>
import dialogBox from "../../components/eventManage/dialog.vue";
import timeTable from "../../components/timeTable/index.vue";
import * as api_account from "../../api/account";
import {area} from "@/utils/area-data";
export default {
  name: "eventAgent",
  components: {
    dialogBox,
    timeTable
  },
  data() {
    return {
      pcaa: area,
      open: true,
      switchState: "On",
      time1: [],
      tipShow: false,
      tipDialogType: "",
      tipMessage: "",
      tipTitle: "温馨提示！",
      count: 0,
      limit: 10,
      currPage: 1,
      contestTypeId: '',
      contestId: '',
      listDemo: [],
      canEditFlag: 1,//能否编辑裁判
      tableData: [],
      popup: false, //数据格式错误提示弹窗
      dialogType: "", //弹窗类型
      dialogMessage: "", //弹窗内容
      dialogAdd: false, //新增弹窗
      dialogTitle: "", //新增弹窗标题
      add: {
        date: "2022-02-02",
        time: "11:45",
        week: "1",
        weekNum: "2",
        team1: "",
        team2: "",
        city: [],
        bo: "",
        gameStage: "",
      },
      timeOptions: {
        start: "07:00",
        step: "00:15",
        end: "23:30",
      },
      contestScheduleId: "",
      isPublish: 0,//1公开，0不公开
      currPermission: false,
      synPop: false,
      synType: "syn",
      synTitle: "提示",
      dialogImport: false,
      // contestTypeId:""
      fileName: "",
      cityList: [],
      addCity: "",
      time2: [],
      dialogLetterData: {
        // 短信通知弹窗数据
        value: false, // 弹窗状态
        tableData: [], // 列表数据
      }
    };
  },
  computed: {
    uploadData() {
      return {
        action: process.env.VUE_APP_API_BASE_URL + "/file/upload",
        headers: {
          authorization: this.$store.getters.authorization
        },
        data: {
          userId: this.$store.getters.userInfo.id,
          contestId: this.contestId
        },
        name: "file",
        multiple: false,
        "show-file-list": false,
        "auto-upload": false,
        accept: ".xlsx",
        "on-change": res => {
          this.fileName = res.name;
        },
        "on-success": this.uploadSuccess,
        "on-error": err => {
          console.log("上传失败", err);
        }
      };
    }
  },
  mounted() {
    this.currPermission = this.$route.query.currPermission;
    this.contestTypeId = parseInt(this.$route.query.contestTypeId);
    this.contestId = parseInt(this.$route.query.contestId);
    this.isPublish = this.$route.query.publish;
    this.open = this.isPublish == 1 ? true : false;
    this.getScheduleList();
    this.getCityList();
  },
  watch: {
    dialogImport(nowVal) {
      if (!nowVal) {
        this.fileName = "";
      }
    },
    "dialogLetterData.value"(nowVal) {
      if (nowVal) {
        this.time2 = this.time1;
        this.loadLetterData();
      }
    },
    "add.bo"() {
      this.add.bo = this.add.bo.replace(/\D/g, "");
    }
  },
  methods: {
    //获取城市列表
    getCityList() {
      api_account.cityList().then(res => {
        console.log("城市列表:" + res);
        if (res.success) {
          this.cityList = res.data.list;

        }
      });
    },
    uploadSuccess(res) {
      if (res.success) {
        this.$message.success("上传成功");
        this.dialogImport = false;
        this.getScheduleList();
      } else {
        this.$message.error(res.errMsg);
      }
    },
    onBack() {
      this.$router.push({
        path: "/event",
        query: {
          saveEvent: this.$route.query.saveEvent,
          saveEventname: this.$route.query.saveEventname,
          saveState: this.$route.query.saveState,
        },
      });
    },
    synPopShow() {
      if (!this.time1.length) {
        console.log("时间");
        this.$notify.info({
          title: '消息',
          message: '请先选择时间！'
        });
        return;
      }
      this.synPop = true;
    },
    synChange(e) {
      if (e == "confirm") {
        this.synSchedule();
      }
    },
    handleCurrentChange(val) {
      console.log(`当前页: ${val}`);
      this.currPage = val;
      this.getScheduleList();
    },
    switchChange(e) {

      e ? this.switchState = "On" : this.switchState = "Off";
      console.log("状态:" + e);
      this.isPublish = e ? 1 : 0;
      this.tipMessage = "确认" + (e ? "公开" : "不公开") + "赛程？";
      this.dialogType = "publish";
      this.tipShow = true;
    },
    //弹窗确认
    cancelOrConfirm(e) {
      if (e == "confirm") {
        // 进行参数校验
        for (let key in this.add) {
          if (key == "week") {
            continue;
          }
          if (key == "city" && !this.add[key].length || !this.add[key]) {
            this.$message({
              message: '请检查表单是否填写完整？',
              type: 'warning'
            });
            return;
          }
        }
        // 校验通过二次弹窗
        if (this.dialogType == "editMatch") {
          this.tipMessage = "确认修改赛程？";
        } else {
          this.tipMessage = "确认新增赛程？";
        }
        this.$confirm(this.tipMessage)
          .then(() => {
            this.tipChange("confirm");
            this.dialogAdd = false;
          });
      } else {
        this.dialogAdd = false;
      }
    },
    tipChange(e) {
      if (e == "confirm") {
        if (this.dialogType == "editMatch") {
          this.editContest();
        } else if (this.dialogType == "addMatch") {
          this.addContest();
        } else {
          this.openContest();
        }
      } else {
        if (this.dialogType == "publish") {
          this.open = this.open ? false : true;
          this.isPublish = this.isPublish == 1 ? 0 : 1;
          this.switchState = this.isPublish == 1 ? "Off" : "On";
        }
      }
      this.tipShow = false;
    },
    resetAdd() {
      for (let key in this.add) {
        this.add[key] = "";
      }
      this.add.city = [];
    },
    //新增弹窗
    addEvent() {
      if (!this.currPermission) {
        return;
      }
      this.resetAdd();
      this.dialogType = "addMatch";
      this.dialogTitle = "新增赛程";
      this.dialogAdd = true;
    },
    edit(item, dayData) {
      if (!this.currPermission) {
        return;
      }
      this.contestScheduleId = item.contestScheduleId;
      this.add.date = dayData.gameDate;
      this.add.time = item.gameTime;
      this.add.week = dayData.dayOfWeekText;
      this.add.weekNum = item.weekOfMonth;
      this.add.team1 = item.teamA;
      this.add.team2 = item.teamB;
      this.add.city = item.city;
      this.add.bo = item.bo;
      this.add.gameStage = item.gameStage;
      // this.add.city.push(item.province,item.city);
      this.dialogType = "editMatch";
      this.dialogTitle = "编辑赛程";
      this.dialogAdd = true;
    },

    //删除赛程
    deleteItem(item) {
      debugger;
      console.log('====================================');
      console.log(item);
      console.log('====================================');
      this.$confirm("确认删除赛程？").then(() => {
        api_account.deleteContestSchedule({
          contestScheduleId: item.contestScheduleId
        }).then(res => {
          if (res.success) {
            this.$message({
              message: "删除赛程成功",
              type: "success",
            });
            this.getScheduleList();
          }
        });
      }).catch(() => {

      });
    },
    closeLetterDialog(type) {
      if (type == "cancel") {
        this.dialogLetterData.value = false;
      } else {
        if (!this.time2.length) {
          this.$message.error("请输入起止时间");
          return;
        }
        // 走发短信接口
        api_account.scheduleBatchSendSms({
          contestTypeId: this.contestTypeId,
          contestId: this.contestId,
          gameDateStart: this.time2[0],
          gameDateEnd: this.time2[1],
        }).then(res => {
          if (res.success) {
            this.dialogLetterData.value = false;
            this.$message.success("发送成功");
          }
        });
      }
    },
    loadLetterData() {
      console.log(this.time2);
      api_account.getSearchSchedule({
        page: 1,
        pageNum: 100,
        contestTypeId: this.contestTypeId,
        contestId: this.contestId,
        isPublish: this.isPublish,
        gameDateEnd: this.time2 && this.time2[1] || '',
        gameDateStart: this.time2 && this.time2[0] || "",
      }).then((res) => {
        console.log("返回结果:" + res);
        if (!res.success) {
          return;
        }
        this.dialogLetterData.tableData = res.data.rows.reduce((res, val) => {
          val.contest.forEach(d => {
            d.dateTime = `${val.gameDate} ${d.gameTime}`;
          });
          res.push(...val.contest);
          return res;
        }, []);
      });
    },
    getScheduleList() {
      api_account.getSearchSchedule({
        page: this.currPage,
        pageNum: this.limit,
        contestTypeId: this.contestTypeId,
        contestId: this.contestId,
        gameDateStart: this.time1 && this.time1[0] || "",
        gameDateEnd: this.time1 && this.time1[1] || "",
        isPublish: this.isPublish,
      }).then((res) => {
        console.log("返回结果:" + res);
        if (!res.success) {
          return;
        }

        this.count = res.data.count;
        this.canEditFlag = res.data.canEditFlag;
        const temp = ["", "MAINREFEREE", "ONREFEREE", "OFFREFEREE", "assistantMainReferee", "assistantMainReferee"];
        const position = this.getPositonByContest();
        this.tableData = res.data.rows.map(item => ({
          ...item,
          dayOfWeekText: this.getWeekByNum(item.dayOfWeek),
          contest: item.contest.map(item1 => ({
            ...item1,
            referee: position.map(d => ({
              ...d,
              ...item1.refereeSchedule[temp[d.value]]
            }))
          })),
        }));
      });
    },
    getPositonByContest() {
      // lpl(1): 主裁判， 场上裁判， 场下裁判
      // ldl(2): 主裁判， 场上裁判， 场下裁判, 场下裁判 Leader, 助理主裁判
      // WRL(3): 主裁判， 场上裁判， 场下裁判, 助理裁判
      // val(4): 主裁判， 场上裁判， 场下裁判
      let auth = {
        1: [1, 2, 3],
        2: [1, 2, 3, 4, 5],
        3: [1, 2, 3, 5],
        4: [1, 2, 3]
      };
      let positionValueList = auth[this.contestTypeId];
      return this.$dictionary.position.filter(d => positionValueList.some(d1 => d1 == d.value));
    },
    getWeekByNum(data) {
      if (data == 1) {
        return "星期一";
      } else if (data == 2) {
        return "星期二";
      } else if (data == 3) {
        return "星期三";
      } else if (data == 4) {
        return "星期四";
      } else if (data == 5) {
        return "星期五";
      } else if (data == 6) {
        return "星期六";
      } else if (data == 0) {
        return "星期日";
      }
    },
    addContest() {
      api_account
        .createMatchBySchedule({
          contestTypeId: this.contestTypeId,
          contestId: this.contestId,
          gameDate: this.$moment(this.add.date).format("yyyy-MM-DD"),
          gameTime: this.add.time,
          gameStage: this.add.gameStage,
          weekOfMonth: this.add.weekNum,
          // dayOfWeek:this.add.week,
          teamA: this.add.team1,
          teamB: this.add.team2,
          // province:this.add.city[0],
          city: this.add.city,
          bo: this.add.bo
        })
        .then((res) => {
          console.log("返回结果:" + res);
          if (res.success) {
            this.$message({
              message: "新增赛程成功",
              type: "success",
            });
            this.getScheduleList();
          }

        });
    },
    editContest() {
      api_account
        .updateSchedule({
          contestScheduleId: this.contestScheduleId,
          // contestId:this.contestId,
          gameDate: this.$moment(this.add.date).format("yyyy-MM-DD"),
          gameTime: this.add.time,
          gameStage: this.add.gameStage,
          weekOfMonth: this.add.weekNum,
          // dayOfWeek:this.add.week,
          teamA: this.add.team1,
          teamB: this.add.team2,
          // province:this.add.city[0],
          city: this.add.city,
          bo: this.add.bo
        })
        .then((res) => {
          console.log("返回结果:" + res);
          if (res.success) {
            this.$message({
              message: "赛程修改成功",
              type: "success",
            });
            this.getScheduleList();
          }

        });
    },
    openContest() {
      api_account.openContest({
        contestId: this.contestId,
        isPublish: this.isPublish,
      }).then((res) => {
        console.log("返回结果:" + res);
      });
    },
    //同步赛程
    synSchedule() {
      api_account.scheduleSync({
        contestId: this.contestId,
        startDate: this.time1[0],
        finishDate: this.time1[1],
      }).then((res) => {
        console.log("返回结果:" + res);
        if (res.success) {
          this.getScheduleList();
        }
      });
    },
    closeSubmit(e) {
      if (e == "confirm") {
        this.$refs.import.submit();
      } else {
        this.dialogImport = false;
      }
    },
  },
};
</script>
<style lang="less" scoped>
.dialogBox-contentList /deep/ .el-input,
.dialogBox-contentList /deep/ .el-select {
  height: 40px;
  width: 224px;
  display: flex;
  align-items: center;
}

.dialogBox-contentList /deep/ .area-select {
  margin-left: 0px;
}

.dialogBox-contentList span {
  flex: none;
  width: 120px;
}

.dialogBox-content {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 30px;
}

.detail {
  padding: 9px 20px 20px 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.area-select-wrap {
  cursor: not-allowed !important;
  border-color: #e4e7ed !important;
  color: #c0c4cc !important;
}

.dialogBox-center {
  border-bottom: 1px solid #dde1e6;
  padding: 20px;
}

.dialogBox-content {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 30px;
}

.chunk-wrap {
  display: flex;
  margin-top: 10px;
}

.chunk {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-family: MicrosoftYaHei;
  color: #333333;
  padding-left: 20px;
}

.chunk-button {
  padding: 0 10px;
  margin-left: 10px;
  min-width: 90px;
  height: 40px;
  font-size: 16px;
  color: #ffffff;
  border-radius: 4px;
  cursor: pointer;

  img {
    margin-top: 2px;
    margin-right: 5px;
    height: 14px;
    width: 14px;
  }

  &.import {
    background: #00AFFF;
  }

  &.message {
    background: #44D7B6;
  }

  &.add {
    background: #20BD20;
  }
}

.boxflex {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-right: 20px;
  border-bottom: 1px solid #dde1e6;
}

.backlogo {
  width: 16px;
  height: 13px;
  margin-top: 3px;
  margin-right: 3px;
  background-image: url("../../assets/eventAgent/back.png");
}

.back {
  display: flex;
  font-family: MicrosoftYaHei;
  color: #1d81ee;
  font-size: 14px;
  cursor: pointer;
}

.detail /deep/.el-switch::after {
  content: attr(data-attr);
  color: #ffffff;
  position: absolute;
  font-size: 12px;
  right: 20px;
}

.chunk-wrap /deep/ .el-button--primary {
  display: flex;
  align-items: center;
  justify-content: center;
}

.chunk /deep/ .el-button {
  width: 90px;
  background: #1d81ee;
  color: #ffffff;
  display: flex;
  align-items: center;
  justify-content: center;
}

.page {
  display: flex;
  font-size: 16px;
  font-family: MicrosoftYaHei;
  color: #999999;
  padding: 20px;
  align-items: center;
  justify-content: space-between;
}
</style>
"use strict";

const {
  getIdentity,
  getUserInfo,
  getPermission,
} = require("./apiBase");
const {
  Op
} = require("sequelize");
const {
  addUserMessage
} = require("./userMessage");
const {
  checkUserPermission
} = require("./check/userPermission");
const {
  isoDateFormat
} = require("../lib/date");
const {
  syncUserContestTypePermissionTypeIdentityType
} = require("./user/updateUser");
const config = require("../config/config");
const errMsg = require('../config/errMsg');
const {retCodeMsgMap} = require("../config/retCode");
const {checkUserForbidden,checkUserFreeze} = require("./check/userRefereeStatus");
const {checkUserRefereeNumberUnique} = require("./check/userRefereeNumber");

/**
 * 账号列表
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|{list: *}>}
 */
exports.list = async (server, params) => {
  let {userId, contestTypeId, position, permissionTypeId, status, name, page, pageNum} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'account-manage');

  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);
  const User = DB.getModel("user");
  const UserPermission = DB.getModel("userPermission");
  const UserIdentity = DB.getModel("userIdentity");
  const SysIdentity = DB.getModel("sysIdentity");
  const SysPermission = DB.getModel("sysPermission");
  User.hasMany(UserPermission, {
    foreignKey: "userId",
    sourceKey: "id"
  }); // 用户权限
  User.hasMany(UserIdentity, {
    foreignKey: "userId",
    sourceKey: "id"
  }); // 用户身份
  UserIdentity.hasOne(SysIdentity, {
    foreignKey: "id",
    sourceKey: "identityId"
  });
  UserPermission.hasOne(SysPermission, {
    foreignKey: "id",
    sourceKey: "permissionId"
  });
  // 默认所有的位置
  let positionIds = config.refereePosition.all;
  let positionFlag = false;

  // 默认所有的赛事类型
  let contestTypeIds = config.sysContestType.all;
  if (contestTypeId) {
    contestTypeIds = contestTypeId.split(',');
    positionFlag = true;
  }

  if (position) {
    positionIds = position.toString().split(',');
    positionFlag = true;
  }

  // 默认所有的权限类型
  let permissionIds = config.sysPermissionType.all;
  let permissionFlag = false;
  if (permissionTypeId) {
    permissionIds = permissionTypeId.toString().split(',');
    permissionFlag = true;
  }
  // 用户名是否选择了 模糊查询
  let userWhere = {
    [Op.and]: [{
      isDelete: 0,
      status: {
        [Op.ne]: 0
      }
    }]
  };
  if (status) {
    let statusArr = [];
    switch (status) {
      case 1:
        statusArr = config.userStatus.inReview;// 审核中
        break;
      case 2:
        statusArr = config.userStatus.passed;// 已通过
        break;
      case 3:
        statusArr = config.userStatus.fail;// 未通过
        break;
    }
    if (statusArr) {
      userWhere[Op.and].push({
        status: statusArr
      });
    }
  }
  if (name) {
    userWhere[Op.and].push({
      name: {
        [Op.like]: '%' + name + '%'
      }
    });
  }
  // 获取所有符合条件的用户ID
  let allList = await User.findAll({
    order: [
      ['updatedAt', 'desc']
    ],
    distinct: true,
    attributes: [
      ['id', 'userId']
    ],
    where: userWhere,
    include: [{
      model: UserIdentity,
      required: positionFlag,
      where: {
        isDelete: 0
      },
      include: [{
        model: SysIdentity,
        where: {
          isDelete: 0,
          contestTypeId: contestTypeIds,
          position: positionIds
        }
      }]
    }, // 身份
      {
        model: UserPermission,
        required: permissionFlag,
        where: {
          isDelete: 0
        },
        include: [{
          model: SysPermission,
          where: {
            isDelete: 0,
            contestTypeId: contestTypeIds,
            permissionTypeId: permissionIds
          }
        }]
      } // 权限
    ]
  });
  let allUserIdArr = []; // 获取所有符合要求的用户ID
  allList.map(data => {
    let item = data.dataValues;
    allUserIdArr.push(item.userId);
  });
  let limit = pageNum;
  let offset = (page - 1) * pageNum;
  let list = {count: allUserIdArr.length};
  allUserIdArr.push(0);// 防止符合条件的用户ID为空，导致执行下面的SQL语句出错
  let sql = "select id userId, name, mobile, email, status, forbidden, updatedAt " +
    " from user where id in (" + allUserIdArr.join(',') + ") " +
    " order by(case when status=1 then 1 when status=2 then 2 when status=6 then 3 else 4 end), updatedAt desc" +
    " limit " + offset + "," + limit;
  let [res] = await DB.sequelize.query(sql);
  if (res.length > 0) {
    let tmp = [];
    let userIdArr = []; // 所有的用户ID
    res.map(item => {
      userIdArr.push(item.userId);
      tmp.push({
        userId: item.userId,
        name: item.name,
        mobile: item.mobile,
        email: item.email,
        status: item.status,
        forbidden: item.forbidden,
        updatedAt: isoDateFormat(item.updatedAt),
        identity: [],
        permission: [],
      });
    });
    // 获取用户的身份
    let identityArr = await UserIdentity.findAll({
      attributes: ['userId'],
      where: {
        userId: userIdArr,
        isDelete: 0
      },
      include: {
        model: SysIdentity,
        attributes: [
          ['name', 'identityName']
        ]
      },
      raw: true
    });
    identityArr.map(item => {
      tmp.map(item2 => {
        if (item.userId === item2.userId) {
          item2.identity.push(item['sysIdentity.identityName']);
        }
      });
    });
    // 获取用户的权限
    let permissionArr = await UserPermission.findAll({
      attributes: ['userId'],
      where: {
        userId: userIdArr,
        isDelete: 0
      },
      include: {
        model: SysPermission,
        attributes: [
          ['name', 'permissionName']
        ],
      },
      raw: true
    });
    permissionArr.map(item => {
      tmp.map(item2 => {
        if (item.userId === item2.userId) {
          item2.permission.push(item['sysPermission.permissionName']);
        }
      });
    });
    // 身份、权限转换为字符串
    tmp.map(item => {
      item.identity = item.identity.join('、');
      item.permission = item.permission.join('、');
    });
    list.rows = tmp;
  }
  return {list};
};

/**
 * 账号详情
 * @param server
 * @param params
 * @returns {Promise<{userInfo: *, userPermission: {permissionTypeId: number, permissionList: *[], permissionTypeName: string}[], userIdentity: *[]}>}
 */
exports.detail = async (server, params) => {
  let {userId, accountId} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, userId);//检查当前登录用户是否被封禁
  let userIdentity = await getIdentity(DB, accountId);
  let userPermission = await getPermission(DB, accountId);
  let {userInfo, userRefereeContestHistory} = await getUserInfo(DB, accountId, ['userRefereeContestHistory']);
  return {
    userInfo,
    userRefereeContestHistory,
    userIdentity,
    userPermission
  };
};

/**
 * 账号审核
 * @param {*} server
 * @param {*} params
 * @returns
 */
exports.auth = async (server, params) => {
  let {userId, accountId, status, permissionId, rejectReason} = params; // 接收参数
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  const User = DB.getModel("user");
  const UserPermission = DB.getModel("userPermission");
  const UserIdentity = DB.getModel("userIdentity");
  const UserRefereeContestHistory = DB.getModel("userRefereeContestHistory");
  const SysIdentity = DB.getModel("sysIdentity");
  UserIdentity.hasOne(SysIdentity, {
    foreignKey: 'id',
    sourceKey: 'identityId'
  });
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'account-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);

  let userInfo = await User.findOne({
    attributes: [
      ["status", "statusOld"], ["refereeStatus", "refereeStatusOld"]
    ],
    where: {
      id: accountId,
      isDelete: 0
    },
  });
  if (!userInfo) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[5000]); // 账号异常
  }
  userInfo = userInfo.dataValues;
  let userUpdateDoc = {}; // 用户需要修改的信息
  let permissionIdArr = []; // 认证后用户所有的权限ID
  if (permissionId) {
    permissionIdArr = permissionId.split(",");
  }
  if (status === 1 && permissionIdArr.length === 0) {
    throw errMsg.BadRequest.inherit("审核通过时，必须提供权限");
  }

  let userAuthLogAddDoc = { // 用户认证审核日志添加的信息
    userId: accountId, firstAuth: 1, isApproved: 1
  };
  if (userInfo['statusOld'] !== 1) {
    userAuthLogAddDoc.firstAuth = 0;// 非首次认证
  }
  try {
    await DB.sequelize.transaction(async (t) => {
      // 更新用户信息
      let statusNew = 3; // 默认审核通过
      let forbiddenNew = 0; // 默认解除封禁
      let refereeStatusNew = userInfo["refereeStatusOld"];// 默认裁判状态不变
      if (userInfo["refereeStatusOld"] === config.refereeStatus.depart) {// 原来的裁判状态是【离职】
        refereeStatusNew = config.refereeStatus.active;// 审核通过时，需将裁判状态改为【在职】
      }
      if (status === 0) {
        // 不通过
        userUpdateDoc.permissionTypeId = 0;
        switch (userInfo["statusOld"]) {
          case 1:
            statusNew = 4;
            break; // 首次认证未通过
          case 2:
            statusNew = 5;
            break; // 再次修改审核未通过
          case 6:
            statusNew = 7;
            forbiddenNew = 1; // 处于封禁状态
            break; // 封禁下认证未通过
          default:
            statusNew = userInfo.status;
        }
        // 不通过时，裁判状态不变
        refereeStatusNew = userInfo["refereeStatusOld"];
        if (!rejectReason) {
          throw errMsg.BadRequest.inherit("不通过时, 必须提供拒绝理由");
        }
        userAuthLogAddDoc.isApproved = 0;
        userAuthLogAddDoc.rejectReason = rejectReason;
      }
      userUpdateDoc.status = statusNew;
      userUpdateDoc.forbidden = forbiddenNew;
      userUpdateDoc.refereeStatus = refereeStatusNew;
      await User.update(userUpdateDoc, {
        where: {
          id: accountId
        },
        transaction: t,
      });

      // 审核后的状态是【再次修改审核未通过】时，不删除老的权限
      if (statusNew !== 5) {
        // 删除老的用户权限
        await UserPermission.update({
          isDelete: 1
        }, {
          where: {
            userId: accountId
          },
          transaction: t,
        });
      } else {
        // 审核后的状态是【再次修改审核未通过】时，恢复用户原来的信息
        let {"userInfo": userInfoOld} = await getUserInfo(DB, accountId, []);
        if (userInfoOld) {
          let originalUserInfo = JSON.parse(userInfoOld.originalUserInfo);
          if (originalUserInfo) {
            // 恢复 user 表内的用户信息
            await User.update({
              name: originalUserInfo.name,
              city: originalUserInfo.city,
              image: originalUserInfo.image,
              refereeNumber: originalUserInfo.refereeNumber
            }, {
              where: {
                id: accountId
              },
              transaction: t,
            });

            // 删除当前的用户身份
            await UserIdentity.update({
              isDelete: 1
            }, {
              where: {
                userId: accountId
              },
              transaction: t,
            });
            // 恢复老的用户身份
            let identityIdInsertArr = [];
            if (originalUserInfo.identityId){
              let identityIdArr = originalUserInfo.identityId.split(",");
              identityIdArr.forEach((identityId) => {
                identityIdInsertArr.push({
                  userId: accountId,
                  identityId: identityId,
                  isDelete: 0
                });
              })
            }
            if (identityIdInsertArr.length > 0) {
              await UserIdentity.bulkCreate(identityIdInsertArr, {
                updateOnDuplicate: ['userId', 'identityId', 'isDelete'],
                transaction: t
              });
            }

            // 删除当前的用户执裁经历
            await UserRefereeContestHistory.update({
              isDelete: 1
            }, {
              where: {
                userId: accountId
              },
              transaction: t,
            });
            // 恢复老的用户执裁经历
            let contestHistoryIdInsertArr = [];
            if (originalUserInfo.contestHistoryId){
              let contestHistoryIdArr = originalUserInfo.contestHistoryId.split(",");
              contestHistoryIdArr.forEach((contestHistoryId) => {
                contestHistoryIdInsertArr.push({
                  userId: accountId,
                  contestHistoryId: contestHistoryId
                });
              })
            }
            if (contestHistoryIdInsertArr.length > 0) {
              await UserRefereeContestHistory.bulkCreate(contestHistoryIdInsertArr, {
                transaction: t
              });
            }



          }
        }
      }

      // 添加新的用户权限
      if (status === 1 && permissionIdArr) {
        let insertArr = [];
        permissionIdArr.forEach(function (permissionId) {
          insertArr.push({
            userId: accountId,
            permissionId: permissionId,
            isDelete: 0
          });
        });
        if (insertArr.length > 0) {
          await UserPermission.bulkCreate(insertArr, {
            updateOnDuplicate: ['userId', 'permissionId', 'isDelete'],
            transaction: t
          });
        }
      }

      // 添加用户认证审核日志
      await DB.getModel("userAuthLog").create(userAuthLogAddDoc);
    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  // 添加消息通知
  let messageType = 0;
  let content = {};
  if (status === 1) {
    // 审核通过
    switch (userInfo["statusOld"]) {
      case 1: // 首次认证
        messageType = 100;
        break;
      case 2: // 修改个人信息
      case 6: // 封禁状态下
        messageType = 102;
        break;
    }
  } else {
    // 审核未通过
    switch (userInfo["statusOld"]) {
      case 2: // 修改个人信息
      case 6: // 封禁状态下
        messageType = 103;
        content.rejectReason = rejectReason;
        break;
    }
  }
  if (messageType > 0) {
    let data = {
      userId: accountId,
      type: messageType,
      content: content
    };
    await addUserMessage(DB, data);
  }
  await syncUserContestTypePermissionTypeIdentityType(DB, accountId);
  return true;
};


/**
 * 账号编辑
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.edit = async (server, params) => {
  let {
    userId,
    accountId,
    province,
    city,
    identityId,
    permissionId,
    refereeNumber
  } = params; // 接收参数
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  await checkUserRefereeNumberUnique(DB, accountId, refereeNumber);// 判断裁判编号是否已经存在
  const User = DB.getModel('user');
  const UserPermission = DB.getModel('userPermission');
  const UserIdentity = DB.getModel('userIdentity');
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'account-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);

  let userInfo = await User.findOne({
    attributes: [
      ['status', 'statusOld']
    ],
    where: {
      id: accountId,
      'isDelete': 0
    }
  });
  if (!userInfo) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[5000]); // 账号异常
  }
  let userUpdateDoc = {
    province,
    refereeNumber,
    city
  }; // 用户需要修改的信息
  let permissionIdArr = []; // 编辑后的权限ID
  if (permissionId) {
    permissionIdArr = permissionId.split(',');
  }
  let identityIdArr = []; // 编辑后的身份ID
  if (identityId) {
    identityIdArr = identityId.split(',');
  }
  // 开启事务
  try {
    await DB.sequelize.transaction(async (t) => {
      // 更新用户信息
      await User.update(
        userUpdateDoc, {
          where: {
            id: accountId
          },
          transaction: t
        }
      );

      // 删除老的用户权限
      await UserPermission.update({
        isDelete: 1
      }, {
        where: {
          userId: accountId
        },
        transaction: t,
      });

      // 添加新的用户权限
      if (permissionIdArr) {
        let insertArr = [];
        permissionIdArr.forEach(function (permissionId) {
          insertArr.push({
            userId: accountId,
            permissionId: permissionId,
            isDelete: 0
          });
        });
        if (insertArr.length > 0) {
          await UserPermission.bulkCreate(insertArr, {
            updateOnDuplicate: ['userId', 'permissionId', 'isDelete'],
            transaction: t
          });
        }
      }

      // 删除老的用户身份
      await UserIdentity.update({
        isDelete: 1
      }, {
        where: {
          userId: accountId
        },
        transaction: t,
      });

      // 添加新的用户身份
      if (identityIdArr) {
        let insertArr = [];
        identityIdArr.forEach(function (identityId) {
          insertArr.push({
            userId: accountId,
            identityId: identityId,
            isDelete: 0
          });
        });
        if (insertArr.length > 0) {
          await UserIdentity.bulkCreate(insertArr, {
            updateOnDuplicate: ['userId', 'identityId', 'isDelete'],
            transaction: t
          });
        }
      }
    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  await syncUserContestTypePermissionTypeIdentityType(DB, accountId);
  return true;
}

/**
 * 账号封禁
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.forbidden = async (server, params) => {
  let {
    userId,
    accountId
  } = params; // 接收参数
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结

  const User = DB.getModel('user');
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'account-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);

  let userInfo = await User.findOne({
    where: {
      id: accountId,
      'isDelete': 0
    }
  });
  if (!userInfo) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[5000]); // 账号异常
  }
  await User.update({
    forbidden: 1
  }, {
    where: {
      id: accountId
    }
  });

  return true;
}
"use strict";
const config = require("../config/config");
const moment = require("moment");
const {arrangeUserInfo} = require("./user/getUsers");

/**
 * 获取用户信息
 * @param DB
 * @param userId
 * @param returnKey 设置返回哪些信息
 * @returns {Promise<{userIdentityCurrent: *[], userInfo: *, isCOREREFEREE: number, rejectReason, userPermission: *[], unread: number, userIdentityFuture: *[], userRefereeContestHistory: *[]}>}
 */
exports.getUserInfo = async (DB, userId, returnKey = ['userIdentity', 'userPermission', 'unread', 'isCOREREFEREE', 'userRefereeContestHistory', 'rejectReason']) => {
  const User = DB.getModel("user");
  const UserMessage = DB.getModel("userMessage");
  const UserRefereeContestHistory = DB.getModel("userRefereeContestHistory");
  const ContestHistory = DB.getModel("contestHistory");
  UserRefereeContestHistory.hasMany(ContestHistory, {foreignKey: "id", sourceKey: "contestHistoryId"});
  // 获取用户信息
  let userInfo = await User.findByPk(userId);
  let userIdentityCurrent = [], // 用户的身份（当前有效的）
    userIdentityFuture = [], // 用户的身份（再次修改申请待审核的）
    userPermission = [], // 用户权限
    unread = 0, // 用户未读消息个数
    isCOREREFEREE = 1, // 判断用户是否是核心兼职权限
    userRefereeContestHistory = [], // 用户执裁经历
    rejectReason; // 首次认证拒绝理由

  if (userInfo) {
    // 用户状态: 0未认证 1首次认证待审核 2再次修改申请待审核 3已通过 4首次认证未通过 5再次修改审核未通过 6封禁下认证待审核 7封禁下认证未通过

    // 获取用户当前身份
    if (returnKey.includes('userIdentity')) {
      let sql1 =
        "select t.identityId, i.contestTypeId, i.name identityName, i.position " +
        "from userIdentity t " +
        "left join sysIdentity i on t.identityId=i.id " +
        "where t.userId='" +
        userInfo.id +
        "' and t.isDelete=0";
      let userIdentityCurrentSql = ""; // 当前有效的
      let userIdentityFutureSql = ""; // 再次修改申请待审核的
      switch (userInfo.status) {
        case 1: // 首次认证待审核，从userIdentity表获取身份信息
        case 4: // 首次认证未通过，从userIdentity表获取身份信息
        case 6: // 封禁下认证待审核，从userIdentity表获取身份信息
        case 7: // 封禁下认证未通过，从userIdentity表获取身份信息
          userIdentityCurrentSql = "";
          userIdentityFutureSql = sql1;
          break;
        case 3: // 已通过，从userIdentity表获取身份信息
          userIdentityCurrentSql = sql1;
          userIdentityFutureSql = "";
          break;
        case 2: // 再次修改申请待审核，从 user表 originalUserInfo 字段 获取身份信息
          if (userInfo.originalUserInfo) {
            let originalUserInfo = JSON.parse(userInfo.originalUserInfo);
            if (originalUserInfo) {
              let identityIdArr = [];
              originalUserInfo.identityId.split(",").forEach((identityId) => {
                if (identityId) {
                  identityIdArr.push(identityId);
                }
              });
              if (identityIdArr.length > 0) {
                userIdentityCurrentSql =
                  "select t.id identityId, t.contestTypeId, t.name identityName, t.position " +
                  "from sysIdentity t " +
                  "where t.id in(" +
                  identityIdArr.join(",") +
                  ") ";
              }
            }
          }
          userIdentityFutureSql = sql1;
          break;
        case 5: // 再次修改审核未通过
          userIdentityCurrentSql = sql1;
          userIdentityFutureSql = sql1;
          break;
      }
      if (userIdentityCurrentSql) {
        [userIdentityCurrent] = await DB.sequelize.query(userIdentityCurrentSql);
      }
      if (userIdentityFutureSql) {
        [userIdentityFuture] = await DB.sequelize.query(userIdentityFutureSql);
      }
    }

    // 获取用户权限
    if (returnKey.includes('userPermission')) {
      let userPermissionSql =
        "select t.permissionId, p.contestTypeId, p.permissionTypeId, p.name permissionName " +
        "from userPermission t " +
        "left join sysPermission p on t.permissionId=p.id " +
        "where t.userId='" + userInfo.id + "' and t.isDelete=0 ";
      [userPermission] = await DB.sequelize.query(userPermissionSql);
    }

    // 获取用户未读消息个数
    if (returnKey.includes('unread')) {
      unread = await UserMessage.count({
        where: {
          userId: userInfo.id,
          isRead: 0,
          isDelete: 0
        }
      });
    }

    // 判断用户是否是核心兼职权限
    if (returnKey.includes('isCOREREFEREE')) {
      userPermission.forEach((arr) => {
        if (isCOREREFEREE == 1 && arr.permissionTypeId != config.sysPermissionType.COREREFEREE) {
          isCOREREFEREE = 0;
        }
      });
    }

    // 用户执裁经历
    if (returnKey.includes('userRefereeContestHistory')) {
      let userRefereeContestHistoryList = await UserRefereeContestHistory.findAll({
        where: {userId: userInfo.id, isDelete: 0},
        include: {
          model: ContestHistory,
          where: {isDelete: 0},
          attributes: ["type", "year", "name"],
        },
        raw: true
      });
      userRefereeContestHistoryList.forEach((item) => {
        userRefereeContestHistory.push({
          contestHistoryId: item['contestHistoryId'],// 历史赛事ID
          type: item["contestHistories.type"],
          year: item['contestHistories.year'],// 历史赛事所属年份
          name: item['contestHistories.name']// 历史赛事名称
        });
      });
    }

    // 首次认证被拒绝的理由
    if (returnKey.includes('rejectReason')) {
      const authLog = await DB.getModel("userAuthLog").findOne({
        where: {userId: userInfo.id, firstAuth: 1, isApproved: 0, isDelete: 0},
        order: [['id', 'desc']],
        attributes: ['rejectReason']
      });
      if (authLog) {
        rejectReason = authLog.rejectReason;
      }
    }

  }

  // [用户基本信息, 用户当前有效的身份, 用户待审核的身份, 用户的权限]
  arrangeUserInfo(userInfo);
  return {
    userInfo,
    userIdentityCurrent,
    userIdentityFuture,
    userPermission,
    unread,
    isCOREREFEREE,
    userRefereeContestHistory,
    rejectReason
  };
};

/**
 * 获取身份信息列表
 * @param DB
 * @param userId
 * @returns {Promise<*[]>}
 */
exports.getIdentity = async (DB, userId = 0) => {
  let identitySelect = []; // 用户已有的身份
  if (userId > 0) {
    const UserIdentity = DB.getModel("userIdentity");
    identitySelect = await UserIdentity.findAll({
      attributes: ["identityId"],
      where: {
        userId,
        isDelete: 0
      },
    });
  }
  const SysIdentity = DB.getModel("sysIdentity");
  let list = await SysIdentity.findAll({
    attributes: [
      ["id", "identityId"],
      "contestTypeId",
      ["name", "identityName"],
    ],
  });
  let contest1 = {
    contestTypeId: 1,
    contestTypeName: config.sysContestType[1],
    identityList: []
  };
  let contest2 = {
    contestTypeId: 2,
    contestTypeName: config.sysContestType[2],
    identityList: []
  };
  let contest3 = {
    contestTypeId: 3,
    contestTypeName: config.sysContestType[3],
    identityList: []
  };
  let contest4 = {
    contestTypeId: 4,
    contestTypeName: config.sysContestType[4],
    identityList: []
  };
  list.forEach(function (item) {
    let data = item.dataValues;
    let obj = {
      identityId: data.identityId,
      identityName: data.identityName,
      select: 0,
    };
    identitySelect.forEach(function (item2) {
      let data2 = item2.dataValues;
      if (data2.identityId === data.identityId) {
        obj.select = 1;
      }
    });
    switch (data.contestTypeId) {
      case 1:
        contest1.identityList.push(obj);
        break;
      case 2:
        contest2.identityList.push(obj);
        break;
      case 3:
        contest3.identityList.push(obj);
        break;
      case 4:
        contest4.identityList.push(obj);
        break;
    }
  });
  return [contest1, contest2, contest3, contest4];
};

/**
 * 获取公告短信通知包含的身份的的发布范围
 * @param DB
 * @param announcementId 公告ID
 * @returns {Promise<({contestTypeId: number, identityList: *[], contestTypeName: string}|{contestTypeId: number, identityList: *[], contestTypeName: string}|{contestTypeId: number, identityList: *[], contestTypeName: string}|{contestTypeId: number, identityList: *[], contestTypeName: string})[]>}
 */
exports.getAnnouncementIdentityRange = async (DB, announcementId) => {
  let identitySelect = []; // 用户已有的身份
  if (announcementId > 0) {
    const AnnouncementRange = DB.getModel("announcementRange");
    identitySelect = await AnnouncementRange.findAll({
      attributes: ["identityId"],
      where: {
        announcementId,
        isDelete: 0
      },
    });
  }
  const SysIdentity = DB.getModel("sysIdentity");
  let list = await SysIdentity.findAll({
    attributes: [
      ["id", "identityId"],
      "contestTypeId",
      ["name", "identityName"],
    ],
  });
  let contest1 = {
    contestTypeId: 1,
    contestTypeName: "LPL",
    identityList: []
  };
  let contest2 = {
    contestTypeId: 2,
    contestTypeName: "LDL",
    identityList: []
  };
  let contest3 = {
    contestTypeId: 3,
    contestTypeName: "WR",
    identityList: []
  };
  let contest4 = {
    contestTypeId: 4,
    contestTypeName: "VAL",
    identityList: []
  };
  list.forEach(function (item) {
    let data = item.dataValues;
    let obj = {
      identityId: data.identityId,
      identityName: data.identityName,
      select: 0,
    };
    identitySelect.forEach(function (item2) {
      let data2 = item2.dataValues;
      if (data2.identityId === data.identityId) {
        obj.select = 1;
      }
    });
    switch (data.contestTypeId) {
      case 1:
        contest1.identityList.push(obj);
        break;
      case 2:
        contest2.identityList.push(obj);
        break;
      case 3:
        contest3.identityList.push(obj);
        break;
      case 4:
        contest4.identityList.push(obj);
        break;
    }
  });
  return [contest1, contest2, contest3, contest4];
};

/**
 * 获取权限信息列表
 * @param DB
 * @param userId
 * @returns {Promise<({permissionTypeId: number, permissionList: *[], permissionTypeName: string}|{permissionTypeId: number, permissionList: *[], permissionTypeName: string}|{permissionTypeId: number, permissionList: *[], permissionTypeName: string}|{permissionTypeId: number, permissionList: *[], permissionTypeName: string})[]>}
 */
exports.getPermission = async (DB, userId = 0) => {
  let permissionSelect = []; // 用户已有的权限
  if (userId > 0) {
    const UserPermission = DB.getModel("userPermission");
    permissionSelect = await UserPermission.findAll({
      attributes: ["permissionId"],
      where: {
        userId,
        isDelete: 0
      },
    });
  }
  const SysPermission = DB.getModel("sysPermission");
  let list = await SysPermission.findAll({
    attributes: [
      ["id", "permissionId"],
      "permissionTypeId",
      "contestTypeId",
      ["name", "permissionName"],
    ],
  });
  let permissionType1 = {
    permissionTypeId: 1,
    permissionTypeName: "超级管理员",
    permissionList: [],
  };
  let permissionType2 = {
    permissionTypeId: 2,
    permissionTypeName: "管理员",
    permissionList: [],
  };
  let permissionType3 = {
    permissionTypeId: 3,
    permissionTypeName: "核心兼职",
    permissionList: [],
  };
  let permissionType4 = {
    permissionTypeId: 4,
    permissionTypeName: "自由兼职",
    permissionList: [],
  };

  list.forEach(function (item) {
    let data = item.dataValues;
    let obj = {
      permissionId: data.permissionId,
      permissionName: data.permissionName,
      contestTypeId: data.contestTypeId,
      select: 0,
    };
    permissionSelect.forEach(function (item2) {
      let data2 = item2.dataValues;
      if (data2.permissionId === data.permissionId) {
        obj.select = 1;
      }
    });
    switch (data.permissionTypeId) {
      case 1:
        permissionType1.permissionList.push(obj);
        break;
      case 2:
        permissionType2.permissionList.push(obj);
        break;
      case 3:
        permissionType3.permissionList.push(obj);
        break;
      case 4:
        permissionType4.permissionList.push(obj);
        break;
    }
  });
  return [permissionType1, permissionType2, permissionType3, permissionType4];
};

/**
 * 获取系统大赛事列表
 * @param {*} DB
 * @returns
 */
exports.getSysContestType = async (DB) => {
  const sysContestType = DB.getModel("sysContestType");
  let contestType = await sysContestType.findAll({
    where: {
      isDelete: 0
    },
    raw: true,
    attributes: [
      ['name', 'contestTypeName'],
      ['id', 'contestTypeId']
    ],
  });
  return contestType;
};

/**
 * 获取用户已有的权限
 * @param {*} DB
 * @param {*} userId
 * @returns
 */
exports.getUserPermission = async (DB, userId) => {
  let userPermission = DB.getModel("userPermission");
  let sysPermission = DB.getModel("sysPermission");
  userPermission.hasOne(sysPermission, {
    foreignKey: "id",
    sourceKey: "permissionId",
  });
  let userPermissionData = userPermission.findAll({
    where: {
      isDelete: 0,
      userId: userId
    },
    attributes: ['permissionId', 'id'],
    include: [{
      model: sysPermission,
      attributes: ["permissionTypeId", 'contestTypeId', ["name", "permissionName"]]
    },]
  })
  return userPermissionData;
}

/**
 * 数据库查出的数据对象转为好操作的数据对象
 * @param {*} data :原始数据对象
 * @returns
 */
exports.objectDataToArray = (data) => {
  return JSON.parse(JSON.stringify(data));
}

/**
 * 判断value是否在数组arr中
 * @param {*} arr
 * @param {*} value
 * @returns
 */
exports.isInArray = (arr, value) => {
  if (typeof value === "undefined") {
    return false;
  }
  for (let i = 0; i < arr.length; i++) {
    if (value.toString() === arr[i].toString()) {
      return true;
    }
  }
  return false;
}

/**
 * 判断两个简单数组是否相同--元素没有对象或者数组
 * @param {*} array1
 * @param {*} array2
 * @returns
 */
exports.scalarArrayEquals = (array1, array2) => {
  return array1.length == array2.length && array1.every(function (v, i) {
    return v === array2[i]
  });
}
/**
 * 根据position、side字段返回具体的裁判位置信息
 * @param position 位置
 * @param side 哪边
 * @returns {string}
 */
exports.positionReferee = (position, side = 1) => {
  let positionName = "";
  switch (position) {
    case 1:
      positionName += config.refereePosition.mainRefereeDes;// 主裁判
      break;
    case 2:
      positionName += config.refereePosition.onRefereeDes;// 场上裁判
      break;
    case 3:
      positionName += config.refereePosition.offRefereeDes;// 场下裁判
      break;
    case 4:
      positionName += config.refereePosition.offRefereeLeaderDes;// 场下裁判Leader
      break;
    case 5:
      positionName += config.refereePosition.assistantMainRefereeDes;// 助理主裁判
      break;
    default:
      positionName += config.refereePosition.mainRefereeDes;// 主裁判
      break;
  }
  let sideStr = config.refereeSide.aDes;// A边
  if (parseInt(side.toString()) === 2) {
    sideStr = config.refereeSide.bDes;// B边
  }
  return positionName + "（" + sideStr + "）";
}

/**
 * 返回文字的星期几
 * @param {*} day
 * @returns
 */
exports.dayWeek = (day) => {
  let dayWeek = "";
  switch (day) {
    case 1:
      dayWeek = "周一";
      break;
    case 2:
      dayWeek = "周二";
      break;
    case 3:
      dayWeek = "周三";
      break;
    case 4:
      dayWeek = "周四";
      break;
    case 5:
      dayWeek = "周五";
      break;
    case 6:
      dayWeek = "周六";
      break;
    case 0:
      dayWeek = "周日";
      break;
    default:
      dayWeek = "周日";
      break;
  }
  return dayWeek;
}

/**
 * 根据提供的日期,返回该日期一周的日期
 * @param {*} day
 * @returns
 */
exports.weekDay = (day) => {
  // 第一步: 获取今天是本周的第几天
  const weekOfday = moment(day).format('E');
  // 第二步: 获取本周周一的日期
  const lastMonday = moment(day).subtract(weekOfday - 1, 'days').format('YYYY-MM-DD');
  let weekDate = [];
  let weekArr = {};
  const week = {
    0: "星期一",
    1: "星期二",
    2: "星期三",
    3: "星期四",
    4: "星期五",
    5: "星期六",
    6: "星期日"
  };
  for (let i = 0; i <= 6; i++) {
    let obj = moment(lastMonday).add(i, 'days').format('YYYY-MM-DD');
    weekDate.push(obj)
    weekArr[obj] = week[i];
  }
  return {
    weekDate,
    weekArr
  };
}

/**
 * 数组对象排序
 * @param property 排序的属性名
 * @param asc 升序 true   降序  false
 * @returns {function(*, *): boolean|number|number}
 */
exports.sortByQueryParams = (property, asc = true) => {
  asc = asc === true ? -1 : 1
  return function (value1, value2) {
    let a = value1[property]
    let b = value2[property]
    return a < b ? asc : a > b ? asc * -1 : 0
  }
}

/**
 * 两个数组对象合并
 * @param arrayObj1
 * @param arrayObj2
 * @returns {*}
 */
exports.arrayObjectMerge = (arrayObj1, arrayObj2) => {
  for (const item of arrayObj2) {
    arrayObj1.push(item);
  }
  return arrayObj1;
}
"use strict";
const apiBase = require("../service/apiBase");
const {
  Op
} = require("sequelize");
const config = require("../config/config");
const {sortByQueryParams, isInArray} = require("./apiBase");
const activeUserStatus = [2, 3, 5];
const active = 0;
const isOpen = 1;
const freeStatus = 1;
const shiftStatus = 3;

/**
 * 获取用户的可以筛选的大赛事列表
 * @param {*} server
 * @param {*} params
 */
exports.getContestType = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  // 找出所有的大赛事类型
  let sysContestType = await apiBase.getSysContestType(DB);
  // 找出用户拥有的权限
  let userPermission = await apiBase.objectDataToArray(await apiBase.getUserPermission(DB, params.userId));
  // 遍历用户拥有的权限:找出【超级管理员、管理员】权限对应的大赛事id,从而决定返回的课筛选的赛事的排序
  let userManger = [];
  userPermission.forEach((arr) => {
    if ([config.sysPermissionType.MANAGER, config.sysPermissionType.FULLTIMEREFEREE].indexOf(arr.sysPermission.permissionTypeId) !== -1) {
      userManger.push(arr.sysPermission.contestTypeId);
    }
  });
  if (userManger.length === 0) {
    userManger.push(1);// 如果没有默认选中的，就把LPL设为true
  }
  // 遍历赛事类型,判断大赛事对应的用户是否有权限;
  sysContestType.forEach((arr) => {
    arr.isSelect = isInArray(userManger, arr.contestTypeId);
  });
  // 排序
  sysContestType.sort(sortByQueryParams("isSelect", false));
  return sysContestType;
}

/**
 * 获取大赛事返回下面的小赛事列表
 * @param {*} server
 * @param {*} params
 */
exports.getContest = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  let {
    contestTypeId,
    name
  } = params;
  let where = {
    contestTypeId: contestTypeId,
    isPublish: isOpen,
    isDelete: active
  };
  if (name) {
    where['name'] = {
      [Op.like]: "%" + name + "%"
    }
  }

  let contestData = await DB.getModel("contest").findAll({
    where,
    attributes: [
      'name',
      ['id', 'contestId'],
    ],
    limit: 100,
    order: [
      ["id", "desc"]
    ],
    // raw: true
  });
  return contestData;
}

/**
 * 根据赛程信息返回可以筛选的裁判列表
 * @param {*} server
 * @param {*} params
 * @returns
 */
exports.getReferee = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  // 根据赛程信息找出大赛事信息
  let contestSchedule = await DB.getModel('contestSchedule').findByPk(params.contestScheduleId, {
    attributes: [
      ['id', 'contestScheduleId'], 'contestId', 'contestTypeId', 'gameDate'
    ],
    raw: true
  });
  // 找出比赛当天提交了空闲排班时间+人员是该大赛事的超级管理员或者核心兼职的人员+位置是当前大赛事下的当前裁判的位置的 人员
  // 先找人,再找这些已经提交的排班时间;

  // 超级管理员权限或者管理员,找出哪些权限id是对应的大赛事的超级管理员或者管理员
  let permissionIds = [];
  let userIds = [];
  let userInfo = {};
  await DB.getModel('sysPermission').findAll({
    where: {
      contestTypeId: contestSchedule.contestTypeId,
      permissionTypeId: [config.sysPermissionType.MANAGER, config.sysPermissionType.FULLTIMEREFEREE],
    },
    attributes: [
      ['id', 'permissionId']
    ],
    raw: true
  }).then(
    result => {
      result.forEach(element => {
        permissionIds.push(element.permissionId);
      });
    }).catch(err => {
  });

  await DB.getModel('userPermission').findAll({
    where: {
      isDelete: active,
      permissionId: permissionIds
    },
    attributes: ['userId'],
    raw: true
  }).then(
    result => {
      result.forEach(element => {
        if (!apiBase.isInArray(userIds, element.userId)) {
          userIds.push(element.userId);
        }
      });
    }
  ).catch(err => {
  });

  // 找到该大赛事当前位置可以排班的对应的位置id
  let identityIds = [];
  await DB.getModel('sysIdentity').findAll({
    where: {
      contestTypeId: contestSchedule.contestTypeId,
      position: params.positionId,
    },
    attributes: [
      ['id', 'identityId']
    ],
    raw: true
  }).then(
    result => {
      result.forEach(element => {
        identityIds = element.identityId;
      });
    }
  ).catch(err => {
  });

  await DB.getModel('userIdentity').findAll({
    where: {
      isDelete: active,
      identityId: identityIds
    },
    attributes: ['userId'],
    raw: true
  }).then(
    result => {
      result.forEach(element => {
        if (!apiBase.isInArray(userIds, element.userId)) {
          userIds.push(element.userId);
        }
      });
    }
  ).catch(err => {
  });

  // 找出比赛当天有提交空闲排班时间以及已排班的用户,并找出用户信息
  // 1 提交空闲排班的
  // 2 已经安排在该大赛事的, 不是这场比赛or是这场比赛且裁判位置为params.positionId位置

  await DB.getModel("userWorkSchedule").findAll({
    where: {
      applyDate: contestSchedule.gameDate,
      userId: userIds,
      isDelete: active,
      [Op.or]: [{
        status: freeStatus
      }, {
        status: shiftStatus,
        [Op.or]: [{
          contestTypeId: contestSchedule.contestTypeId,
          contestScheduleId: {
            [Op.ne]: params.contestScheduleId
          },
        }, {
          contestScheduleId: params.contestScheduleId,
          position: params.positionId
        }]
      }]
    },
    attributes: ['userId'],
    raw: true
  }).then(
    result => {
      userIds = [];
      result.forEach(element => {
        userIds.push(element.userId);
      });
    }
  ).catch(err => {
  })
  // 统计用户对应的赛事阶段的已排班数
  const userWorkScheduleModel = DB.getModel("userWorkSchedule");
  const contestScheduleModel = DB.getModel("contestSchedule");
  userWorkScheduleModel.hasOne(contestScheduleModel, {foreignKey: "id", sourceKey: "contestScheduleId"});
  let contestScheduleWhere = {contestTypeId: contestSchedule.contestTypeId};// 赛程筛选条件
  if (params.gameStage) {
    contestScheduleWhere.gameStage = params.gameStage;
  }
  let userWorkSchedules = await userWorkScheduleModel.findAll({
    attributes: ["userId"],
    where: {
      isDelete: 0
      , status: 3 // 已排班
      , userId: userIds
    },
    include: {
      model: contestScheduleModel,
      attributes: ["gameStage"],
      where: contestScheduleWhere,// 赛程筛选条件
      required: true // true 为 inner join , false 为 left join
    },
  });
  let userWorkScheduleCount = {};
  userIds.forEach((userId) => { // 用户排班数初始化
    userWorkScheduleCount[userId] = 0;
  });
  userWorkSchedules.forEach((item) => {
    userWorkScheduleCount[item.userId]++;
  });
  // 找出用户信息
  let where = {
    id: userIds,
    status: activeUserStatus,
    forbidden: active,
    isDelete: active,
    refereeStatus: config.refereeStatus.canSchedule
  };
  if (params.city && params.city.length > 0) {
    where['city'] = params.city;
  }
  if (params.userName) {
    where['name'] = {
      [Op.like]: "%" + params.userName + "%"
    }
  }
  userInfo = await DB.getModel("user").findAll({
    where,
    raw: true,
    attributes: [
      ['id', 'userId'],
      ['name', 'userName'],
      'city', 'refereeStatus'
    ]
  });
  userInfo.forEach(res => {
    let extra = "(" + res.city + ")";
    if (res.refereeStatus === 2) {
      extra += "(" + config.refereeStatus[res.refereeStatus] + ")";
    }
    extra += "(当前排班量：" + userWorkScheduleCount[res.userId] +")";
    res.userName = res.userName + extra;
  });
  return userInfo;
}
"use strict";

const errMsg = require("../config/errMsg");
const {checkUserForbidden,checkUserFreeze} = require("./check/userRefereeStatus");
/**
 * 删除赛程
 * @param {*} server
 * @param {*} params
 * @returns
 */
exports.scheduleDelete = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结

  const ContestSchedule = DB.getModel("contestSchedule");
  // 判断该赛程是否已经排过班
  let count = await DB.getModel("userWorkSchedule").count({
    where: {contestScheduleId: params.contestScheduleId, isDelete: 0}
  });
  if (count > 0) {
    throw errMsg.BadRequest.inherit("该赛程已有排班，请先进入排班管理取消相应的排班安排！");
  }
  await ContestSchedule.update({
    isDelete: 1,
  }, {
    where: {
      id: params.contestScheduleId
    },
  });
  return true;
}

/**
 * 修改赛程公开状态
 * @param {*} server 
 * @param {*} params 
 * @returns 
 */
exports.openContest = async (server, params) => {
  // 直接修改赛事信息
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结

  await DB.getModel("contest").update({
    isPublish: params.isPublish ? 1 : 0
  }, {
    where: {
      id: params.contestId
    }
  });
  return true;
}
"use strict";

const ExcelJS = require('exceljs');
const _ = require('lodash');
const errMsg = require('../config/errMsg');
const {checkUserForbidden,checkUserFreeze} = require("./check/userRefereeStatus");
const moment = require('moment');
const {
  Op
} = require("sequelize");
/**
 * 上传文件
 * @param {*} server
 * @param {*} params
 */
exports.upload = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  let contestInfo = await DB.getModel("contest").findByPk(params.contestId, {
    attributes: ['id', 'contestTypeId', 'hasUpload'],
    raw: true
  });
  if (contestInfo.length < 1) {
    throw errMsg.BadRequest.inherit("找不到对应的赛事信息!");
  }

  const workbook = new ExcelJS.Workbook();
  await workbook.xlsx.readFile(params.file.path);
  const sheet = workbook.worksheets[0];
  if (!sheet) {
    throw errMsg.BadRequest.inherit("找不到对应的Sheet!");
  }
  // 【比赛日】【比赛时间】【赛事阶段】【赛事进度】【队伍1】【队伍2】【比赛城市】【BO】 ---- 赛程导入统一表头
  let cellStandard = {
    1: "比赛日",
    2: "比赛时间",
    3: "赛事阶段",
    4: "赛事进度",
    5: "队伍1",
    6: "队伍2",
    7: "比赛城市",
    8: "BO"
  };
  let cellType = {
    numberType: 2,
    stringType: 3,
    dateType: 4,
    RichText:8 //富文本
  };
  let cellFile = {}; // 文件的表头
  let sheetData = []; // 文档数据
  let opOr = []; // 如果导入的赛程已经存在,需要更新;
  let opOrArr = {}; // 为了方便之后寻找需要更新的sheetData数据下标;
  sheet.eachRow(function (row, rowNumber) {
    // 先判断表头是否符合规定
    if (rowNumber == 1) {
      // 如果总的列数不为8列,直接拒绝
      // console.log(row.actualCellCount);
      // if (row.actualCellCount != 6) {
      // throw errMsg.BadRequest.inherit("数据格式发生错误！");
      // }
      // console.log(rowSize);// 单元格数量
      // console.log(numValues);// 实际有值的单元格数量
      row.eachCell(function (cell, colNumber) {
        // cell.type单元格类型：6-公式 ;2-数值；3-字符串
        // console.log(cell.value);
        if (cell.value) {
          cellFile[colNumber] = cell.value;
        }
      });
      // 表头不是规定的表头,直接抛出错误;
      if (!_.isEqual(cellFile, cellStandard)) {
        throw errMsg.BadRequest.inherit("数据格式发生错误！");
      }
    } else {
      // 读取表格中的数据
      let dataCell = {};
      dataCell = {
        contestId: params.contestId,
        contestTypeId: contestInfo.contestTypeId,
        dayOfWeek: 0,
        gameDate: null,
        gameTime: "00:00",
        weekOfMonth: 0,
        gameStage: "",
        teamA: "",
        teamB: "",
        city: "",
        bo: ""
      };
      row.eachCell(function (cell, colNumber) {
        switch (colNumber) {
          case 1:
            // 日期
            if (cell.type === cellType.dateType) {
              dataCell.gameDate = moment(cell.value).format("YYYY-MM-DD");
              dataCell.dayOfWeek = new Date(cell.value).getDay()
            } else {
              let dateParam = new Date(cell.value);
              dataCell.gameDate = dateParam.getFullYear() + "-" + ((dateParam.getMonth() + 1) > 9 ? (dateParam.getMonth() + 1) : ("0" + (dateParam.getMonth() + 1))) + "-" + (dateParam.getDate() > 9 ? dateParam.getDate() : "0" + dateParam.getDate());
              dataCell.dayOfWeek = dateParam.getDay()
            }
            break;
          case 2:
            // 时间
            if (cell.type === cellType.dateType) {
              dataCell.gameTime = moment(cell.value).utcOffset(0).format("HH:mm");
            } else {
              dataCell.gameTime = cell.value;
            }
            break;
          case 3:
            // 赛事阶段
            if (cell.type === cellType.stringType) {
              dataCell.gameStage = cell.value;
            }
            break;
          case 4:
            // 第几周
            if (cell.type === cellType.stringType) {
              dataCell.weekOfMonth = cell.value;
            }
            break;
          case 5:
            // 队伍1
            if (cell.type === cellType.stringType) {
              dataCell.teamA = cell.value;
            }else if(cell.type === cellType.RichText) {
              dataCell.teamA = cell.text;            
            }
            break;
          case 6:
            // 队伍2
            if (cell.type === cellType.stringType) {
              dataCell.teamB = cell.value;
            }else if(cell.type === cellType.RichText) {
              dataCell.teamB = cell.text;     
            }
            break;
          case 7:
            // 城市
            if (cell.type === cellType.stringType) {
              dataCell.city = cell.value;
            }
            break;
          case 8:
            // BO
            if (cell.type === cellType.numberType) {
              dataCell.bo = cell.value;
            }
            break;
          default:
            break;
        }
      });
      if (dataCell.gameDate && dataCell.gameTime !== "00:00") {
        opOr.push({
          gameDate: dataCell.gameDate,
          gameTime: dataCell.gameTime,
        });
        opOrArr[opOr.length - 1] = rowNumber - 2;
      }
      sheetData.push(dataCell);
    }
  });
  if (sheetData.length < 1) {
    throw errMsg.BadRequest.inherit("表格数据为空!");
  }
  // 查询符合时间条件的赛程,修改
  await DB.getModel('contestSchedule').findAll({
    where: {
      contestId: params.contestId,
      isDelete: 0,
      [Op.or]: opOr
    },
    raw: true,
    attributes: ['id', 'gameDate', 'gameTime']
  }).then(resutl => {
    resutl.forEach(element => {
      let indexU = opOr.findIndex(item => {
        return item.gameDate === element.gameDate && item.gameTime === element.gameTime;
      })
      if (indexU > -1) {
        // 找到需要更新的sheetData下标
        let IndexSheetData = opOrArr[indexU];
        sheetData[IndexSheetData] = {
          id: element.id,
          contestId: params.contestId,
          contestTypeId: sheetData[IndexSheetData].contestTypeId,
          dayOfWeek: sheetData[IndexSheetData].dayOfWeek,
          gameDate: sheetData[IndexSheetData].gameDate,
          gameTime: sheetData[IndexSheetData].gameTime,
          weekOfMonth: sheetData[IndexSheetData].weekOfMonth,
          gameStage: sheetData[IndexSheetData].gameStage,
          teamA: sheetData[IndexSheetData].teamA,
          teamB: sheetData[IndexSheetData].teamB,
          city: sheetData[IndexSheetData].city,
          bo: sheetData[IndexSheetData].bo
        };
      }
    });
  }).catch(err => {
  });
  // 批量插入数据
  let flag = await DB.getModel('contestSchedule').bulkCreate(sheetData, {
    updateOnDuplicate: ['contestId', 'contestTypeId', 'dayOfWeek', 'gameDate', 'gameTime', 'weekOfMonth', 'gameStage', 'teamA', 'teamB', 'city', 'bo']
  });

  // if (flag) {
  //   // 更新赛事为已导入过赛程
  //   await DB.getModel("contest").update({
  //     hasUpload: 1
  //   }, {
  //     where: {
  //       id: params.contestId
  //     }
  //   });
  // }

  return true;
};
"use strict";

const {createQsySignature} = require("../lib/encrypt");
const {requestGet, requestPost} = require("../lib/request");
const errMsg = require("../config/errMsg");
const {SendTemplateMessage} = require("../rpc/appsmsbase");
/**
 * 城市列表
 * @param server
 * @param params
 * @returns {Promise<{list: *}>}
 */
exports.cityList = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  let list = await DB.getModel('cityData').findAll({
    attributes: [ 'id', 'city' ],
    order: [ ['sortFlag', 'asc'] ]
  });
  return { list };
};

/**
 * 测试接口
 * @param server
 * @param params
 * @returns {Promise<*>}
 */
exports.test = async (server, params) => {
  let {userCode} = params;
  let sign = createQsySignature(userCode);
  let url = process.env.QSY_SINGLE_MEMBER_LOGIN_URL + "?factoryCode="+ process.env.QSY_FACTORY_CODE +"&sign=" + sign;
  let res = await requestGet(url)
  let json = JSON.parse(res);
  return json;

};

/**
 * 获取学员的直接登录地址
 * @param server
 * @param params
 * @returns {Promise<{loginUrl: string}>}
 */
exports.generateMemberLoginUrl = async (server, params) => {
  let {userCode} = params;
  let sign = createQsySignature(userCode);
  let loginUrl = process.env.QSY_SINGLE_MEMBER_LOGIN_URL + "?factoryCode="+ process.env.QSY_FACTORY_CODE +"&sign=" + sign;
  return {loginUrl};
};

/**
 * 添加学员
 * @param server
 * @param params
 * @returns {Promise<{loginUrl: string}>}
 */
exports.addQsyMember = async (server, params) => {
  let {userCode} = params;
  const deptIdDefault = process.env.QSY_MEMBER_DEPT_ID_DEFAULT;
  let requestData = {
    "userCode": userCode,
    "nickName": userCode,
    "deptIdList": [deptIdDefault]
  };
  let sign = createQsySignature(process.env.QSY_ADMIN_CODE);// 签名
  let url = process.env.QSY_ADD_MEMBER_URL + "?factoryCode="+ process.env.QSY_FACTORY_CODE +"&sign=" + sign;
  let res = await requestPost(url, requestData);
  return {res};
};

/**
 * 查询组织架构列表
 * @param server
 * @param params
 * @returns {Promise<{json: any}>}
 */
exports.queryOrgList = async (server, params) => {
  let sign = createQsySignature(process.env.QSY_ADMIN_CODE);// 签名
  let requestData = {
    "deptCode":""
  };
  let url = process.env.QSY_QUERY_ORG_LIST_URL + "?factoryCode="+ process.env.QSY_FACTORY_CODE +"&sign=" + sign;
  let res = await requestPost(url, requestData);
  return {res};
};

/**
 * 发送短信
 * @param server
 * @param params
 * @returns {Promise<{res: *}>}
 */
exports.sendSms = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  const TemplateMessage = DB.getModel("templateMessage");
  let templateInfo = await TemplateMessage.findOne({templateId: params.templateId, isDelete: 0});
  if (!templateInfo) throw errMsg.BadRequest.inherit("短信模版不存在");
  let requestParams = {
    "endpoint": "8613515669710",
    "endpointType": "mobile",
    "templateID": templateInfo['templateId'],
    "params": params.data
  };
  let result = await SendTemplateMessage(requestParams);
  return {result, requestParams};
};
"use strict";
const {
  getUserInfo,
  positionReferee
} = require("../service/apiBase");
const {
  getCurrentDateTime,
  getMonthDays,
  getWeekRange,
  getWeekDayDesc,
  getNextDay
} = require("../lib/date");
const authBaseRpc = require("../rpc/authBase");
const {
  isInArray
} = require("./apiBase");
const {
  Op
} = require("sequelize");
const {
  addUserMessage
} = require("./userMessage");
const {
  allManagerByContestTypeId
} = require("./user/getUsers");
const {
  syncUserContestTypePermissionTypeIdentityType
} = require("./user/updateUser");
const config = require("../config/config");
const errMsg = require('../config/errMsg');
const {retCodeMsgMap} = require("../config/retCode");
const {getQsyMemberLoginUrl} = require("./qsy/login");
const {addContestScheduleOperationLog} = require("./v2/contestScheduleOperationLog");
const {checkUserFreeze, checkUserForbidden,checkUserRefereeStatus} = require("./check/userRefereeStatus");
const {checkUserRefereeNumberUnique} = require("./check/userRefereeNumber");

/**
 * 登录
 * @param server
 * @returns {Promise<{userIdentityCurrent: *[], userInfo: ({originalIdentity}|*), userPermission: *[], userIdentityFuture: *[]}|*[]>}
 */
exports.login = async (server) => {
  const uid = server.session.UID;
  const DB =
    server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  const User = DB.getModel("user");
  // 通过rpc获取用户信息
  let userInfoRpc = await authBaseRpc.QueryUserByID({
    id: uid
  });
  if (userInfoRpc.id != uid) {//  || !userInfoRpc.email
    throw errMsg.InvalidAuthorization.inherit(retCodeMsgMap[3000]);// Authorization错误
  }
  let errInfo = "";
  if (!userInfoRpc.phone) errInfo += "手机";
  if (!userInfoRpc.email) errInfo += "邮箱";
  if (errInfo) throw errMsg.BadRequest.inherit(errInfo + "信息缺失，请联系管理员处理");
  let mobile = userInfoRpc.phone;
  let email = userInfoRpc.email;

  let [userInfo] = await User.findOrCreate({
    where: {
      uid,
      isDelete: 0,
    },
    defaults: {
      uid,
      mobile,
      email
    }
  });
  let userInfoReturn = await getUserInfo(DB, userInfo.id);
  userInfoReturn.qsyLoginUrl = await getQsyMemberLoginUrl(DB, userInfo.id);
  return userInfoReturn;
};

/**
 * 获取用户信息
 * @param server
 * @param params
 * @returns {Promise<{userIdentityCurrent: *[], userInfo: ({originalIdentity}|*), userPermission: *[], userIdentityFuture: *[]}|*[]>}
 */
exports.userInfo = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId
  } = params;
  // 返回数据
  return await getUserInfo(DB, userId);
};

/**
 * 用户信息认证/修改
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.auth = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  let {userId, name, city, identityId, image, refereeNumber, contestHistoryId} = params;
  if (refereeNumber) {
    await checkUserRefereeNumberUnique(DB, userId, refereeNumber);// 判断裁判编号是否已经存在
  }
  const User = DB.getModel("user");
  const UserIdentity = DB.getModel("userIdentity");
  const UserPermission = DB.getModel("userPermission");
  const SysPermission = DB.getModel("sysPermission");
  const UserRefereeContestHistory = DB.getModel("userRefereeContestHistory");
  UserPermission.hasOne(SysPermission, {
    foreignKey: 'id',
    sourceKey: 'permissionId'
  });
  let userInfo = await User.findByPk(userId);
  if (!userInfo || userInfo.isDelete === 1) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[5000]);// 账号异常
  }
  let identityIdArr = identityId.split(","); // 新的用户身份ID
  let contestHistoryIdArr = contestHistoryId.split(","); // 新的用户执裁的历史赛事ID
  try {
    await DB.sequelize.transaction(async (t) => {
      // 修改用户信息
      let statusNew = 2; // 变化后的状态
      let originalUserInfo = "";// 变化后的原来用户信息
      if (userInfo.forbidden === 1) {
        statusNew = 6; // 封禁下认证待审核
      } else {
        switch (userInfo.status) {
          case 0: // 原来是 【未认证】
          case 1: // 原来是 【首次认证待审核】
          case 4: // 原来是 【首次认证未通过】
            statusNew = 1;
            break; // 变为 【首次认证待审核】
          case 2: // 原来是 【再次修改申请待审核】
          case 3: // 原来是 【已通过】
          case 5: // 原来是 【再次修改审核未通过】
            statusNew = 2;
            break; // 变为 【再次修改申请待审核】
        }
        if (isInArray(config.userStatus.normalUser, userInfo.status)) {
          // 获取用户相关信息
          let {userIdentityCurrent, userRefereeContestHistory} = await getUserInfo(DB, userInfo.id, ['userIdentity', 'userRefereeContestHistory']);
          let identityIdArr = [];
          userIdentityCurrent.forEach((item) => {
            identityIdArr.push(item.identityId);
          });
          let contestHistoryIdCurrentArr = [];
          userRefereeContestHistory.forEach((item) => {
            contestHistoryIdCurrentArr.push(item.contestHistoryId);
          });
          let data = {
            "name": userInfo.name,
            "city": userInfo.city,
            "image": userInfo.image,
            "refereeNumber": userInfo.refereeNumber,
            "identityId": identityIdArr.join(","),
            "contestHistoryId": contestHistoryIdCurrentArr.join(",")
          }
          originalUserInfo = JSON.stringify(data);
        } else {
          originalUserInfo = userInfo.originalUserInfo;
        }
      }
      await User.update({
        name,
        city,
        status: statusNew,
        originalUserInfo: originalUserInfo,
        image, refereeNumber
      }, {
        where: {
          id: userInfo.id
        },
        transaction: t
      });

      // 删除老的用户身份
      await UserIdentity.update({
        isDelete: 1
      }, {
        where: {
          userId: userId
        },
        transaction: t
      });
      // 添加新的用户身份
      let insertArr = [];
      identityIdArr.forEach(function (id) {
        insertArr.push({
          userId: userId,
          identityId: id,
          isDelete: 0
        });
      });
      if (insertArr.length > 0) {
        await UserIdentity.bulkCreate(insertArr, {
          updateOnDuplicate: ['userId', 'identityId', 'isDelete'],
          transaction: t
        });
      }
      // 删除老的执裁经历
      await UserRefereeContestHistory.update({
        isDelete: 1
      }, {
        where: {
          userId: userId
        },
        transaction: t
      });
      // 添加新的执裁经历
      let insertContestHistoryArr = [];
      contestHistoryIdArr.forEach(function (id) {
        insertContestHistoryArr.push({
          userId: userId,
          contestHistoryId: id
        });
      });
      if (insertContestHistoryArr.length > 0) {
        await UserRefereeContestHistory.bulkCreate(insertContestHistoryArr, {
          transaction: t
        });
      }
    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  await syncUserContestTypePermissionTypeIdentityType(DB, userId); // 更新用户信息
  return true;
};

/**
 * 个人中心-我的排班
 * @param server
 * @param params
 * @returns {Promise<{monthList: *[]}>}
 */
exports.mySchedule = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    month
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  let monthStartDay = month + '-01'; // 当前月份的第一天
  let monthDays = getMonthDays(monthStartDay); // 当前月份的天数
  let startDay = getNextDay(monthStartDay, -7); // 查询范围的第一天
  let finishDay; // 查询范围的最后一天
  // 初始化月份下的排班计划
  let monthList = [];
  for (let i = 0; i < monthDays + 14; i++) {
    let date = getNextDay(startDay, i);
    monthList.push({
      date,
      list: []
    });
    finishDay = date;
  }
  // 获取查询月份用户所有的排班计划
  const userWorkScheduleSql = " select us.id userWorkScheduleId, us.status, us.applyDate, us.applyWorkRemark, " +
    " us.position, us.changeType, us.changeStatus, us.side," +
    " s.gameDate, s.gameTime, s.weekOfMonth, s.dayOfWeek, s.teamA, s.teamB, s.city, " +
    " us.contestTypeId contestTypeName, c.name contestName " +
    " from userWorkSchedule us " +
    " left join contestSchedule s on s.id=us.contestScheduleId " +
    " left join contest c on c.id=us.contestId " +
    " where us.isDelete=0 and us.userId='" + userId + "' and us.applyDate between '" + startDay + "' and '" + finishDay + "' " +
    " order by us.applyDate asc  limit 500  ";
  let [scheduleList] = await DB.sequelize.query(userWorkScheduleSql);
  if (scheduleList) {
    let applyWorkScheduleId = []; // 申请了换班/调班的排班ID
    scheduleList.forEach(function (item) {
      // 申请了换班或调班，同时状态处于【等待被申请人同意】或【等待管理员审核】
      if ((item.changeType === 1 || item.changeType === 2) && (item.changeStatus === 0 || item.changeStatus === 1)) {
        applyWorkScheduleId.push(item.userWorkScheduleId);
      }
    });
    if (applyWorkScheduleId.length > 0) {
      // 换班/调班申请信息
      const applyWorkScheduleIdStr = applyWorkScheduleId.join(',');
      const userWorkScheduleChangeSql = " select usc.applyWorkScheduleId, " +
        " usc.offereeWorkScheduleId, usc.offereeUserId, " +
        " u.name offereeUserName, us.position,us.side, " +
        " s.gameDate, s.gameTime, s.teamA, s.teamB, s.city, " +
        " us.contestTypeId contestTypeName, c.name contestName " +
        " from userWorkScheduleChange usc " +
        " left join user u on usc.offereeUserId=u.id " +
        " left join userWorkSchedule us on usc.offereeWorkScheduleId=us.id " +
        " left join contestSchedule s on us.contestScheduleId=s.id " +
        " left join contest c on c.id=us.contestId " +
        " where usc.applyUserId='" + userId + "' and usc.applyWorkScheduleId in(" + applyWorkScheduleIdStr + ") " +
        " and usc.status in(0,1) and usc.isDelete=0 ";
      let [scheduleChangeList] = await DB.sequelize.query(userWorkScheduleChangeSql);
      if (scheduleChangeList) {
        scheduleChangeList.forEach(function (item) {
          scheduleList.map(item2 => {
            if (item.applyWorkScheduleId === item2.userWorkScheduleId) {
              item.contestTypeName = config.sysContestType[item.contestTypeName];
              if (typeof item.contestTypeName === "undefined") item.contestTypeName = null;
              item2.apply = item;
            }
          });
        });
      }
    }
  }
  scheduleList.forEach(function (item) {
    monthList.map(item2 => {
      if (item.applyDate === item2.date) {
        item.contestTypeName = config.sysContestType[item.contestTypeName];
        if (typeof item.contestTypeName === "undefined") item.contestTypeName = null;
        item2.list.push(item);
      }
    });
  });
  return {monthList};
}

/**
 * 提交可排班时间
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|{result, code: number, message: string}>}
 */
exports.applySchedule = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  let {userId, dateStr, applyWorkRemark} = params;
  const User = DB.getModel('user');
  let userInfo = await User.findByPk(userId);
  let dateArr = dateStr.split(",");// 日期数组
  let remarkArr = applyWorkRemark.split(",");// 备注数组
  let weekRange = getWeekRange(dateArr[0]); // 日期所属一周内的日期
  let flag = 1; // 提交的日期是否属于同一周内，1是 0否
  dateArr.map(date => {
    if (!isInArray(weekRange, date)) {
      flag = 0;
    }
  });
  if (flag === 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6000]);// 您提交的排班时间不是同一周内的
  }
  // 查找提交的日期内是含有已经提交过的
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  let had = await UserWorkSchedule.findOne({
    where: {
      userId,
      isDelete: 0,
      applyDate: dateArr
    }
  });
  if (had) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6001]);// 您提交的排班时间内包含已经提交排班的
  }
  // 查找用户在一周内的可排班或已排班的数量
  let alreadyApplyCount = await UserWorkSchedule.count({
    where: {userId, isDelete: 0, applyDate: weekRange}
  });

  let status = 1; // 默认申请排班通过
  // 提交日期少于2天，且用户权限是【核心兼职】
  // 找出用户所有的权限
  if (alreadyApplyCount === 0 && dateArr.length < 2 && userInfo.permissionTypeId === '3') {
    status = 0; // 申请排班需要审核
  }
  let addDocArr = [];
  for (let i in dateArr) {
    addDocArr.push({
      userId,
      status,
      applyDate: dateArr[i],
      applyWorkRemark: remarkArr[i]
    });
  }
  let schedules = await UserWorkSchedule.bulkCreate(addDocArr);
  // 添加消息通知
  if (status === 0) {
    let {
      userPermission
    } = await getUserInfo(DB, userId); // 用户权限
    if (userPermission) {
      let contestTypeIdArr = []; // 用户属于的赛事类型
      userPermission.map(item => {
        contestTypeIdArr.push(item.contestTypeId);
      });
      if (contestTypeIdArr.length > 0) {
        // 对应赛事所有的管理员
        let userIdArr = await allManagerByContestTypeId(DB, contestTypeIdArr, [1]);
        await addUserMessage(DB, {
          userId: userIdArr, // 消息接收人
          type: 400, // 核心兼职一周内提交可排班天数不足2天，发消息给对应赛事管理员审核
          workScheduleChangeId: schedules[0].id, // userWorkSchedule表主键id
          content: { // 内容替换
            applyUser: userInfo.name, // 申请人
          }
        });
      }
    }
  }
  return true;
}

/**
 * 排班编辑删除
 * @param server
 * @param params
 * @returns {Promise<boolean>}
 */
exports.editSchedule = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    userWorkScheduleId,
    type,
    applyWorkRemark
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  let data = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleId,
      userId: userId
    },
    raw: true
  });
  if (data.status === 3) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6002]);// 该排班已经被安排，不得编辑或删除
  }
  await UserWorkSchedule.update({
    applyWorkRemark: applyWorkRemark,
    isDelete: type
  }, {
    where: {
      id: userWorkScheduleId,
      userId: userId
    }
  });
  return true;
}

/**
 * 个人中心-申请换班时可选择的排班列表
 * @param server
 * @param params
 * @returns {Promise<{list: *}>}
 */
exports.applyExchangeScheduleList = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    userWorkScheduleId,
    startDate,
    finishDate,
    name,
    position,
    city,
    page,
    pageNum
  } = params;
  const UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  const ContestSchedule = DB.getModel('contestSchedule');
  const User = DB.getModel('user');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: "id",
    sourceKey: "contestScheduleId",
  });
  UserWorkSchedule.hasOne(User, {
    foreignKey: "id",
    sourceKey: "userId",
  });
  // 获取申请排班的信息
  let apply = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleId,
      userId: userId,
      isDelete: 0
    },
    raw: true
  });
  if (!apply) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6004]);// 排班不存在
  }
  if (apply.status !== 3 || !apply.contestScheduleId) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6003]);// 该排班未安排裁判，不得申请换班
  }
  if (isInArray(config.changeType.applying, apply.changeType) && isInArray(config.changeStatus.inReview, apply.changeStatus)) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6005]);// 该排班已经申请换班/调班
  }
  let currentDateTime = getCurrentDateTime();
  let currenDate = currentDateTime.slice(0, 10); // 当前日期
  // 获取赛程信息
  let contestSchedule = await ContestSchedule.findByPk(apply.contestScheduleId);
  if (!contestSchedule) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6006]);// 排班对应的赛程不存在
  }
  let contestTypeId = contestSchedule.contestTypeId // 赛事类型ID
  // 找出哪些排班已经被申请换班了
  let alreadyChange = await UserWorkScheduleChange.findAll({
    attributes: ['id'],
    where: {
      applyType: 1,
      offereeWorkScheduleId: apply.id,
      status: config.changeStatus.inReview,
      isDelete: 0
    },
    raw: true
  });
  let alreadyApplyIdArr = [];
  alreadyChange.map(item => {
    alreadyApplyIdArr.push(item.id);
  });

  // 找出申请人已经被安排执法了哪些赛程
  let alreadyArrangeContestSchedule = await UserWorkSchedule.findAll({
    attributes: ['contestScheduleId'],
    where: {userId: userId, applyDate: {[Op.gte]: currenDate}, status: 3, isDelete: 0}
  });
  let alreadyArrangeContestScheduleIdArr = [];
  alreadyArrangeContestSchedule.map(item => {
    alreadyArrangeContestScheduleIdArr.push(item.contestScheduleId);
  });

  // 获取可选择的排班
  let where = {
    id: {[Op.notIn]: alreadyApplyIdArr}, // 被申请的排班不能是正在被申请换班的排班
    applyDate: {[Op.gte]: currenDate},// 被申请的排班日期必须大于等于今天
    contestScheduleId: {[Op.notIn]: alreadyArrangeContestScheduleIdArr},// 过滤申请人已经被安排执法的赛程
    userId: {[Op.ne]: userId},// 申请人不能和自己换班
    status: 3, // 被申请的排班必须是已排班的
    isDelete: 0,
    [Op.or]: [// 被申请的排班不能正处于申请换班/调班的状态中
      {changeType: {[Op.notIn]: config.changeType.applying}},
      {changeStatus: {[Op.notIn]: config.changeStatus.inReview}}
    ],
  };
  where[Op.and] = [];
  if (startDate) { // 被申请的排班的开始日期筛选
    where[Op.and].push({
      applyDate: {
        [Op.gte]: startDate
      }
    });
  }
  if (finishDate) { // 被申请的排班的截止日期筛选
    where[Op.and].push({
      applyDate: {
        [Op.lte]: finishDate
      }
    });
  }
  if (position) { // 被申请的排班的位置筛选
    where.position = position;
  }

  let userWhere = {}; // 关联表`user`筛选条件
  if (name) {
    userWhere = {
      name: {
        [Op.like]: '%' + name + '%'
      }
    };
  }

  let limit = pageNum;
  let offset = (page - 1) * limit;

  let list = await UserWorkSchedule.findAndCountAll({
    attributes: [
      ['id', 'userWorkScheduleId'], 'position', 'contestScheduleId', 'applyDate'
    ],
    where,
    limit,
    offset,
    include: [{
      model: ContestSchedule,
      where: {contestTypeId: contestTypeId, gameDate: {[Op.gte]: currenDate}, city: contestSchedule.city},
      attributes: ["gameDate", "gameTime", 'dayOfWeek', 'teamA', 'teamB', 'city'],
      required: true, // false 表示left join,true表示inner join
    },
      {
        model: User,
        where: userWhere,
        attributes: ['name'],
        required: true, // false 表示left join,true表示inner join
      }
    ],
    order: [
      ['applyDate', 'asc']
    ],
    raw: true
  });
  let tmp = [];
  list.rows.map(item => {
    tmp.push({
      "userWorkScheduleId": item['userWorkScheduleId'],
      "position": item['position'],
      "gameTime": item['applyDate'] + " " + item['contestSchedule.gameTime'],
      "dayOfWeek": item['contestSchedule.dayOfWeek'],
      "teamA": item['contestSchedule.teamA'],
      "teamB": item['contestSchedule.teamB'],
      "name": item['user.name'],
      contestScheduleId: item.contestScheduleId,
      city: item['contestSchedule.city']
    });
  });
  list.rows = tmp;
  return {list};
}

/**
 * 个人中心-申请换班提交
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|{result, code: number, message: string}>}
 */
exports.applyExchangeScheduleSubmit = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {userId, userWorkScheduleId, userWorkScheduleIdReplaced} = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被封禁
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  const ContestSchedule = DB.getModel('contestSchedule');
  const UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });
  // 申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleId,
      userId: userId,
      isDelete: 0
    },
    include: [{
      model: ContestSchedule,
      attributes: ['id', 'contestTypeId', 'gameDate', 'gameTime', 'dayOfWeek', 'teamA', 'teamB'],
      required: true
    }]
  });
  // 被申请排班信息
  let offeree = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleIdReplaced,
      isDelete: 0
    },
    include: [{
      model: ContestSchedule,
      attributes: ['contestTypeId', 'gameDate', 'gameTime', 'dayOfWeek', 'teamA', 'teamB'],
      required: true
    }]
  });
  if (!apply || !offeree) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6004]);// 排班不存在
  }
  if (isInArray(config.changeType.applying, apply.changeType) && isInArray(config.changeStatus.inReview, apply.changeStatus)) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6005]);// 该排班已经申请换班/调班
  }

  // 检查被申请排班是否已经被其他人申请了换班/调班
  let change = await UserWorkScheduleChange.findOne({
    where: {
      offereeUserId: offeree.userId, // 被申请人ID
      offereeWorkScheduleId: offeree.id, // 被申请排班ID
      status: config.changeStatus.inReview,// 换班/调班正在审核中
      isDelete: 0
    }
  });
  if (change) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6007]);// 被换班的排班正在和其他的排班进行换班
  }
  // 判断申请用户在换到被申请排班的日期下的裁判状态是否允许此操作
  [refereeStatusCode, refereeStatusMsg] = await checkUserRefereeStatus(DB, userId, "applyExchangeScheduleSubmit", {applyDate: offeree.applyDate});
  if (refereeStatusCode !== 200) {
    throw errMsg.BadRequest.inherit(refereeStatusMsg);
  }
  let t = await DB.sequelize.transaction(); // 开始事务
  try {
    // 排班信息修改：
    await UserWorkSchedule.update({
      changeType: 1,
      changeStatus: 0
    }, {
      where: {
        id: userWorkScheduleId
      },
      transaction: t
    });

    // 生成换班/排班申请记录
    let doc = {
      applyType: 1, // 申请类型: 1换班申请 2调班申请
      applyUserId: userId, // 申请人ID
      applyWorkScheduleId: apply.id, // 申请人对应的排班ID
      offereeUserId: offeree.userId, // 被申请人ID
      offereeWorkScheduleId: offeree.id, // 被申请人对应的排班ID
    };
    let change = await UserWorkScheduleChange.create(doc, {
      transaction: t
    });

    // 申请人
    const User = DB.getModel('user');
    let user = await User.findByPk(userId);
    // 添加消息通知
    await addUserMessage(DB, {
      userId: offeree.userId, // 消息接收人
      type: 200, // 申请换班 发消息给 被换班人
      workScheduleChangeId: change.id, //
      contestTypeId: apply.contestTypeId,// 赛事类型ID
      content: { // 内容替换
        applyUser: user.name, // 申请人
        gameTimeOld: [
          apply.contestSchedule.gameDate,
          getWeekDayDesc(apply.contestSchedule.dayOfWeek),
          apply.contestSchedule.gameTime
        ].join(" "), // 原来的表赛时间
        teamOld: [
          apply.contestSchedule.teamA,
          apply.contestSchedule.teamB
        ].join(" vs "),
        judgeOld: positionReferee(apply.position, apply.side),
        gameTimeNew: [
          offeree.contestSchedule.gameDate,
          getWeekDayDesc(offeree.contestSchedule.dayOfWeek),
          offeree.contestSchedule.gameTime
        ].join(" "),
        teamNew: [
          offeree.contestSchedule.teamA,
          offeree.contestSchedule.teamB
        ].join(" vs "),
        judgeNew: positionReferee(offeree.position, offeree.side),
      }
    });

    // 生成赛程操作日志
    let logData = {
      "contestScheduleId": apply.contestSchedule.id,
      "userId": params.userId,// 操作人(申请人)
      "type": 201,// 申请换班
      "templateParams": {
        "applyUser": user.name, // 申请人
        "gameTimeOld": [apply.contestSchedule.gameDate, getWeekDayDesc(apply.contestSchedule.dayOfWeek), apply.contestSchedule.gameTime].join(" "),
        "teamOld": [apply.contestSchedule.teamA, apply.contestSchedule.teamB].join(" vs "),
        "positionOld": positionReferee(apply.position, apply.side),
        "gameTimeNew": [offeree.contestSchedule.gameDate, getWeekDayDesc(offeree.contestSchedule.dayOfWeek), offeree.contestSchedule.gameTime].join(" "),
        "teamNew": [offeree.contestSchedule.teamA, offeree.contestSchedule.teamB].join(" vs "),
        "positionNew": positionReferee(offeree.position, offeree.side),
      },
    };
    await addContestScheduleOperationLog(DB, logData);

    await t.commit(); // 提交事务
  } catch (e) {
    await t.rollback(); // 回滚
    throw errMsg.BadRequest.inherit(e.message);
  }

  return true;
}

/**
 * 申请换班取消
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.applyExchangeScheduleCancel = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    userWorkScheduleId,
    userWorkScheduleIdReplaced
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  const UserMessage = DB.getModel('userMessage');
  const UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  // 申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleId,
      userId: userId,
      isDelete: 0
    }
  });
  // 被申请排班信息
  let offeree = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleIdReplaced,
      isDelete: 0
    }
  });
  if (!apply || apply.changeType !== 1 || apply.changeStatus !== 0 || !offeree) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6004]);// 排班不存在
  }
  // 申请换班信息
  let change = await UserWorkScheduleChange.findOne({
    where: {
      applyType: 1,
      applyUserId: apply.userId,
      applyWorkScheduleId: apply.id, // 申请人对应的排班ID
      status: 0,
      isDelete: 0
    }
  });
  if (!change) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6004]);// 排班不存在
  }
  try {
    await DB.sequelize.transaction(async (t) => {
      // 申请排班信息
      await UserWorkSchedule.update({
        changeType: 0
      }, {
        where: {
          id: apply.id
        },
        transaction: t
      });

      // 申请换班信息
      await UserWorkScheduleChange.update({
        isDelete: 1
      }, {
        where: {
          id: change.id
        },
        transaction: t
      });

      // 被申请人待处理消息
      await UserMessage.update({
        isDelete: 1
      }, {
        where: {
          userId: offeree.userId,
          type: 200,
          workScheduleChangeId: change.id
        },
        transaction: t
      });

    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  return true;
}

/**
 * 个人中心-换班申请审核
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.applyExchangeScheduleAuth = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    userMessageId,
    changeStatus
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  const ContestSchedule = DB.getModel('contestSchedule');
  const UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  const User = DB.getModel('user');
  const UserMessage = DB.getModel('userMessage');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });
  // 获取待处理消息
  let message = await UserMessage.findByPk(userMessageId);
  if (!message || message.isDelete === 1 || message.type !== 200 || message.workScheduleChangeId === 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6012]);// 该消息不存在
  }
  if (message.isRead === 1) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6013]);// 该消息已经处理过
  }
  let workScheduleChangeId = parseInt(message.workScheduleChangeId); // 申请换班ID

  // 获取申请换班的信息
  let change = await UserWorkScheduleChange.findByPk(workScheduleChangeId);
  if (!change || change.isDelete === 1 || change.applyType !== 1 || change.offereeUserId !== userId) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6008]);// 换班/调班申请不存在
  }
  if (change.status !== 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6009]);// 换班/调班申请的被申请人已经审核过
  }

  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {"id": change.applyWorkScheduleId},
    include: {
      model: ContestSchedule,
      required: true
    }
  });
  if (!apply || apply.changeType !== 1 || apply.changeStatus !== 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6010]);// 申请换班/调班的排班出现异常
  }
  if (apply.status !== 3 || apply.isDelete === 1) {
    await UserMessage.update(
      {isRead: 1,}, {where: {id: userMessageId}}
    );
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6018]);
  }
  // 获取被申请排班信息
  let offeree = await UserWorkSchedule.findOne({
    where: {"id": change.offereeWorkScheduleId},
    include: {
      model: ContestSchedule,
      required: true
    }
  });
  if (!offeree) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6011]);// 被申请换班的排班出现异常
  }
  if (offeree.status !== 3 || offeree.isDelete === 1) {
    await UserMessage.update(
      {isRead: 1,}, {where: {id: userMessageId}}
    );
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6019]);
  }
  // 开始事务
  try {
    await DB.sequelize.transaction(async (t) => {

      // 申请排班信息【排班修改状态】调整
      let changeType = 1;
      if (changeStatus === 2) {
        changeType = 0; // 拒绝换班，回归到未申请
      }
      await UserWorkSchedule.update({
        changeType: changeType,
        changeStatus: changeStatus
      }, {
        where: {
          id: apply.id
        },
        transaction: t
      });

      // 申请换班的【状态】改变
      await UserWorkScheduleChange.update({
        status: changeStatus
      }, {
        where: {
          id: change.id
        },
        transaction: t
      });

      // 将待处理的审核信息改为【已处理】
      await UserMessage.update({
        isRead: 1
      }, {
        where: {
          id: userMessageId
        },
        transaction: t
      });

      // 发送消息
      let applyUser = await User.findByPk(apply.userId); // 申请人
      let offereeUser = await User.findByPk(offeree.userId); // 被申请人
      if (changeStatus === 1) { // 被申请人同意，发消息给对应赛事的所有的管理员
        // 获取赛程消息
        let schedule = await ContestSchedule.findByPk(apply.contestScheduleId);
        if (schedule && schedule.contestTypeId) {
          // 对应赛事所有的管理员
          let userIdArr = await allManagerByContestTypeId(DB, [schedule.contestTypeId], [1]);
          await addUserMessage(DB, {
            userId: userIdArr.join(','),
            type: 201, // 管理员收到换班申请审核信息
            workScheduleChangeId: change.id,
            contestTypeId: apply.contestTypeId,// 赛事类型ID
            content: { // 内容替换
              applyUser: applyUser.name, // 申请人
              offereeUser: offereeUser.name, // 被申请人
              type: "换班"
            }
          });
        }
      } else { // 被申请人拒绝，发送消息给申请人
        await addUserMessage(DB, {
          userId: applyUser.id, // 发给申请人
          type: 202, // 申请人收到【换班申请被拒绝】的消息
          workScheduleChangeId: change.id,
          contestTypeId: apply.contestTypeId,// 赛事类型ID
          content: { // 内容替换
            offereeUser: offereeUser.name, // 被申请人
          }
        });
      }

      // 生成赛程操作日志
      let operationType = 202;// 被申请人同意换班
      if (changeStatus === 2) {
        operationType = 203;// 被申请人拒绝换班
      }
      let logData = {
        "contestScheduleId": apply.contestSchedule.id,
        "userId": params.userId,// 操作人(被申请人)
        "type": operationType,
        "templateParams": {
          "offereeUser": offereeUser.name, // 被申请人
          "gameTimeOld": [apply.contestSchedule.gameDate, getWeekDayDesc(apply.contestSchedule.dayOfWeek), apply.contestSchedule.gameTime].join(" "),
          "teamOld": [apply.contestSchedule.teamA, apply.contestSchedule.teamB].join(" vs "),
          "positionOld": positionReferee(apply.position, apply.side),
          "gameTimeNew": [offeree.contestSchedule.gameDate, getWeekDayDesc(offeree.contestSchedule.dayOfWeek), offeree.contestSchedule.gameTime].join(" "),
          "teamNew": [offeree.contestSchedule.teamA, offeree.contestSchedule.teamB].join(" vs "),
          "positionNew": positionReferee(offeree.position, offeree.side),
        },
      };
      await addContestScheduleOperationLog(DB, logData);


    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  return true;
}

/**
 * 个人中心-调班申请时可选择的人员
 * @param server
 * @param params
 * @returns {Promise<{list: *}>}
 */
exports.applyAdjustScheduleList = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    userWorkScheduleId
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  const ContestSchedule = DB.getModel('contestSchedule');
  const User = DB.getModel('user');
  const UserIdentity = DB.getModel('userIdentity');
  const SysIdentity = DB.getModel('sysIdentity');
  UserIdentity.hasOne(SysIdentity, {
    foreignKey: 'id',
    sourceKey: 'identityId'
  });
  // 获取申请排班信息
  let apply = await UserWorkSchedule.findByPk(userWorkScheduleId);
  if (!apply || apply.status !== 3 || apply.contestScheduleId === 0 || apply.isDelete === 1) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6004]);// 排班不存在
  }
  if (isInArray(config.changeType.applying, apply.changeType) && isInArray(config.changeStatus.inReview, apply.changeStatus)) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6005]);// 该排班已经申请换班/调班
  }
  // 获取赛程信息
  let schedule = await ContestSchedule.findByPk(apply.contestScheduleId);
  let contestTypeId = schedule.contestTypeId; // 赛事类型ID
  let position = apply.position; // 位置

  // 获取对应赛事类型所有的超级管理员、管理员ID
  let managerIdArr = await allManagerByContestTypeId(DB, [contestTypeId], [config.sysPermissionType.MANAGER, config.sysPermissionType.FULLTIMEREFEREE]);

  // 获取对应赛事所有的【核心兼职】【自由兼职】
  let userIdArr = await allManagerByContestTypeId(DB, [contestTypeId], [config.sysPermissionType.COREREFEREE, config.sysPermissionType.FREEREFEREE]);
  let list = await UserIdentity.findAll({
    attributes: ['userId'],
    where: {
      userId: {
        [Op.in]: userIdArr
      },
      isDelete: 0
    },
    include: [{
      model: SysIdentity,
      attributes: ['id'],
      where: {
        position: position
      },
      required: true
    }],
    group: ['userId'],
  });
  // 符合条件用户ID
  let idArr = [];
  managerIdArr.map(id => {
    if (id !== userId && !isInArray(idArr, id)) {
      idArr.push(id);
    }
  });
  list.map(item => {
    if (!isInArray(idArr, item.userId)) {
      idArr.push(item.userId);
    }
  });

  // 过滤已经被安排在该申请排班的用户
  let inApplyUsers = await UserWorkSchedule.findAll({
    attributes: ['userId'],
    where: {
      status: 3,
      contestScheduleId: apply.contestScheduleId,
      isDelete: 0
    }
  });
  let idNotArr = [0];
  inApplyUsers.map(item => {
    idNotArr.push(item.userId);
  });


  // 获取用户信息
  let users = await User.findAll({
    attributes: [
      ['id', 'userId'], 'name', 'mobile', 'city'
    ],
    where: {
      isDelete: 0,
      forbidden: 0,
      status: config.userStatus.normalUser,// 视为【已通过】的状态
      city: schedule.city,
      [Op.and]: [{
        id: idArr
      },
        {
          id: {
            [Op.notIn]: idNotArr
          }
        }
      ]
    }
  });
  users.map(item => {
    item.name = item.name ? item.name : item.mobile;
  });
  return {list: users};
}

/**
 * 个人中心-申请调班提交
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|{result, code: number, message: string}>}
 */
exports.applyAdjustScheduleSubmit = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {userId, userWorkScheduleId, offereeId} = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  const UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  const ContestSchedule = DB.getModel('contestSchedule');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });

  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleId,
      userId: userId,
      status: 3,
      isDelete: 0
    },
    include: {
      model: ContestSchedule
    }
  });
  if (!apply || apply.contestTypeId === 0 || apply.contestId === 0 || apply.contestScheduleId === 0 || apply.position === 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6004]);// 排班不存在
  }
  if (isInArray(config.changeType.applying, apply.changeType) && isInArray(config.changeStatus.inReview, apply.changeStatus)) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6005]);// 该排班已经申请换班/调班
  }
  if (userId === offereeId) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6014]);// 被调班人不得是自己
  }

  // 开始事务
  try {
    await DB.sequelize.transaction(async (t) => {
      // 申请排班信息修改
      await UserWorkSchedule.update({
        changeType: 2,
        changeStatus: 0
      }, {
        where: {
          id: userWorkScheduleId
        },
        transaction: t
      });

      // 新增申请调班记录
      let doc = {
        applyType: 2, // 申请类型: 1换班申请 2调班申请
        applyUserId: userId, // 申请人ID
        applyWorkScheduleId: apply.id, // 申请人对应的排班ID
        offereeUserId: offereeId, // 被申请人ID
      };
      let change = await UserWorkScheduleChange.create(doc, {
        transaction: t
      });

      // 申请人
      const User = DB.getModel('user');
      let user = await User.findByPk(userId);
      // 添加消息通知
      await addUserMessage(DB, {
        userId: offereeId, // 消息接收人
        type: 300, // 申请调班 发消息给 被调班人
        workScheduleChangeId: change.id, //
        contestTypeId: apply.contestTypeId,// 赛事类型ID
        content: { // 内容替换
          applyUser: user.name, // 申请人
          gameTime: [
            apply.contestSchedule.gameDate,
            getWeekDayDesc(apply.contestSchedule.dayOfWeek),
            apply.contestSchedule.gameTime
          ].join(" "), // 比赛时间
          team: [
            apply.contestSchedule.teamA,
            apply.contestSchedule.teamB
          ].join(" vs "),
          judge: positionReferee(apply.position, apply.side)
        }
      });

      // 生成赛程操作日志
      let applyUser = await DB.getModel("user").findByPk(params.userId);
      let offereeUser = await DB.getModel("user").findByPk(params.offereeId);
      let logData = {
        "contestScheduleId": apply.contestSchedule.id,
        "userId": params.userId,// 操作人(申请人)
        "type": 301,// 申请调班
        "templateParams": {
          "applyUser": applyUser.name, // 被申请人
          "gameTime": [apply.contestSchedule.gameDate, getWeekDayDesc(apply.contestSchedule.dayOfWeek), apply.contestSchedule.gameTime].join(" "),
          "team": [apply.contestSchedule.teamA, apply.contestSchedule.teamB].join(" vs "),
          "position": positionReferee(apply.position, apply.side),
          "judgeOld": applyUser.name,
          "judgeNew": offereeUser.name,
        },
      };
      await addContestScheduleOperationLog(DB, logData);

    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  return true;
}

/**
 * 个人中心-申请调班取消
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.applyAdjustScheduleCancel = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    userWorkScheduleId,
    offereeUserId
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  const UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  const UserMessage = DB.getModel('userMessage');

  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleId,
      userId: userId,
      status: 3,
      changeType: 2,
      changeStatus: 0,
      isDelete: 0
    }
  });
  if (!apply) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6004]);// 排班不存在
  }
  // 申请调班信息
  let change = await UserWorkScheduleChange.findOne({
    where: {
      applyType: 2,
      applyUserId: apply.userId,
      applyWorkScheduleId: apply.id,
      offereeUserId: offereeUserId,
      status: 0,
      isDelete: 0
    }
  });
  if (!change) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6004]);// 排班不存在
  }

  try {
    await DB.sequelize.transaction(async (t) => {
      // 申请排班信息修改
      await UserWorkSchedule.update({
        changeType: 0
      }, {
        where: {
          id: apply.id
        },
        transaction: t
      });

      // 申请调班信息修改
      await UserWorkScheduleChange.update({
        isDelete: 1
      }, {
        where: {
          id: change.id
        },
        transaction: t
      });

      // 被申请人消息通知删除
      await UserMessage.update({
        isDelete: 1
      }, {
        where: {
          userId: offereeUserId,
          type: 300,
          workScheduleChangeId: change.id
        },
        transaction: t
      });


    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }

  return true;
}

/**
 * 个人中心-申请调班审核
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|{code: number, message}>}
 */
exports.applyAdjustScheduleAuth = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    userMessageId,
    changeStatus
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  const UserWorkSchedule = DB.getModel('userWorkSchedule');
  const ContestSchedule = DB.getModel('contestSchedule');
  const UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  const User = DB.getModel('user');
  const UserMessage = DB.getModel('userMessage');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });
  // 获取待处理消息
  let message = await UserMessage.findByPk(userMessageId);
  if (!message || message.isDelete === 1 || message.type !== 300 || message.workScheduleChangeId === 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6012]);// 该消息不存在
  }
  if (message.isRead === 1) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6013]);// 该消息已经处理过
  }
  let workScheduleChangeId = parseInt(message.workScheduleChangeId); // 申请调班ID

  // 获取申请调班的信息
  let change = await UserWorkScheduleChange.findByPk(workScheduleChangeId);
  if (!change || change.isDelete === 1 || change.applyType !== 2 || change.offereeUserId !== userId) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6008]);// 换班/调班申请不存在
  }
  if (change.status !== 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6009]);// 换班/调班申请的被申请人已经审核过
  }

  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {id: change.applyWorkScheduleId},
    include: {model: ContestSchedule, required: true}
  });
  if (!apply || apply.changeType !== 2 || apply.changeStatus !== 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6010]);// 申请换班/调班的排班出现异常
  }
  if (apply.status !== 3 || apply.isDelete === 1) {
    await UserMessage.update(
      {isRead: 1,}, {where: {id: userMessageId}}
    );
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6018]);
  }

  // 开始事务
  try {
    await DB.sequelize.transaction(async (t) => {

      // 申请排班信息【排班修改状态】调整
      let changeType = 2;
      if (changeStatus === 2) {
        changeType = 0; // 拒绝后，回归到没有申请
      }
      await UserWorkSchedule.update({
        changeType: changeType,
        changeStatus: changeStatus
      }, {
        where: {
          id: apply.id
        },
        transaction: t
      });

      // 申请调班的【状态】改变
      await UserWorkScheduleChange.update({
        status: changeStatus
      }, {
        where: {
          id: change.id
        },
        transaction: t
      });

      // 将待处理的审核信息改为【已处理】
      await UserMessage.update({
        isRead: 1
      }, {
        where: {
          id: userMessageId
        },
        transaction: t
      });

      // 发送消息
      let applyUser = await User.findByPk(apply.userId); // 申请人
      let offereeUser = await User.findByPk(change.offereeUserId); // 被申请人
      if (changeStatus === 1) { // 被申请人同意，发消息给对应赛事的所有的管理员
        if (apply.contestTypeId) {
          // 对应赛事所有的管理员
          let userIdArr = await allManagerByContestTypeId(DB, [apply.contestTypeId], [1]);
          await addUserMessage(DB, {
            userId: userIdArr.join(','),
            type: 301, // 管理员收到调班申请审核信息
            workScheduleChangeId: change.id,
            contestTypeId: apply.contestTypeId,// 赛事类型ID
            content: { // 内容替换
              applyUser: applyUser.name, // 申请人
              offereeUser: offereeUser.name, // 被申请人
              type: "调班"
            }
          });
        }
      } else { // 被申请人拒绝，发送消息给申请人
        await addUserMessage(DB, {
          userId: applyUser.id, // 发给申请人
          type: 302, // 申请人收到【调班申请被拒绝】的消息
          workScheduleChangeId: change.id,
          contestTypeId: apply.contestTypeId,// 赛事类型ID
          content: { // 内容替换
            offereeUser: offereeUser.name, // 被申请人
          }
        });
      }

      // 生成赛程操作日志
      let operationType = 302;// 被申请人同意调班
      if (changeStatus === 2) {
        operationType = 303;// 被申请人拒绝调班
      }
      let logData = {
        "contestScheduleId": apply.contestSchedule.id,
        "userId": params.userId,// 操作人(被申请人)
        "type": operationType,
        "templateParams": {
          "offereeUser": offereeUser.name, // 被申请人
          "gameTime": [apply.contestSchedule.gameDate, getWeekDayDesc(apply.contestSchedule.dayOfWeek), apply.contestSchedule.gameTime].join(" "),
          "team": [apply.contestSchedule.teamA, apply.contestSchedule.teamB].join(" vs "),
          "position": positionReferee(apply.position, apply.side),
          "judgeOld": applyUser.name,
          "judgeNew": offereeUser.name,
        },
      };
      await addContestScheduleOperationLog(DB, logData);

    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }

  return true;
}
"use strict";

const {
  userMessageTypeMap
} = require("../config/userMessage");
const {
  isoDateFormat
} = require("../lib/date");
const {
  isInArray
} = require("./apiBase");
const config = require("../config/config");
const {Op} = require("sequelize");
const {checkUserForbidden} = require("./check/userRefereeStatus");

/**
 * 消息通知列表
 * @param server
 * @param params
 * @returns {Promise<{list: *}>}
 */
exports.list = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    type, isRead, contestTypeId,
    page,
    pageNum
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  const UserMessage = DB.getModel('userMessage');

  let where = {userId: userId, isDelete: 0};
  if (isInArray(userMessageTypeMap.bigType.all, type)) {
    where.type = userMessageTypeMap.bigType[type];// 消息类型筛选
  }
  switch (isRead) {
    case 1:
      where.isRead = 1;
      break;// 已处理
    case 2:
      where.isRead = 0;
      break;// 未处理
  }
  if (isInArray(config.sysContestType.all, contestTypeId)) {
    where.contestTypeId = contestTypeId;// 赛事类型筛选
  }
  let limit = pageNum;
  let offset = (page - 1) * limit;
  let list = await UserMessage.findAndCountAll({
    attributes: [
      ['id', 'messageId'], 'type', 'message', 'workScheduleChangeId', 'isRead', 'createdAt'
    ],
    where: where,
    limit,
    offset,
    order: [
      ["isRead", "asc"],
      ["id", "desc"],
    ],
    raw: true
  });
  list.rows.map(item => {
    item.createdAt = isoDateFormat(item.createdAt, 'YYYY-MM-DD');
  });
  return {
    list
  };
}

/**
 * 消息通知-设为已读
 * @param server
 * @param params
 * @returns {Promise<boolean>}
 */
exports.read = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  let {
    userId,
    userMessageId
  } = params;
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  const UserMessage = DB.getModel('userMessage');
  let userMessage = await UserMessage.findOne({
    where: {
      id: userMessageId,
      userId: userId,
      isRead: 0,
      isDelete: 0
    },
    raw: true
  });
  // 消息存在，且不是在消息通知页面处理的消息
  if (userMessage && !isInArray(userMessageTypeMap.unableSetHadRead, userMessage.type)) {
    await UserMessage.update({
      isRead: 1
    }, {
      where: {
        id: userMessage.id
      }
    });
  }
  return true;
}

// 生成消息记录
function generateBulkCreateArr(data) {
  let {userId, type, content, workScheduleChangeId, contestTypeId} = data;
  let message = userMessageTypeMap[type] ?? ""; // 消息内容
  // 消息模板变量替换
  for (let param in content) {
    message = message.replace('{{' + param + '}}', content[param]);
  }
  if (!workScheduleChangeId) workScheduleChangeId = 0;
  if (!contestTypeId) contestTypeId = 0;
  let isRead = 0;// 默认消息未读
  if (isInArray(userMessageTypeMap.defaultHadRead, type)) {
    isRead = 1;
  }
  // 判断是否要发送短信
  let isSms = 0;
  let templateId = userMessageTypeMap['templateId'][type] ?? "";
  let smsParams = [];
  if (templateId !== "") {
    isSms = 1;
    for (let param in content) {
      smsParams.push("【" + content[param] + "】");
    }
  }
  smsParams = JSON.stringify(smsParams);
  // 可能回同时给多个用户发送消息
  let userIdArr = userId.toString().split(',');
  let bulkCreateArr = [];
  userIdArr.map(id => {
    bulkCreateArr.push({
      userId: id, // 消息接收人ID
      type,
      message,
      workScheduleChangeId,
      contestTypeId,
      isRead,
      isSms,
      templateId,
      smsParams
    });
  });
  return bulkCreateArr;
}

// 消息记录写入数据库
async function insertUserMessage(DB, bulkCreateArr) {
  if (bulkCreateArr.length > 0) {
    const UserMessage = DB.getModel("userMessage");
    await UserMessage.bulkCreate(bulkCreateArr);
  }
}


/**
 * 生成消息通知
 * @param DB
 * @param data
 * @returns {Promise<*[]>}
 */
exports.addUserMessage = async (DB, data) => {
  let {
    userId,
    type,
    content,
    workScheduleChangeId,
    contestTypeId,
    operationType,// 操作类型
    bulkCreateArr// 消息记录数组
  } = data;
  /*
    操作类型：
        1 生成消息记录并插入数据库(默认操作)
        2 仅仅生成消息记录数组
        3 仅仅插入数据库
   */
  if (!operationType) {
    operationType = 1;
  }
  let docArr = [];
  switch (operationType) {
    case 1 :
      docArr = generateBulkCreateArr(data);
      if (docArr.length > 0) {
        await insertUserMessage(DB, docArr);
      }
      break;
    case 2 :
      docArr = generateBulkCreateArr(data);
      break;
    case 3 :
      // console.info(bulkCreateArr.length);
      await insertUserMessage(DB, bulkCreateArr);
      break;
  }
  if (operationType === 2) {
    return docArr;
  }
};
/**
 * 未读消息总数
 * @param DB
 * @param data
 * @returns {Promise<void>}
 */
exports.noRead = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  const UserMessage = await DB.getModel('userMessage').findAndCountAll({
    where: {
      userId: params.userId,
      isRead: 0,
      isDelete: 0
    },
    raw: true
  });
  return UserMessage.count;
};

/**
 * 消息通知-一键已读
 * @param server
 * @param params
 * @returns {Promise<boolean>}
 */
exports.userMessageReadAll = async (server, params) => {
  const DB = server.plugins['hapi-sequelizejs'][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  const UserMessage = await DB.getModel('userMessage');
  await UserMessage.update({
    isRead: 1
  }, {
    where: {
      userId: params.userId,
      type: {[Op.notIn]: userMessageTypeMap.unableSetHadRead}
    }
  });
  return true;
};
"use strict";

const {
  isInArray,
  getUserInfo,
  weekDay, positionReferee
} = require("./apiBase");
const {
  checkUserPermission
} = require("./check/userPermission");

const {
  addUserMessage
} = require("./userMessage");
const {
  Op
} = require('sequelize');
const {
  allManagerByContestTypeId
} = require("./user/getUsers");
const config = require("../config/config");
const errMsg = require('../config/errMsg');
const {retCodeMsgMap} = require("../config/retCode");
const {getWeekDayDesc} = require("../lib/date");
const {addContestScheduleOperationLog} = require("./v2/contestScheduleOperationLog");
const {checkUserRefereeStatusIsFreeze, checkUserForbidden,checkUserFreeze} = require("./check/userRefereeStatus");

/**
 * 人员排班-日历信息
 * @param server
 * @param params
 * @returns {Promise<{judgeList: *, dateSchedule: *[]}>}
 */
exports.calendarInfo = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  // 管理员ID
  let {
    contestTypeId,
    dateStr
  } = params;
  let dateArr = dateStr.split(",");
  let Contest = DB.getModel('contest'); // 赛事 model
  let ContestSchedule = DB.getModel('contestSchedule'); // 赛程 model
  ContestSchedule.hasOne(Contest, {
    foreignKey: 'id',
    sourceKey: 'contestId'
  });
  let User = DB.getModel('user');
  let CityData = DB.getModel('cityData');
  User.hasOne(CityData, {foreignKey: 'city', sourceKey: 'city'});
  let UserWorkSchedule = DB.getModel('userWorkSchedule');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });
  let UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  UserWorkScheduleChange.hasOne(User, {
    foreignKey: 'id',
    sourceKey: 'offereeUserId'
  });
  UserWorkScheduleChange.hasOne(UserWorkSchedule, {
    foreignKey: 'id',
    sourceKey: 'offereeWorkScheduleId'
  });

  // 初始化日程对应的赛程安排列表
  let dateSchedule = [];
  dateArr.map(date => {
    dateSchedule.push({
      date: date,
      dayOfWeek: new Date(date).getDay(), // 通过比赛日期转化周几,
      contestSchedule: [], // 赛程
    });
  });

  // 获取日期范围内所有的赛程
  let scheduleList = await ContestSchedule.findAll({
    attributes: [
      ['id', 'contestScheduleId'], 'gameDate', 'gameTime', 'dayOfWeek', 'teamA', 'teamB', 'city'
    ],
    order: [['gameTime', 'asc']],
    where: {
      contestTypeId: contestTypeId,
      gameDate: {
        [Op.in]: dateArr
      },
      isDelete: 0
    },
    include: {
      model: Contest,
      attributes: ['id', 'name'],
      where: {
        isPublish: 1
      },
      required: true
    },
  });
  scheduleList.map(item => {
    item.dayOfWeek = new Date(item.gameDate).getDay(); // 通过比赛日期转化周几
    dateSchedule.map(item2 => {
      if (item.gameDate === item2.date) {
        item2.contestSchedule.push(item);
      }
    });
  });

  // 获取可以执法对应赛事类型的比赛的的用户
  let allUserIdArr = await allManagerByContestTypeId(DB, [contestTypeId]);
  let judgeList = await User.findAll({
    attributes: [
      ['id', 'userId'], 'name', 'mobile', 'city', 'refereeStatus', 'freezeStart', 'freezeEnd'
    ],
    where: {
      id: allUserIdArr,
      status: config.userStatus.normalUser,// 视为【已通过】的状态
      forbidden: 0,
      isDelete: 0
    },
    include: {
      model: CityData,
      attributes: [],
      order: [['city', 'asc']],
    },

    raw: true
  });
  judgeList.map(async item => {
    if (!item.name) {
      item.name = item.mobile;
    }
    if (item.city) {
      item.name += "(" + item.city + ")";
    }
    let freezeStatus = await checkUserRefereeStatusIsFreeze(item);
    if (freezeStatus) {
      item.name += "(" + config.refereeStatus.freezeDes + ")";
    }
    item.dateWorkSchedule = [];
    dateArr.map(date => {
      item.dateWorkSchedule.push({
        date: date,
        list: []
      });
    });
  });
  // 获取所有用户的人员排班
  let applyList = await UserWorkSchedule.findAll({
    attributes: [
      ['id', 'userWorkScheduleId'], 'userId', 'status', 'applyDate', 'side','applyWorkRemark', 'contestScheduleId', 'position', 'changeType', 'changeStatus'
    ],
    where: {
      userId: {
        [Op.in]: allUserIdArr
      },
      status: config.userWorkScheduleStatus.showFront,// 可以展示在前端页面的排班状态
      contestTypeId: [0, contestTypeId],
      applyDate: dateArr,
      isDelete: 0
    }, //
    include: {
      model: ContestSchedule,
      attributes: ['gameTime', 'teamA', 'teamB'],
    },
  });
  applyList.map(data => {
    let item = data.dataValues;
    judgeList.map(item2 => {
      if (item.userId === item2.userId) {
        item2.dateWorkSchedule.map(item3 => {
          if (item.applyDate === item3.date) {
            item3.list.push(item);
          }
        });
      }
    });
  });
  return {dateSchedule, judgeList}
};

/**
 * 人员排班-申请排班审核【管理员审核】
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.applyScheduleAuth = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  // 管理员ID
  let {
    userId,
    userWorkScheduleId,
    status
  } = params;
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'userSchedule-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);

  let UserWorkSchedule = DB.getModel('userWorkSchedule');
  let UserMessage = DB.getModel('userMessage');
  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {
      id: userWorkScheduleId,
      isDelete: 0
    }
  });
  if (!apply) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6015]);// 申请排班不存在
  }
  if (apply.status !== 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6016]);// 申请排班已经审核过
  }

  try {
    await DB.sequelize.transaction(async (t) => {
      // 申请排班更新
      let isDelete = 0;
      if (status === 2) {
        isDelete = 1;
      }
      UserWorkSchedule.update({
        status: status, isDelete: isDelete
      }, {
        where: {
          id: userWorkScheduleId
        },
        transaction: t
      });

      // 更新消息通知
      UserMessage.update({
        isRead: 1
      }, {
        where: {
          type: apply,
          workScheduleChangeId: userWorkScheduleId
        },
        transaction: t
      });

      // 发消息给申请人
      let type = 401; // 核心兼职一周内提交可排班天数不足2天，未通过管理员审核
      if (status === 1) {
        type = 402; // 核心兼职一周内提交可排班天数不足2天，已通过管理员审核
      }
      await addUserMessage(DB, {
        userId: apply.userId, // 消息接收人
        type: type,
        workScheduleChangeId: apply.id, // userWorkSchedule表主键id
        content: {
          "applyDate": apply.applyDate
        }
      });
    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  return true;
};

/**
 * 人员排班-申请换班详情
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|{offeree: *, apply: *}>}
 */
exports.exchangeScheduleDetail = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  // 管理员ID
  let {
    userWorkScheduleId
  } = params;
  let UserWorkSchedule = DB.getModel('userWorkSchedule');
  let UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  let ContestSchedule = DB.getModel('contestSchedule');
  let User = DB.getModel('user');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });
  UserWorkSchedule.hasOne(User, {
    foreignKey: 'id',
    sourceKey: 'userId'
  });
  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    attributes: [
      ['id', 'userWorkScheduleId'], 'userId', 'applyDate', 'position'
    ],
    where: {
      id: userWorkScheduleId,
      isDelete: 0,
      status: 3
    },
    include: [{
      model: User,
      attributes: ['name', 'mobile'],
    },
      {
        model: ContestSchedule,
        attributes: ['teamA', 'teamB'],
        required: true
      }
    ],
    //raw: true
  });
  if (!apply) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6015]);// 申请排班不存在
  }
  apply = apply.dataValues;
  // 获取申请换班信息
  let change = await UserWorkScheduleChange.findOne({
    where: {
      applyType: 1,
      applyUserId: apply.userId,
      applyWorkScheduleId: apply.userWorkScheduleId,
      status: 1,
      isDelete: 0
    }
  });
  if (!change || change.offereeUserId === 0 || change.offereeWorkScheduleId === 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6008]);// 换班/调班申请不存在
  }

  // 被申请的排班信息
  let offeree = await UserWorkSchedule.findOne({
    attributes: ['applyDate', 'position'],
    where: {
      id: change.offereeWorkScheduleId,
      isDelete: 0
    },
    include: [{
      model: User,
      attributes: ['name', 'mobile'],
    },
      {
        model: ContestSchedule,
        attributes: ['teamA', 'teamB'],
        required: true
      }
    ],
    //raw: true
  });
  if (!offeree) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6011]);// 被申请换班的排班出现异常
  }
  return {
    apply,
    offeree
  };
};

/**
 * 人员排班-申请换班审核【管理员审核】
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.exchangeScheduleAuth = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  // 管理员ID
  let {
    userId,
    userWorkScheduleId,
    status
  } = params;
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'userSchedule-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);

  let UserWorkSchedule = DB.getModel('userWorkSchedule');
  let UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  let UserMessage = DB.getModel('userMessage');
  let User = DB.getModel('user');
  const ContestSchedule = DB.getModel('contestSchedule');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });
  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {id: userWorkScheduleId},
    include: {model: ContestSchedule, required: true}
  });
  if (!apply) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6015]);// 申请排班不存在
  }
  // 获取申请换班信息
  let change = await UserWorkScheduleChange.findOne({
    where: {
      applyType: 1,
      applyUserId: apply.userId,
      applyWorkScheduleId: apply.id,
      status: 1,
      isDelete: 0
    }
  });
  if (!change || change.offereeUserId === 0 || change.offereeWorkScheduleId === 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6008]);// 换班/调班申请不存在
  }
  if (apply.status !== 3 || apply.contestTypeId === 0 || apply.contestId === 0 || apply.contestScheduleId === 0 || apply.position === 0 || apply.changeType !== 1 || apply.changeStatus !== 1 || apply.isDelete === 1) {
    // 用户消息改为已处理
    await UserMessage.update({
      isRead: 1
    }, {
      where: {
        type: 201,
        workScheduleChangeId: change.id
      }
    });
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6018]);
  }

  // 被申请的排班信息
  let offeree = await UserWorkSchedule.findOne({
    where: {id: change.offereeWorkScheduleId},
    include: {model: ContestSchedule, required: true}
  });
  if (!offeree) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6011]);// 被申请换班的排班出现异常
  }
  if (offeree.isDelete === 1) {
    // 用户消息改为已处理
    await UserMessage.update({
      isRead: 1
    }, {
      where: {
        type: 201,
        workScheduleChangeId: change.id
      }
    });
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6019]);
  }

  // 开始事务
  try {
    await DB.sequelize.transaction(async (t) => {
      // 申请排班信息修改
      let docApply = {
        changeStatus: status,
        changeType: 0
      }; // 无论是同意还是拒绝，【排班修改类型】变为没有申请
      if (status === 3) { // 同意
        docApply.applyDate = offeree.applyDate;
        docApply.contestTypeId = offeree.contestTypeId;
        docApply.contestId = offeree.contestId;
        docApply.contestScheduleId = offeree.contestScheduleId;
        docApply.position = offeree.position;
      }
      await UserWorkSchedule.update(
        docApply, {
          where: {
            id: apply.id
          },
          transaction: t
        }
      );

      // 被申请排班信息修改
      if (status === 3) {
        await UserWorkSchedule.update({
          applyDate: apply.applyDate,
          contestTypeId: apply.contestTypeId,
          contestId: apply.contestId,
          contestScheduleId: apply.contestScheduleId,
          position: apply.position,
          changeType: 0,
          changeStatus: 0
        }, {
          where: {
            id: offeree.id
          },
          transaction: t
        });
      }

      // 申请换班信息修改
      await UserWorkScheduleChange.update({
        status: status
      }, {
        where: {
          id: change.id
        },
        transaction: t
      });

      // 用户消息改为已处理
      await UserMessage.update({
        isRead: 1
      }, {
        where: {
          type: 201,
          workScheduleChangeId: change.id
        },
        transaction: t
      });

    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  // 发送消息给申请人
  let msgType = 203; // 默认管理员同意
  if (status === 4) {
    msgType = 204; // 管理员拒绝
  }
  let applyUser = await User.findByPk(apply.userId);
  if (applyUser) {
    await addUserMessage(DB, {
      userId: apply.userId, // 消息接收人
      type: msgType,
      workScheduleChangeId: change.id, // userWorkScheduleChange 表主键id
      contestTypeId: apply.contestTypeId,// 赛事类型ID
      content: {
        offereeUser: applyUser.name,
        type: "换班"
      }
    });
  }
  if (msgType === 203) {
    let offereeUser = await User.findByPk(offeree.userId);
    if (offereeUser) {
      await addUserMessage(DB, {
        userId: offeree.userId, // 消息接收人
        type: 205,
        workScheduleChangeId: change.id, // userWorkScheduleChange 表主键id
        contestTypeId: apply.contestTypeId,// 赛事类型ID
        content: {
          applyUser: offereeUser.name,
          type: "换班"
        }
      });
    }
  }

  // 生成赛程操作日志
  let operationType = 204;// 管理员同意换班
  if (status === 4) {
    operationType = 205;// 管理员拒绝换班
  }
  let logData = {
    "contestScheduleId": apply.contestSchedule.id,
    "userId": params.userId,// 操作人(被申请人)
    "type": operationType,
    "templateParams": {
      "gameTimeOld": [apply.contestSchedule.gameDate, getWeekDayDesc(apply.contestSchedule.dayOfWeek), apply.contestSchedule.gameTime].join(" "),
      "teamOld": [apply.contestSchedule.teamA, apply.contestSchedule.teamB].join(" vs "),
      "positionOld": positionReferee(apply.position, apply.side),
      "gameTimeNew": [offeree.contestSchedule.gameDate, getWeekDayDesc(offeree.contestSchedule.dayOfWeek), offeree.contestSchedule.gameTime].join(" "),
      "teamNew": [offeree.contestSchedule.teamA, offeree.contestSchedule.teamB].join(" vs "),
      "positionNew": positionReferee(offeree.position, offeree.side),
    },
  };
  await addContestScheduleOperationLog(DB, logData);


  return true;
};

/**
 * 人员排班-申请调班详情
 * @param server
 * @param params
 * @returns {Promise<{offeree: {name, mobile: *}, apply: *}>}
 */
exports.adjustScheduleDetail = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  // 管理员ID
  let {
    userId,
    userWorkScheduleId
  } = params;
  let UserWorkSchedule = DB.getModel('userWorkSchedule');
  let UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  let ContestSchedule = DB.getModel('contestSchedule');
  let User = DB.getModel('user');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });
  UserWorkSchedule.hasOne(User, {
    foreignKey: 'id',
    sourceKey: 'userId'
  });
  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    attributes: [
      ['id', 'userWorkScheduleId'], 'userId', 'applyDate', 'position'
    ],
    where: {
      id: userWorkScheduleId,
      isDelete: 0,
      status: 3
    },
    include: [{
      model: User,
      attributes: ['name', 'mobile'],
    },
      {
        model: ContestSchedule,
        attributes: ['teamA', 'teamB'],
        required: true
      }
    ],
    //raw: true
  });
  if (!apply) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6015]);// 申请排班不存在
  }
  apply = apply.dataValues;

  // 获取申请调班信息
  let change = await UserWorkScheduleChange.findOne({
    where: {
      applyType: 2,
      applyUserId: apply.userId,
      applyWorkScheduleId: apply.userWorkScheduleId,
      status: 1,
      isDelete: 0
    }
  });
  if (!change || change.offereeUserId === 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6008]);// 换班/调班申请不存在
  }

  // 获取被申请人信息
  let offereeUser = await User.findByPk(change.offereeUserId);
  if (!offereeUser || offereeUser.isDelete === 1 || offereeUser.forbidden === 1 || !isInArray(config.userStatus.normalUser, offereeUser.status)) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6017]);// 被调班人状态异常
  }
  let offeree = {
    name: offereeUser.name,
    mobile: offereeUser.mobile
  };
  return {
    apply,
    offeree
  };

};

/**
 * 人员排班-申请调班审核【管理员审核】
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|boolean>}
 */
exports.adjustScheduleAuth = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  // 管理员ID
  let {
    userId,
    userWorkScheduleId,
    status
  } = params;
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'userSchedule-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);

  let UserWorkSchedule = DB.getModel('userWorkSchedule');
  let UserWorkScheduleChange = DB.getModel('userWorkScheduleChange');
  let UserMessage = DB.getModel('userMessage');
  let User = DB.getModel('user');
  const ContestSchedule = DB.getModel('contestSchedule');
  UserWorkSchedule.hasOne(ContestSchedule, {
    foreignKey: 'id',
    sourceKey: 'contestScheduleId'
  });
  // 获取申请排班信息
  let apply = await UserWorkSchedule.findOne({
    where: {id: userWorkScheduleId},
    include: {model: ContestSchedule, required: true}
  });
  if (!apply) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6015]);// 申请排班不存在
  }
  // 获取申请调班信息
  let change = await UserWorkScheduleChange.findOne({
    where: {
      applyType: 2,
      applyUserId: apply.userId,
      applyWorkScheduleId: apply.id,
      status: 1,
      isDelete: 0
    }
  });
  if (!change || change.offereeUserId === 0) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6008]);// 换班/调班申请不存在
  }
  // 申请排班信息异常
  if (apply.status !== 3 || apply.contestTypeId === 0 || apply.contestId === 0 || apply.contestScheduleId === 0 || apply.position === 0 || apply.changeType !== 2 || apply.changeStatus !== 1 || apply.isDelete === 1) {
    // 用户消息改为已处理
    await UserMessage.update({
      isRead: 1
    }, {
      where: {
        type: 201,
        workScheduleChangeId: change.id
      }
    });
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6018]);
  }

  // 获取被申请人信息
  let offereeUser = await User.findByPk(change.offereeUserId);
  if (!offereeUser || offereeUser.isDelete === 1 || offereeUser.forbidden === 1 || !isInArray(config.userStatus.normalUser, offereeUser.status)) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[6017]);// 被调班人状态异常
  }

  // 开始事务
  try {
    await DB.sequelize.transaction(async (t) => {
      // 申请排班信息修改
      let docApply = {
        changeStatus: status,
        changeType: 0
      }; // 无论是同意还是拒绝，【排班修改类型】变为没有申请
      if (status === 3) { // 同意
        docApply.userId = offereeUser.id;
      }
      await UserWorkSchedule.update(
        docApply, {
          where: {
            id: apply.id
          },
          transaction: t
        }
      );

      // 删除被申请人在比赛当天的申请排班信息
      await UserWorkSchedule.update(
        {isDelete: 1},
        {
          where: {
            userId: offereeUser.id,
            status: config.userWorkScheduleStatus.notSchedule,
            applyDate: apply.applyDate
          },
          transaction: t
        }
      );


      // 申请调班信息修改
      await UserWorkScheduleChange.update({
        status: status
      }, {
        where: {
          id: change.id
        },
        transaction: t
      });

      // 用户消息改为已处理
      await UserMessage.update({
        isRead: 1
      }, {
        where: {
          type: 301,
          workScheduleChangeId: change.id
        },
        transaction: t
      });

    });
  } catch (e) {
    throw errMsg.BadRequest.inherit(e.message);
  }
  // 发送消息给申请人
  let msgType = 303; // 默认管理员同意
  if (status === 4) {
    msgType = 304; // 管理员拒绝
  }
  let applyUser = await User.findByPk(apply.userId);
  if (applyUser) {
    await addUserMessage(DB, {
      userId: apply.userId, // 消息接收人
      type: msgType,
      workScheduleChangeId: change.id, // userWorkScheduleChange 表主键id
      contestTypeId: apply.contestTypeId,// 赛事类型ID
      content: {
        offereeUser: offereeUser.name,
        type: '调班'
      }
    });
  }
  if (msgType === 303) {
    await addUserMessage(DB, {
      userId: offereeUser.id, // 消息接收人
      type: 305,
      workScheduleChangeId: change.id, // userWorkScheduleChange 表主键id
      contestTypeId: apply.contestTypeId,// 赛事类型ID
      content: {
        applyUser: applyUser.name,
        type: '调班'
      }
    });
  }

  // 生成赛程操作日志
  let operationType = 304;// 管理员同意调班
  if (status === 4) {
    operationType = 305;// 管理员拒绝调班
  }
  let logData = {
    "contestScheduleId": apply.contestSchedule.id,
    "userId": params.userId,// 操作人
    "type": operationType,
    "templateParams": {
      "gameTime": [apply.contestSchedule.gameDate, getWeekDayDesc(apply.contestSchedule.dayOfWeek), apply.contestSchedule.gameTime].join(" "),
      "team": [apply.contestSchedule.teamA, apply.contestSchedule.teamB].join(" vs "),
      "position": positionReferee(apply.position, apply.side),
      "judgeOld": applyUser.name,
      "judgeNew": offereeUser.name,
    },
  };
  await addContestScheduleOperationLog(DB, logData);


  return true;
};

/**
 * 人员排班-裁判在某个赛程可执法的位置
 * @param server
 * @param params
 * @returns {Promise<{code: number, message: *}|{position: *[]}>}
 */
exports.canJudgePosition = async (server, params) => {
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  // 管理员ID
  let {
    refereeId,
    contestScheduleId
  } = params;
  let ContestSchedule = DB.getModel('contestSchedule');
  // 获取赛程信息
  let schedule = await ContestSchedule.findOne({
    attributes: ['contestTypeId'],
    where: {
      id: contestScheduleId,
      isDelete: 0
    },
    raw: true
  });
  if (!schedule) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[7000]);// 赛程不存在
  }
  let contestTypeId = schedule.contestTypeId; // 赛事类型ID
  // 获取裁判信息
  let {
    userInfo,
    userIdentityCurrent,
    userPermission
  } = await getUserInfo(DB, refereeId);
  if (!isInArray(config.userStatus.normalUser, userInfo.status)) {
    throw errMsg.BadRequest.inherit(retCodeMsgMap[7001]);// 裁判账号异常
  }
  let permissionTypeIdArr = [];// 用户包含了哪些权限类型
  // 判断裁判权限
  let havePermission = 0; // 默认裁判没有执法该赛程的权限
  if (userPermission) {
    userPermission.map(item => {
      if (item.contestTypeId === contestTypeId) {
        havePermission = 1; // 表示该裁判有执法对应赛事类型的权限
      }

      if (!isInArray(permissionTypeIdArr, item.permissionTypeId)) {
        permissionTypeIdArr.push(item.permissionTypeId);
      }

    });
  }
  let position = []; // 裁判可以执法的位置
  if (havePermission === 1) {
    // 权限类型包含了【超级管理员】或【管理员】
    if (isInArray(permissionTypeIdArr, 1) || isInArray(permissionTypeIdArr, 2)) {
      // position = config.refereePosition.all;
      position = config.refereePosition[config.sysContestType[contestTypeId] + "All"];
    } else {
      if (userIdentityCurrent) {
        userIdentityCurrent.map(item => {
          if (item.contestTypeId === contestTypeId) {
            position.push(item.position);
          }
        });
      }
    }
  }
  return {
    position
  };
};

/**
 * 根据日期找出用户当日对应的一周七天哪天排班了哪天没有排班
 * @param {*} server
 * @param {*} params
 * @returns
 */
exports.weekApply = async (server, params) => {
  // 找出提交过来的那日所在周的所有日期
  let {
    weekDate,
    weekArr
  } = weekDay(params.applyDate);
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  let list = await DB.getModel("userWorkSchedule").findAll({
    where: {
      userId: params.userId,
      applyDate: weekDate,
      isDelete: 0,
      status: config.userWorkScheduleStatus.showFront// 找出这一周内所有的排班以及空闲排班日;
    },
    raw: true,
    attributes: ['applyDate']
  });
  let valiDay = [];
  if (list.length > 0) {
    list.forEach((arr) => {
      valiDay.push(arr.applyDate);
      let indexU = weekDate.indexOf(arr.applyDate);
      if (indexU > -1) {
        weekDay.splice(indexU, 1);
      }
    });
  }

  return {
    weekDate,
    valiDay,
    weekArr
  };
}
"use strict";


const {checkUserPermission} = require("../check/userPermission");
const errMsg = require("../../config/errMsg");
const {retCodeMsgMap} = require("../../config/retCode");
const {Op} = require("sequelize");
const {checkUserForbidden,checkUserFreeze} = require("../check/userRefereeStatus");

exports.contestHistoryList = async (server, params) => {
  let {userId, type, year, name, page, pageNum, paging} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  const contestHistory = DB.getModel("contestHistory");
  let where = {"isDelete": 0};
  if (type) {
    where.type = {[Op.like]: "%" + type + "%"};
  }
  if (year) {
    where.year = year;
  }
  if (name) {
    where.name = {[Op.like]: "%" + name + "%"};
  }
  let options = {
    attributes: ["id", "type", "year", "name"],
    where,
    order: [["year", "desc"], ["id", "desc"]],
    raw: true
  };
  if (paging === 1) {
    options.limit = pageNum;
    options.offset = (page - 1) * pageNum;
  }
  return await contestHistory.findAndCountAll(options);
};

/**
 * 增加历史赛程信息
 * @param {*} server 
 * @param {*} params 
 * @returns 
 */
exports.contestHistoryAdd = async (server, params) => {
  let {userId, type, year, name} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'contestHistory-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);
  const contestHistory = DB.getModel("contestHistory");
  contestHistory.create({
    type, year, name
  });
  return true;
};

/**
 * 编辑历史赛程信息
 * @param {*} server 
 * @param {*} params 
 * @returns 
 */
exports.contestHistoryEdit = async (server, params) => {
  let {userId, id, type, year, name} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'contestHistory-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);
  const contestHistory = DB.getModel("contestHistory");
  contestHistory.update({type, year, name}, {
    where: {id: id}
  });
  return true;
};

/**
 * 删除历史赛程信息
 * @param {*} server 
 * @param {*} params 
 * @returns 
 */
exports.contestHistoryDelete = async (server, params) => {
  let {userId, id} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'contestHistory-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);
  const contestHistory = DB.getModel("contestHistory");
  const userRefereeContestHistory = DB.getModel("userRefereeContestHistory");
  let history = await contestHistory.findByPk(id);
  if (!history) {
    throw errMsg.BadRequest.inherit('历史赛事不存在');
  }
  let count = await userRefereeContestHistory.count({
    where: {contestHistoryId: history.id, isDelete: 0}
  });
  if (count > 0) {
    throw errMsg.BadRequest.inherit('此历史赛事已被用作裁判的执裁经历');
  }
  await contestHistory.update({isDelete: 1}, {
    where: {id: id}
  });
  return true;
};
"use strict";


const {checkUserIsSuperManagerHasContestTypePermission} = require("../check/userPermission");
const errMsg = require("../../config/errMsg");
const {Op} = require("sequelize");
const {checkUserForbidden, checkUserFreeze} = require("../check/userRefereeStatus");

/**
 * 地图仓库列表
 * @param server
 * @param params
 * @returns {Promise<*>}
 */
exports.mapsList = async (server, params) => {
  let {status, nameEn, nameCn, page, pageNum, paging} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  const maps = DB.getModel("maps");
  let where = {"isDelete": 0};
  if (status !== -1) {
    where.status = status;
  }
  if (nameEn) {
    where.nameEn = {[Op.like]: "%" + nameEn + "%"};
  }
  if (nameCn) {
    where.nameCn = {[Op.like]: "%" + nameCn + "%"};
  }
  let options = {
    attributes: ["id", "nameEn", "nameCn", "status"],
    where,
    order: [["status", "desc"], ["id", "desc"]],
    raw: true
  };
  if (paging === 1) {
    options.limit = pageNum;
    options.offset = (page - 1) * pageNum;
  }
  return await maps.findAndCountAll(options);
};

// 判断已经已用的地图是否达到7张
async function countEnableMap(DB) {
  const maps = DB.getModel("maps");
  let count = await maps.count({
    where: {
      status: 1,
      isDelete: 0
    }
  });
  console.info(count);
  if (count >= 7) {
    throw errMsg.BadRequest.inherit("地图最多启用7张，请先禁用其他地图再新增启用地图");
  }
}

/**
 * 增加地图仓库
 * @param server
 * @param params
 * @returns {Promise<boolean>}
 */
exports.mapsAdd = async (server, params) => {
  let {userId, status, nameEn, nameCn} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, userId);//检查当前登录用户是否被封
  await checkUserFreeze(DB, userId);//检查当前登录用户是否被冻结
  // 验证用户权限-VAL超级管理员才有此权限
  await checkUserIsSuperManagerHasContestTypePermission(DB, userId, 4);
  if (status === 1) {
    await countEnableMap(DB);// 判断已经已用的地图是否达到7张
  }
  const maps = DB.getModel("maps");
  maps.create({
    status, nameEn, nameCn
  });
  return true;
};

/**
 * 编辑地图仓库
 * @param server
 * @param params
 * @returns {Promise<boolean>}
 */
exports.mapsEdit = async (server, params) => {
  let {userId, id, status, nameEn, nameCn} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, userId);//检查当前登录用户是否被冻结
  // 验证用户权限-VAL超级管理员才有此权限
  await checkUserIsSuperManagerHasContestTypePermission(DB, userId, 4);
  if (status === 1) {
    await countEnableMap(DB);// 判断已经已用的地图是否达到7张
  }
  const maps = DB.getModel("maps");
  maps.update({status, nameEn, nameCn}, {
    where: {id: id}
  });
  return true;
};

/**
 * 删除地图仓库
 * @param server
 * @param params
 * @returns {Promise<boolean>}
 */
exports.mapsDelete = async (server, params) => {
  let {userId, id} = params;
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, userId);//检查当前登录用户是否被冻结
  // 验证用户权限-VAL超级管理员才有此权限
  await checkUserIsSuperManagerHasContestTypePermission(DB, userId, 4);
  const maps = DB.getModel("maps");
  let map = await maps.findByPk(id);
  if (!map) {
    throw errMsg.BadRequest.inherit('地图仓库不存在');
  }
  await maps.update({isDelete: 1}, {
    where: {id: id}
  });
  return true;
};
"use strict";

const config = require("../../config/config");
const {Op} = require("sequelize");
const {isoDateFormat, getCurrentDateTime} = require("../../lib/date");
const {checkUserPermission} = require("../check/userPermission");
const errMsg = require("../../config/errMsg");
const {retCodeMsgMap} = require("../../config/retCode");
const {addUserMessage} = require("../userMessage");
const sequelize = require("sequelize");
const {checkUserForbidden,checkUserFreeze} = require("../check/userRefereeStatus");
const {arrangeUserInfo} = require("../user/getUsers");
const {getUserInfo} = require("../apiBase");

/**
 * 裁判列表
 * @param server
 * @param params
 * @returns {Promise<{list: *}>}
 */
exports.refereeList = async (server, params) => {
  let {userId, contestTypeId, position, refereeStatus, refereeName, refereeNumber, page, pageNum} = params;
  let today = getCurrentDateTime("YYYY-MM-DD");
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  let userIsManager = true;// 用户是否为管理员
  let refereeStatusAll = config.refereeStatus.all;// 默认可以看到所有状态的裁判
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'referee-manage');
  if (verifyRes[0] !== 1000) {// 非管理员只返回冻结、在职的裁判
    refereeStatusAll = config.refereeStatus.nonManager;
    userIsManager = false;
  }
  const User = DB.getModel("user");
  const UserPermission = DB.getModel("userPermission");
  const UserIdentity = DB.getModel("userIdentity");
  const SysIdentity = DB.getModel("sysIdentity");
  const SysPermission = DB.getModel("sysPermission");
  User.hasMany(UserPermission, {
    foreignKey: "userId",
    sourceKey: "id"
  }); // 用户权限
  User.hasMany(UserIdentity, {
    foreignKey: "userId",
    sourceKey: "id"
  }); // 用户身份
  UserIdentity.hasOne(SysIdentity, {
    foreignKey: "id",
    sourceKey: "identityId"
  });
  UserPermission.hasOne(SysPermission, {
    foreignKey: "id",
    sourceKey: "permissionId"
  });
  // 默认所有的位置
  let positionIds = config.refereePosition.all;
  let positionFlag = false;
  // 默认所有的赛事类型
  let contestTypeIds = config.sysContestType.all;
  if (contestTypeId) {
    contestTypeIds = contestTypeId.split(',');
    positionFlag = true;
  }
  if (position) {
    positionIds = position.toString().split(',');
    positionFlag = true;
  }
  // 默认所有的权限类型
  let permissionIds = config.sysPermissionType.all;
  let permissionFlag = false;
  // 用户名是否选择了 模糊查询
  let userWhere = {
    [Op.and]: [{
      isDelete: 0,
      refereeStatus: refereeStatusAll,
      status: config.userStatus.normalUser// 审核通过的用户
    }]
  };
  if (refereeStatus) {
    switch (refereeStatus) {
      case 1: // sql: (refereeStatus = 1) or (refereeStatus = 2 and (freezeStart > today || freezeEnd < today))
        userWhere[Op.and].push(
          {
            [Op.or]: [
              {refereeStatus: config.refereeStatus.active},
              {
                [Op.and]: [
                  {refereeStatus: config.refereeStatus.freeze},
                  {
                    [Op.or]: [
                      {freezeStart: {[Op.gt]: today}},
                      {freezeEnd: {[Op.lt]: today}}
                    ]
                  }
                ]
              }
            ]
          }
        );
        break;
      case 2:// sql: refereeStatus = 2 and (freezeStart <= today and freezeEnd >= today)
        userWhere[Op.and].push(
          {
            [Op.and]: [
              {refereeStatus: config.refereeStatus.freeze},
              {
                [Op.and]: [
                  {freezeStart: {[Op.lte]: today}},
                  {freezeEnd: {[Op.gte]: today}}
                ]
              }
            ]
          }
        );
        break;
      default : userWhere[Op.and].push({
        refereeStatus: config.refereeStatus.depart
      });
    }
  }
  if (refereeName) {
    userWhere[Op.and].push({
      name: {[Op.like]: '%' + refereeName + '%'}
    });
  }
  if (refereeNumber) {
    userWhere[Op.and].push({
      refereeNumber: {[Op.like]: '%' + refereeNumber + '%'}
    });
  }
  // 获取所有符合条件的用户ID
  let allList = await User.findAll({
    order: [
      ['id', 'desc']
    ],
    distinct: true,
    attributes: [
      ['id', 'userId']
    ],
    where: userWhere,
    include: [
      { // 身份
        model: UserIdentity,
        required: positionFlag,
        where: {isDelete: 0},
        attributes: ["id"],
        include: [{
          model: SysIdentity,
          where: {
            isDelete: 0,
            contestTypeId: contestTypeIds,
            position: positionIds
          },
          attributes: ["name"],
        }]
      },
      { // 权限
        model: UserPermission,
        required: permissionFlag,
        where: {isDelete: 0},
        attributes: ["id"],
        include: [{
          model: SysPermission,
          where: {
            isDelete: 0,
            contestTypeId: contestTypeIds,
            permissionTypeId: permissionIds
          },
          attributes: ["name"],
        }]
      }
    ]
  });
  let allUserIdArr = []; // 获取所有符合要求的用户ID
  allList.map(data => {
    let item = data.dataValues;
    allUserIdArr.push(item.userId);
  });
  let list = await DB.getModel("user").findAndCountAll({
    attributes: [['id', 'userId'], 'name', 'mobile', 'email', 'image', 'city', 'refereeNumber', 'refereeStatus', 'freezeStart', 'freezeEnd', 'freezeReason', 'forbidden', 'updatedAt'],
    where: {id: allUserIdArr},
    limit: pageNum,
    offset: (page - 1) * pageNum,
    order: [ [sequelize.literal("(case when status=1 then 1 when status=2 then 2 when status=6 then 3 else 4 end)")], ['updatedAt', 'desc']],
    raw: true
  });
  if (list.rows.length > 0) {
    let tmp = [];
    let userIdArr = []; // 所有的用户ID
    list.rows.map(item => {
      userIdArr.push(item.userId);
      arrangeUserInfo(item);// 整理裁判信息
      tmp.push({
        refereeId: item.userId,// 裁判ID
        name: item.name,
        mobile: item.mobile,
        email: item.email,
        image: item.image,
        city: item.city,
        refereeStatus: userIsManager ? item.refereeStatus : "-",// 非管理员看不到裁判状态
        freezeStart: userIsManager ? item.freezeStart : "-",// 非管理员看不到冻结开始日期，且当前是冻结状态才能看到
        freezeEnd: userIsManager ? item.freezeEnd : "-",// 非管理员看不到冻结结束日期，且当前是冻结状态才能看到
        freezeReason: userIsManager ? item.freezeReason : "-",// 非管理员看不到冻结原因，且当前是冻结状态才能看到
        refereeNumber: item.refereeNumber,
        forbidden: item.forbidden,
        updatedAt: isoDateFormat(item.updatedAt),
        identity: [],
      });
    });
    // 获取用户的身份
    let identityArr = await UserIdentity.findAll({
      attributes: ['userId'],
      where: {
        userId: userIdArr,
        isDelete: 0
      },
      include: {
        model: SysIdentity,
        attributes: [
          ['name', 'identityName']
        ]
      },
      raw: true
    });
    identityArr.map(item => {
      tmp.map(item2 => {
        if (item.userId === item2.refereeId) {
          item2.identity.push(item['sysIdentity.identityName']);
        }
      });
    });
    // 身份转换为字符串
    tmp.map(item => {
      item.identity = item.identity.join('、');
    });

    for (const item of tmp) {
      let {userRefereeContestHistory} = await getUserInfo(DB, item["refereeId"], ["userRefereeContestHistory"]);
      item["userRefereeContestHistory"] = userRefereeContestHistory;
    }

    list.rows = tmp;
  }
  return {list};
};

/**
 * 修改裁判信息
 * @param {*} server
 * @param {*} params
 * @returns
 */
exports.refereeStatusEdit = async (server, params) => {
  const {userId, refereeId, refereeStatus, freezeStart, freezeEnd, freezeReason} = params;
  if (refereeStatus === 2) {
    if (!freezeStart || !freezeEnd) {
      throw errMsg.BadRequest.inherit('请提供冻结开始结束日期');
    }
    if (!freezeReason) {
      throw errMsg.BadRequest.inherit('请提供冻结原因');
    }
  }
  const DB = server.plugins["hapi-sequelizejs"][process.env.DB_MATCH_ADMIN_NAME];
  await checkUserForbidden(DB, params.userId);//检查当前登录用户是否被封禁
  await checkUserFreeze(DB, params.userId);//检查当前登录用户是否被冻结
  // 验证用户权限
  let verifyRes = await checkUserPermission(DB, userId, 'referee-manage');
  if (verifyRes[0] !== 1000) throw errMsg.BadRequest.inherit(retCodeMsgMap[verifyRes[0]]);
  // 原来裁判的信息
  let refereeOld = await DB.getModel("user").findByPk(refereeId);
  // 修改内容
  let updateDoc = {
    refereeStatus: refereeStatus,
    freezeStart: freezeStart,
    freezeEnd: freezeEnd,
    freezeReason: freezeReason
  };
  if (refereeStatus === 3) {// 设置离职时，需要同时将账号设置为封禁
    updateDoc.forbidden = 1;
  }
  if (refereeStatus === 1) {// 设置为在职，需要同时将账号设置为没有封禁
    updateDoc.forbidden = 0;
  }

  // 如果本来状态是冻结，且本次修改之后的状态是在职，则发送消息给裁判
  if (refereeOld.refereeStatus === 2 && refereeStatus === 1) {
    await addUserMessage(DB, {
      userId: refereeId, // 消息接收人
      type: 700, // 裁判解冻之后短信通知裁判
    });
    updateDoc.freezeEnd = null;
    updateDoc.freezeStart = null;
    updateDoc.freezeReason = '';
  }
  await DB.getModel("user").update(updateDoc, {
    where: {id: refereeId}
  });
  return true;
};




